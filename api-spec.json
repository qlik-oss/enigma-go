{
  "oappy": "0.0.1",
  "info": {
    "name": "enigma",
    "go-package-name": "enigma",
    "go-package-import-path": "github.com/qlik-oss/enigma-go",
    "version": "latest",
    "description": "enigma-go is a library that helps you communicate with a Qlik Associative Engine.",
    "license": "MIT"
  },
  "x-qlik-visibility": "public",
  "x-qlik-stability": "locked",
  "definitions": {
    "AlfaNumString": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "IsNum": {
          "description": "Is set to true if the value is a numeric.",
          "type": "bool"
        },
        "String": {
          "description": "Calculated value.",
          "type": "string"
        }
      }
    },
    "AlternateStateData": {
      "type": "struct",
      "entries": {
        "FieldItems": {
          "description": "List of the selections.",
          "type": "slice",
          "items": {
            "type": "#/definitions/BookmarkFieldItem"
          }
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections: $",
          "type": "string"
        }
      }
    },
    "AppEntry": {
      "type": "struct",
      "entries": {
        "FileSize": {
          "type": "int"
        },
        "HasSectionAccess": {
          "description": "If true the app has section access configured.",
          "type": "bool"
        },
        "ID": {
          "description": "Identifier of the app.",
          "type": "string"
        },
        "LastReloadTime": {
          "description": "Last reload time of the app.",
          "type": "string"
        },
        "Meta": {
          "description": "Meta data.",
          "type": "#/definitions/NxMeta"
        },
        "Path": {
          "description": "Path of the app.",
          "type": "string"
        },
        "ReadOnly": {
          "description": "Is set to true if the app is read-only.",
          "type": "bool"
        },
        "Thumbnail": {
          "description": "App thumbnail.",
          "type": "#/definitions/StaticContentUrl"
        },
        "Title": {
          "description": "Title of the app.",
          "type": "string"
        }
      }
    },
    "AppObjectList": {
      "description": "Lists the app objects. Is the layout for AppObjectListDef.\nAn app object is a generic object created at app level.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the list of dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "AppObjectListDef": {
      "description": "Defines the list of objects in an app.\nAn app object is a generic object created at app level.",
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data that you want to include in the app list definition.\nYou need to enter the paths to the information you want to retrieve.",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Type": {
          "description": "Type of the app list.",
          "type": "string"
        }
      }
    },
    "AppScript": {
      "type": "struct",
      "entries": {
        "Meta": {
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "type": "#/definitions/NxMeta"
        },
        "Script": {
          "description": "Script text.",
          "type": "string"
        }
      }
    },
    "ArrayOfNxValuePoint": {
      "type": "slice",
      "items": {
        "type": "#/definitions/NxPivotValuePoint"
      }
    },
    "AssociationScore": {
      "type": "struct",
      "entries": {
        "Field1Scores": {
          "description": "Association information about the field FieldName1 defined in qFieldPairName .",
          "type": "#/definitions/FieldScores"
        },
        "Field2Scores": {
          "description": "Association information about the field FieldName2 defined in qFieldPairName .",
          "type": "#/definitions/FieldScores"
        },
        "FieldPairName": {
          "description": "Pair of fields.\n_\u003c FieldName1\u003e_ / \u003c FieldName2\u003e\nWhere:\n\u003c FieldName1 \u003e is a field in the table 1 (defined in qTable1 )\n\u003c FieldName2 \u003e is a field in the table 2 (defined in qTable2 )\nIf the field is a synthetic key, the name of the field is preceded by [Synthetic key]: .",
          "type": "string"
        },
        "ScoreSummary": {
          "description": "Flag used to interpret calculated scores.\nOne of the following values or sum of values that apply:\n\n• 0: The cardinal ratio cannot be zero but the symbol score and the row score can be zero.\n\n• -1: The fields do not have the same type.\n\n• -2: The number of rows of the field FieldName1 is zero.\n\n• -4: The number of distinct values of the field FieldName1 is zero.\n\n• -8: The number of rows of the field FieldName2 is zero.\n\n• -16: The number of distinct values of the field FieldName2 is zero.\n\nExample:\nThe number of rows of the field FieldName1 is zero, and the number of distinct values of the field FieldName2 is zero, then qScoreSummary is -18.",
          "type": "int"
        }
      }
    },
    "BNFDef": {
      "type": "struct",
      "entries": {
        "AggrFunc": {
          "description": "If set to true, the definition is related to an aggregation function.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "Bnf": {
          "description": "Array of token references that all together build up the definition of the current token.\nGenerally, if the array is not empty, the definition is a BNF rule (_qIsBnfRule_ is set to true). However, some BNF  rules do have an empty array (_qIsBnfRule_ is set to true, but qBnf is empty).",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "BnfLiteral": {
          "description": "If set to true, the definition specifies a literal token.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "ControlStatement": {
          "description": "If set to true, the definition specifies a control statement.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "Depr": {
          "description": "Indicates whether a script statement, a chart or a script function is deprecated (not recommended for use).\nIf set to true, the script statement or the function is not recommended for use in Qlik Sense.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "FG": {
          "description": "Group of the function.\n\nOne of:\n\n• ALL or FUNC_GROUP_ALL\n\n• U or FUNC_GROUP_UNKNOWN\n\n• NONE or FUNC_GROUP_NONE\n\n• AGGR or FUNC_GROUP_AGGR\n\n• NUM or FUNC_GROUP_NUMERIC\n\n• RNG or FUNC_GROUP_RANGE\n\n• EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC\n\n• TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC\n\n• FIN or FUNC_GROUP_FINANCIAL\n\n• MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE\n\n• COUNT or FUNC_GROUP_COUNTER\n\n• STR or FUNC_GROUP_STRING\n\n• MAPP or FUNC_GROUP_MAPPING\n\n• RCRD or FUNC_GROUP_INTER_RECORD\n\n• CND or FUNC_GROUP_CONDITIONAL\n\n• LOG or FUNC_GROUP_LOGICAL\n\n• NULL or FUNC_GROUP_NULL\n\n• SYS or FUNC_GROUP_SYSTEM\n\n• FILE or FUNC_GROUP_FILE\n\n• TBL or FUNC_GROUP_TABLE\n\n• DATE or FUNC_GROUP_DATE_AND_TIME\n\n• NUMI or FUNC_GROUP_NUMBER_INTERPRET\n\n• FRMT or FUNC_GROUP_FORMATTING\n\n• CLR or FUNC_GROUP_COLOR\n\n• RNK or FUNC_GROUP_RANKING\n\n• GEO or FUNC_GROUP_GEO\n\n• EXT or FUNC_GROUP_EXTERNAL\n\n• PROB or FUNC_GROUP_PROBABILITY\n\n• ARRAY or FUNC_GROUP_ARRAY\n\n• LEG or FUNC_GROUP_LEGACY",
          "type": "string"
        },
        "FGList": {
          "description": "List of groups the function belongs to.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "FieldFlag": {
          "description": "If set to true, the definition is related to a field.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "HelpId": {
          "description": "Reference identifier to a function described in the documentation. The identifier is stored in the definition of the token containing the function name.\nIs not used in Qlik Sense.",
          "type": "int"
        },
        "IsBnfRule": {
          "description": "If set to true, a list of related rule tokens is assigned to qBnf .\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "MT": {
          "description": "Type of the data.\n\nOne of:\n\n• N or NOT_META\n\n• D or META_DOC_NAME\n\n• R or META_RET_TYPE\n\n• V or META_DEFAULT_VALUE",
          "type": "string"
        },
        "Name": {
          "description": "Token name.\nOne of:\n\n• A rule name\n\n• An identifier\n\n• A literal value",
          "type": "string"
        },
        "Nbr": {
          "description": "Number of the current token definition.",
          "type": "int"
        },
        "PNbr": {
          "description": "Number of the parent rule definition.",
          "type": "int"
        },
        "QvFunc": {
          "description": "If set to true, the definition is related to a Qlik Sense function. It cannot be an aggregation function.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "ScriptStatement": {
          "description": "If set to true, the definition specifies a script statement.\nThis parameter is optional. The default value is false.",
          "type": "bool"
        },
        "Str": {
          "description": "Literal string of the token.\nExamples: 'Round' and '('.",
          "type": "string"
        }
      }
    },
    "BookmarkFieldItem": {
      "type": "struct",
      "entries": {
        "AndMode": {
          "description": "If set to true, selections within a list object are made in AND mode; If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in and-mode, all records that are associated with Customer 1 and Customer 2 are selected.\nThe default value is false; selections within a list object are made in OR mode. If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in or-mode, all records that are associated with either Customer 1 or Customer 2 are selected.\nThis parameter is not returned if set to false.",
          "type": "bool"
        },
        "Def": {
          "description": "Name and type of the field.",
          "type": "#/definitions/FieldDefEx"
        },
        "ExcludedValues": {
          "description": "List of excluded values.\nEither the list of selected values or the list of excluded values is displayed.",
          "type": "slice",
          "items": {
            "type": "#/definitions/FieldValue"
          }
        },
        "Locked": {
          "description": "Indicates if the field is locked.\nDefault is false.",
          "type": "bool"
        },
        "OneAndOnlyOne": {
          "description": "If set to true, the field has always one selection (not 0 and not more than 1). If another value is selected, the previous one is unselected.\nThe default value is false. This parameter is not returned if set to false.",
          "type": "bool"
        },
        "SelectInfo": {
          "description": "Information on the selections criteria.",
          "type": "#/definitions/SelectInfo"
        },
        "Values": {
          "type": "slice",
          "items": {
            "type": "#/definitions/FieldValue"
          }
        }
      }
    },
    "BookmarkFieldPage": {
      "description": "Defines the range of the bookmark fields that are returned.",
      "type": "struct",
      "entries": {
        "EndIndex": {
          "description": "The end value of the range.",
          "type": "int"
        },
        "StartIndex": {
          "description": "The start value of the range.",
          "type": "int"
        }
      }
    },
    "BookmarkList": {
      "description": "Lists the bookmarks. Is the layout for BookmarkListDef.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the list of bookmarks.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "BookmarkListDef": {
      "description": "Defines the list of bookmarks.",
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Type": {
          "description": "Type of the list.",
          "type": "string"
        }
      }
    },
    "BookmarkVariableItem": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the variable.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the variable.",
          "type": "#/definitions/FieldValue"
        }
      }
    },
    "CalendarStrings": {
      "type": "struct",
      "entries": {
        "DayNames": {
          "description": "List of short day names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "LongDayNames": {
          "description": "List of long day names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "LongMonthNames": {
          "description": "List of long month names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "MonthNames": {
          "description": "List of short month names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ChangeLists": {
      "description": "ChangeLists list of changed and closed handles.",
      "type": "struct",
      "entries": {
        "Changed": {
          "description": "Changed list of changed object handles or nil",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Closed": {
          "description": "Closed  list of closed object handles or nil",
          "type": "slice",
          "items": {
            "type": "int"
          }
        }
      }
    },
    "ChangeListsKey": {
      "description": "ChangeListsKey key for ChangeLists context value",
      "type": "struct"
    },
    "CharRange": {
      "type": "struct",
      "entries": {
        "CharCount": {
          "description": "Number of occurrences found.",
          "type": "int"
        },
        "CharPos": {
          "description": "Position of the first search occurrence.",
          "type": "int"
        }
      }
    },
    "ChildList": {
      "description": "Lists the children of a generic object. Is the layout for ChildListDef.\nChildList is used by the GetLayout Method to list the children of a generic object.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the items in the app object.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "ChildListDef": {
      "description": "Defines the list of children of a generic object.\nWhat is defined in ChildListDef has an impact on what the GetLayout method returns. See Example for more information.",
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data that you want to include in the child list definition.\nYou need to enter the paths to the information you want to retrieve.",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        }
      }
    },
    "CodePage": {
      "type": "struct",
      "entries": {
        "Description": {
          "description": "Description of the code page.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the code page.",
          "type": "string"
        },
        "Number": {
          "description": "Number of the code page.",
          "type": "int"
        }
      }
    },
    "Connection": {
      "type": "struct",
      "entries": {
        "ConnectionString": {
          "description": "One of:\n\n• ODBC CONNECT TO [\u003cprovider name\u003e]\n\n• OLEDB CONNECT TO [\u003cprovider name\u003e]\n\n• CUSTOM CONNECT TO [\u003cprovider name\u003e]\n\n• \"\u003clocal absolute or relative path, UNC path\u003e\"\n\n• \"\u003cURL\u003e\"\n\nConnection string.\nThis parameter is mandatory and must be set when creating or modifying a connection.",
          "type": "string"
        },
        "Id": {
          "description": "Identifier of the connection.\nIs generated by the engine and is unique.",
          "type": "string"
        },
        "LogOn": {
          "description": "Select which user credentials to use to connect to the source.\n\n• LOG_ON_SERVICE_USER: Disables\n\n• LOG_ON_CURRENT_USER: Enables\n\nOne of:\n\n• LOG_ON_SERVICE_USER\n\n• LOG_ON_CURRENT_USER",
          "type": "string"
        },
        "Meta": {
          "description": "Information about the connection.",
          "type": "#/definitions/NxMeta"
        },
        "ModifiedDate": {
          "description": "Is generated by the engine.\nCreation date of the connection or last modification date of the connection.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the connection.\nThis parameter is mandatory and must be set when creating or modifying a connection.",
          "type": "string"
        },
        "Password": {
          "description": "Password of the user who creates the connection.\nThis parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.\nA call to GetConnection Method does not return the password.",
          "type": "string"
        },
        "Type": {
          "description": "One of:\n\n• ODBC\n\n• OLEDB\n\n• \u003cName of the custom connection file\u003e\n\n• folder\n\n• internet\n\nType of the connection.\nThis parameter is mandatory and must be set when creating or modifying a connection.\nFor ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.\nThe type is not case sensitive.",
          "type": "string"
        },
        "UserName": {
          "description": "Name of the user who creates the connection.\nThis parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.\nA call to GetConnection Method does not return the user name.",
          "type": "string"
        }
      }
    },
    "ContentLibraryList": {
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the content library.",
          "type": "slice",
          "items": {
            "type": "#/definitions/ContentLibraryListItem"
          }
        }
      }
    },
    "ContentLibraryListItem": {
      "type": "struct",
      "entries": {
        "AppSpecific": {
          "description": "Is set to true if the library is specific to the app (not a global content library).",
          "type": "bool"
        },
        "Meta": {
          "description": "Information about publishing and permissions.",
          "type": "#/definitions/NxMeta"
        },
        "Name": {
          "description": "Name of the library.",
          "type": "string"
        }
      }
    },
    "CustomConnector": {
      "type": "struct",
      "entries": {
        "DisplayName": {
          "description": "Name of the custom connector as displayed in the Qlik interface.",
          "type": "string"
        },
        "MachineMode": {
          "description": "Mode of the machine (64 or 32 bits).\n\nOne of:\n\n• CONNECT_DEFAULT\n\n• CONNECT_64\n\n• CONNECT_32",
          "type": "string"
        },
        "Parent": {
          "description": "Name of the parent folder that contains the custom connector file.",
          "type": "string"
        },
        "Provider": {
          "description": "Name of the custom connector file.",
          "type": "string"
        },
        "SupportFileStreaming": {
          "type": "bool"
        }
      }
    },
    "DataField": {
      "type": "struct",
      "entries": {
        "IsKey": {
          "description": "Is set to true if the field is a primary key.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the field.",
          "type": "string"
        },
        "OriginalFieldName": {
          "description": "Is shown for fixed records.\n_qOriginalFieldName_ and qName are identical if no field names are used in the file.\n_qOriginalFieldName_ differs from qName if embedded file names are used in the file.",
          "type": "string"
        }
      }
    },
    "DataRecord": {
      "type": "struct",
      "entries": {
        "Values": {
          "description": "List of values inside the table.\nThe first values (in result/qPreview/0/qValues ) correspond to the field names in the table.\nThe following values (from result/qPreview/1/qValues ) are the values of the fields in the table.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataTable": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the table.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the table.\nFor example: Table or View.",
          "type": "string"
        }
      }
    },
    "DataTableEx": {
      "type": "struct",
      "entries": {
        "Fields": {
          "description": "List of the fields in the table.",
          "type": "slice",
          "items": {
            "type": "#/definitions/DataField"
          }
        },
        "FormatSpec": {
          "description": "List of format specification items, within brackets.\nExamples of specification items:\n\n• file type\n\n• embedded labels, no labels\n\n• table is \u003ctable name\u003e",
          "type": "string"
        },
        "Name": {
          "description": "Name of the table.",
          "type": "string"
        }
      }
    },
    "Database": {
      "type": "struct",
      "entries": {
        "IsDefault": {
          "description": "Is set to true if the database is set by default.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the database.",
          "type": "string"
        }
      }
    },
    "DatabaseInfo": {
      "type": "struct",
      "entries": {
        "DBFirst": {
          "description": "If set to true, it means that the database is displayed first, before the owners and tables.",
          "type": "bool"
        },
        "DBMSName": {
          "description": "Name of the product accessed by the provider.",
          "type": "string"
        },
        "DBSeparator": {
          "description": "Character string used after the database name.\nExample with separator \" . \":\nFROM LinkedTablesData.dbo.Months\nWhere:\n\n• LinkedTablesData is the database name\n\n• dbo is the owner name\n\n• Months is the table name",
          "type": "string"
        },
        "DBUsage": {
          "description": "If set to true, it means that the data source contains some databases.",
          "type": "bool"
        },
        "DefaultDatabase": {
          "description": "Name of the default database.",
          "type": "string"
        },
        "Keywords": {
          "description": "List of the script keywords.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "OwnerSeparator": {
          "description": "Character string used after the owner name.\nExample with separator \" . \":\nFROM LinkedTablesData.dbo.Months\nWhere:\n\n• LinkedTablesData is the database name\n\n• dbo is the owner name\n\n• Months is the table name",
          "type": "string"
        },
        "OwnerUsage": {
          "description": "If set to true, it means that the data source contains some owners.",
          "type": "bool"
        },
        "QuotePreffix": {
          "description": "Prefix used with field, database or owner names that contain special characters or keywords.",
          "type": "string"
        },
        "QuoteSuffix": {
          "description": "Suffix used with field, database or owner names that contain special characters or keywords.",
          "type": "string"
        },
        "SpecialChars": {
          "description": "List of the special characters.",
          "type": "string"
        }
      }
    },
    "DatabaseOwner": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the owner.",
          "type": "string"
        }
      }
    },
    "DelimiterInfo": {
      "type": "struct",
      "entries": {
        "IsMultiple": {
          "description": "Is set to true if multiple spaces are used to separate the values.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the delimiter.\nExample:\n\"Tab_DELIMITER\"",
          "type": "string"
        },
        "Number": {
          "description": "Delimiter character number used by the engine to determine how to separate the values.",
          "type": "int"
        },
        "ScriptCode": {
          "description": "Representation of the delimiter value that is used in the script.\nExample:\n\"'\\t'\"",
          "type": "string"
        }
      }
    },
    "DerivedFieldsInTableData": {
      "type": "struct",
      "entries": {
        "Active": {
          "description": "Is set to true is the derived field is in use.",
          "type": "bool"
        },
        "DefinitionName": {
          "description": "Name of the derived definition.",
          "type": "string"
        },
        "Tags": {
          "description": "List of tags.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Dialer": {
      "description": "Dialer contains various settings for how to create WebSocket connections towards Qlik Associative Engine.",
      "type": "struct",
      "entries": {
        "CreateSocket": {
          "description": "A function to use when instantiating the WebSocket",
          "type": "function",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "https://golang.org/pkg/net/http/Header"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Socket"
            },
            {
              "type": "error"
            }
          ]
        },
        "Dial": {
          "description": "Dial establishes a connection to Qlik Associative Engine using the settings set in the Dialer. It takes two parameter",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "https://golang.org/pkg/net/http/Header"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Global"
            },
            {
              "type": "error"
            }
          ]
        },
        "Interceptors": {
          "description": "An array of interceptors that can be used to inject behaviour in the call chain",
          "type": "slice",
          "items": {
            "type": "#/definitions/Interceptor"
          }
        },
        "Jar": {
          "description": "Jar specifies the cookie jar.\nIf Jar is nil, cookies are not sent in requests and ignored\nin responses.",
          "type": "https://golang.org/pkg/net/http/CookieJar"
        },
        "MockMode": {
          "description": "When set to true a mock socket replaying previously recorded traffic is used instead of a real one.\nTrafficDumpFile specified what log file to use.",
          "type": "bool"
        },
        "TLSClientConfig": {
          "description": "A Config structure used to configure a TLS client or server",
          "type": "https://golang.org/pkg/crypto/tls/Config"
        },
        "TrafficDumpFile": {
          "description": "Specifies the path to a protocol traffic log file. When the MockMode parameter is set to false the a traffic logger writes the traffic to the specified file.\nIf MockMode is set to true the requests and responses recorded in the log file are used to respond to QIX API calls - in effect replaying a previously recorded scenario.",
          "type": "string"
        },
        "TrafficLogger": {
          "description": "An optional traffic logger. Note that this can not be used in conjunction with the TrafficDumpFile parameter.",
          "type": "#/definitions/TrafficLogger"
        }
      }
    },
    "DimensionList": {
      "description": "Lists the dimensions. Is the layout for DimensionListDef.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the list of dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "DimensionListDef": {
      "description": "Defines the lists of dimensions.",
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Type": {
          "description": "Type of the list.",
          "type": "string"
        }
      }
    },
    "DoReloadExParams": {
      "description": "Parameters for a reload.",
      "type": "struct",
      "entries": {
        "Debug": {
          "description": "Set to true to debug reload.\nThe default value is false.",
          "type": "bool"
        },
        "Mode": {
          "description": "0: for default mode.\n1: for ABEND; the reload of the script ends if an error occurs.\n2: for ignore; the reload of the script continues even if an error is detected in the script.",
          "type": "int"
        },
        "Partial": {
          "description": "Set to true for partial reload.\nThe default value is false.",
          "type": "bool"
        },
        "ReloadId": {
          "description": "Optional reload ID.\nID will be automatically generated if not set.",
          "type": "string"
        }
      }
    },
    "DoReloadExResult": {
      "description": "The result and path to script log for a reload.",
      "type": "struct",
      "entries": {
        "ScriptLogFile": {
          "description": "Path to the script log file.",
          "type": "string"
        },
        "Success": {
          "description": "The reload is successful if True.",
          "type": "bool"
        }
      }
    },
    "Doc": {
      "type": "struct",
      "entries": {
        "AbortModal": {
          "description": "Aborts any selection mode in an app. For more information about selection mode, see BeginSelections method.\n\nParameters:\n\n◾ accept   -   Set this parameter to true to accept the selections before exiting the selection mode.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "AddAlternateState": {
          "description": "Adds an alternate state in the app.\nYou can create multiple states within a Qlik Sense app and apply these states to specific objects within the app. Objects in a given state are not affected by user selections in the other states.\n\nParameters:\n\n◾ stateName   -   Name of the alternate state.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "AddFieldFromExpression": {
          "description": "Adds a field on the fly.\nThe expression of a field on the fly is persisted but not its values.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ name   -   Name of the field.\n\n◾ expr   -   Expression value.\nIt is not possible to use all aggregation functions. For example, you cannot add a field on the fly with an expression that uses the Sum or Count aggregation functions.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "ApplyBookmark": {
          "description": "Applies a bookmark.\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "Back": {
          "description": "Loads the last logical operation (if any).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "BackCount": {
          "description": "Returns the number of entries on the back stack.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "int"
            },
            {
              "type": "error"
            }
          ]
        },
        "CheckExpression": {
          "description": "Checks if a given expression is valid.\nThe expression is correct if the parameters qErrorMsg , qBadFieldNames and qDangerousFieldNames are empty.\n\nParameters:\n\n◾ expr     -   Expression to check.\n\n◾ labels   -   List of labels.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxRange"
              }
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxRange"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "CheckExpressionRaw": {
          "description": "Checks if a given expression is valid.\nThe expression is correct if the parameters qErrorMsg , qBadFieldNames and qDangerousFieldNames are empty.\n\nParameters:\n\n◾ expr     -   Expression to check.\n\n◾ labels   -   List of labels.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "CheckNumberOrExpression": {
          "description": "Checks if:\n\n• A given expression is valid.\n\n• A number is correct according to the locale.\n\nParameters:\n\n◾ expr   -   Expression to check.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxRange"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "CheckNumberOrExpressionRaw": {
          "description": "Checks if:\n\n• A given expression is valid.\n\n• A number is correct according to the locale.\n\nParameters:\n\n◾ expr   -   Expression to check.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "CheckScriptSyntax": {
          "description": "Checks the syntax of a script.\n\nExample:\n\n\"result\": { \"qErrors\": [ { \"qErrLen\": 3, \"qTabIx\": 0, \"qLineInTab\": 0, \"qColInLine\": 0, \"qTextPos\": 0 }, { \"qErrLen\": 5, \"qTabIx\": 0, \"qLineInTab\": 0, \"qColInLine\": 1, \"qTextPos\": 4, \"qSecondaryFailure\": true } ] }\nThe first area is the primary error area, the second area is the secondary error area. The second area is optional and is shown only if qSecondaryFailure is set to true. The second area ends when the next statement in the script begins.\n\nThe list of syntax errors in the script.\nIf there are no errors, the engine returns:\nIf there are errors, the engine returns the following properties in the response:\n\n  +-------------------+--------------------------------+---------+\n  |       NAME        |          DESCRIPTION           |  TYPE   |\n  +-------------------+--------------------------------+---------+\n  | qErrLen           | Length of the word where the   | Integer |\n  |                   | error is located.              |         |\n  | qTabIx            | Number of the faulty section.  | Integer |\n  | qLineInTab        | Line number in the section     | Integer |\n  |                   | where the error is located.    |         |\n  | qColInLine        | Position of the erroneous      | Integer |\n  |                   | text from the beginning of the |         |\n  |                   | line.                          |         |\n  | qTextPos          | Position of the erroneous      | Integer |\n  |                   | text from the beginning of the |         |\n  |                   | script.                        |         |\n  | qSecondaryFailure | The default value is false.    | Boolean |\n  +-------------------+--------------------------------+---------+",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/ScriptSyntaxError"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "CheckScriptSyntaxRaw": {
          "description": "Checks the syntax of a script.\n\nExample:\n\n\"result\": { \"qErrors\": [ { \"qErrLen\": 3, \"qTabIx\": 0, \"qLineInTab\": 0, \"qColInLine\": 0, \"qTextPos\": 0 }, { \"qErrLen\": 5, \"qTabIx\": 0, \"qLineInTab\": 0, \"qColInLine\": 1, \"qTextPos\": 4, \"qSecondaryFailure\": true } ] }\nThe first area is the primary error area, the second area is the secondary error area. The second area is optional and is shown only if qSecondaryFailure is set to true. The second area ends when the next statement in the script begins.\n\nThe list of syntax errors in the script.\nIf there are no errors, the engine returns:\nIf there are errors, the engine returns the following properties in the response:\n\n  +-------------------+--------------------------------+---------+\n  |       NAME        |          DESCRIPTION           |  TYPE   |\n  +-------------------+--------------------------------+---------+\n  | qErrLen           | Length of the word where the   | Integer |\n  |                   | error is located.              |         |\n  | qTabIx            | Number of the faulty section.  | Integer |\n  | qLineInTab        | Line number in the section     | Integer |\n  |                   | where the error is located.    |         |\n  | qColInLine        | Position of the erroneous      | Integer |\n  |                   | text from the beginning of the |         |\n  |                   | line.                          |         |\n  | qTextPos          | Position of the erroneous      | Integer |\n  |                   | text from the beginning of the |         |\n  |                   | script.                        |         |\n  | qSecondaryFailure | The default value is false.    | Boolean |\n  +-------------------+--------------------------------+---------+",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "ClearAll": {
          "description": "Clear selections in fields for current state. Locked fields are not cleared by default.\n\nParameters:\n\n◾ lockedAlso   -   When true, clears the selection for locked fields.\n\n◾ stateName    -   Alternate state name. When set, applies to alternate state instead of current",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ClearUndoBuffer": {
          "description": "Clears entirely the undo and redo buffer.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CloneBookmark": {
          "description": "Clones a bookmark.\nThe identifier is set by the engine.\n\nParameters:\n\n◾ id   -   Identifier of the object to clone.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CloneDimension": {
          "description": "Clones a dimension.\n\nThe identifier is set by the engine.\n\nParameters:\n\n◾ id   -   Identifier of the object to clone.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CloneMeasure": {
          "description": "Clones a measure.\n\nThe identifier is set by the engine.\n\nParameters:\n\n◾ id   -   Identifier of the object to clone.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CloneObject": {
          "description": "Clones root level objects, such as sheets and stories. The CloneObject method works for both app objects and child objects.\nWhen you clone an object that contains children, the children are cloned as well.\nIf you for example want to clone a visualization, you must provide the qID of the root object, in this case the sheet since CloneObject clones root level objects.\nIt is not possible to clone a session object.\n\nThe identifier is set by the engine.\n\nParameters:\n\n◾ id   -   Identifier of the object to clone. The identifier must be a root object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CommitDraft": {
          "description": "Commits the draft of an object that was previously created by invoking the CreateDraft method.\nCommitting a draft replaces the corresponding published object.\n\nParameters:\n\n◾ id   -   Identifier of the draft to commit.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "This will be removed in a future version",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CreateBookmark": {
          "description": "Creates a bookmark.\n\nParameters:\n\n◾ prop   -   Properties for the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericBookmarkProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmark"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateBookmarkEx": {
          "description": "Creates a bookmark with softpatches.\n\nParameters:\n\n◾ prop               -   Properties for the object.\n\n◾ objectIdsToPatch   -   Add softpatches for this objects if available. If empty all softpatches are added to the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericBookmarkProperties"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmark"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateBookmarkExRaw": {
          "description": "Creates a bookmark with softpatches.\n\nParameters:\n\n◾ prop               -   Properties for the object.\n\n◾ objectIdsToPatch   -   Add softpatches for this objects if available. If empty all softpatches are added to the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmark"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateBookmarkRaw": {
          "description": "Creates a bookmark.\n\nParameters:\n\n◾ prop   -   Properties for the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmark"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateConnection": {
          "description": "Creates a connection.\nA connection indicates from which data source the data should be taken.\n\nParameters:\n\n◾ connection   -   Information about the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/Connection"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateConnectionRaw": {
          "description": "Creates a connection.\nA connection indicates from which data source the data should be taken.\n\nParameters:\n\n◾ connection   -   Information about the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateDimension": {
          "description": "Creates a master dimension.\nA master dimension is stored in the library of an app and can be used in many objects. Several generic objects can contain the same dimension.\n\nParameters:\n\n◾ prop   -   Information about the properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericDimensionProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericDimension"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateDimensionRaw": {
          "description": "Creates a master dimension.\nA master dimension is stored in the library of an app and can be used in many objects. Several generic objects can contain the same dimension.\n\nParameters:\n\n◾ prop   -   Information about the properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericDimension"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateDraft": {
          "description": "Creates a draft of an object.\nThis method can be used to create a draft of a sheet or a story that is published. This is a way to continue working on a sheet or a story that is published.\nReplace the published object by the content of the draft by invoking the CommitDraft method.\n\nThe identifier is set by the engine.\n\nParameters:\n\n◾ id   -   Identifier of the object to create a draft from.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "This will be removed in a future version",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateMeasure": {
          "description": "Creates a master measure.\nA master measure is stored in the library of an app and can be used in many objects. Several generic objects can contain the same measure.\n\nParameters:\n\n◾ prop   -   Information about the properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericMeasureProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericMeasure"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateMeasureRaw": {
          "description": "Creates a master measure.\nA master measure is stored in the library of an app and can be used in many objects. Several generic objects can contain the same measure.\n\nParameters:\n\n◾ prop   -   Information about the properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericMeasure"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateObject": {
          "description": "Creates a generic object at app level. For more information on generic objects, see Generic object.\nIt is possible to create a generic object that is linked to another object.\nA linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).\nThe linked object has the same properties as the linking object.\nThe linking object cannot be a transient object.\n\nParameters:\n\n◾ prop   -   Information about the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateObjectRaw": {
          "description": "Creates a generic object at app level. For more information on generic objects, see Generic object.\nIt is possible to create a generic object that is linked to another object.\nA linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).\nThe linked object has the same properties as the linking object.\nThe linking object cannot be a transient object.\n\nParameters:\n\n◾ prop   -   Information about the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateSessionObject": {
          "description": "Creates a transient object. For example, you can use a transient object to create an app overview or a story overview.\nIt is possible to create a transient object that is linked to another object.\nA linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).\nThe linked object has the same properties as the linking object.\nThe linking object cannot be a transient object.\n\nParameters:\n\n◾ prop   -   Information about the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateSessionObjectRaw": {
          "description": "Creates a transient object. For example, you can use a transient object to create an app overview or a story overview.\nIt is possible to create a transient object that is linked to another object.\nA linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).\nThe linked object has the same properties as the linking object.\nThe linking object cannot be a transient object.\n\nParameters:\n\n◾ prop   -   Information about the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateSessionVariable": {
          "description": "Creates a transient variable.\nTo set some properties to the variable, use the SetProperties method.\n\nDefinition:\n\nA variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.\nWhen a variable is used in an expression, it is substituted by its value or the variable's definition.\n\nExample:\n\nThe variable x contains the text string Sum(Sales) .\nIn a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .\nHowever, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .\n\nParameters:\n\n◾ prop   -   Name of the variable. Variable names are case sensitive.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericVariableProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Variable"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateSessionVariableRaw": {
          "description": "Creates a transient variable.\nTo set some properties to the variable, use the SetProperties method.\n\nDefinition:\n\nA variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.\nWhen a variable is used in an expression, it is substituted by its value or the variable's definition.\n\nExample:\n\nThe variable x contains the text string Sum(Sales) .\nIn a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .\nHowever, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .\n\nParameters:\n\n◾ prop   -   Name of the variable. Variable names are case sensitive.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Variable"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateVariable": {
          "description": "Creates a variable.\n\nParameters:\n\n◾ name   -   Name of the variable. Variable names are case sensitive.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _Doc::CreateVariableEx_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateVariableEx": {
          "description": "Creates a variable.\nTo create a variable via a script, you need to use the SetScript method. For more information, see Create a variable.\nTo set some properties to the variable, use the SetProperties method.\nIn a published app, only transient variables can be created. See CreateSessionVariable method.\n\nDefinition:\n\nA variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.\nWhen a variable is used in an expression, it is substituted by its value or the variable's definition.\n\nExample:\n\nThe variable x contains the text string Sum(Sales) .\nIn a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .\nHowever, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .\n\nParameters:\n\n◾ prop   -   Name of the variable. Variable names are case sensitive and must be unique.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericVariableProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Variable"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateVariableExRaw": {
          "description": "Creates a variable.\nTo create a variable via a script, you need to use the SetScript method. For more information, see Create a variable.\nTo set some properties to the variable, use the SetProperties method.\nIn a published app, only transient variables can be created. See CreateSessionVariable method.\n\nDefinition:\n\nA variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.\nWhen a variable is used in an expression, it is substituted by its value or the variable's definition.\n\nExample:\n\nThe variable x contains the text string Sum(Sales) .\nIn a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .\nHowever, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .\n\nParameters:\n\n◾ prop   -   Name of the variable. Variable names are case sensitive and must be unique.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Variable"
            },
            {
              "type": "error"
            }
          ]
        },
        "DeleteConnection": {
          "description": "Deletes a connection.\nIn Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . The AttachedFiles connection can only be removed by the administrator of the system.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection to remove.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "DestroyBookmark": {
          "description": "Removes a bookmark.\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyDimension": {
          "description": "Removes a dimension.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the dimension to remove.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyDraft": {
          "description": "Removes the draft of an object.\nThe children of the draft object (if any) are removed as well.\nThis method can be used to cancel the work on the draft of an object. For example, if you had created a draft of a sheet that is published, you might not want anymore to replace the published sheet.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id         -   Identifier of the draft object to remove.\n\n◾ sourceId   -   Identifier of the source object (the object from which a draft was created).",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "This will be removed in a future version",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyMeasure": {
          "description": "Removes a generic measure.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the measure to remove.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyObject": {
          "description": "Removes an app object.\nThe children of the object (if any) are removed as well.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the object to remove.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroySessionObject": {
          "description": "Removes a transient object.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the transient object to remove.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroySessionVariable": {
          "description": "Removes a transient variable.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroySessionVariableById": {
          "description": "Removes a transient variable.\n\n•*qSuccess** is set to true if the operation is successful.\n\nParameters:\n\n◾ id   -   Identifier of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroySessionVariableByName": {
          "description": "Removes a transient variable.\n\n•*qSuccess** is set to true if the operation is successful.\n\nParameters:\n\n◾ name   -   Name of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyVariableById": {
          "description": "Removes a variable.\nScript-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method. For more information, see Remove a variable.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id   -   Identifier of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyVariableByName": {
          "description": "Removes a variable.\nScript-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method. For more information, see Remove a variable.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ name   -   Name of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DoReload": {
          "description": "Reloads the script that is set in an app.\n\nLogs:\n\nWhen this method is called, audit activity logs are produced to track the user activity.\nIn the case of errors, both audit activity logs and system services logs are produced.\nThe log files are named as follows:\n\n  +----------------------------------------+----------------------------------+\n  |           AUDIT ACTIVITY LOG           |        SYSTEM SERVICE LOG        |\n  +----------------------------------------+----------------------------------+\n  | \u003cMachineName\u003e_AuditActivity_Engine.txt | \u003cMachineName\u003e_Service_Engine.txt |\n  | in Qlik Sense Enterprise               | in Qlik Sense Enterprise         |\n  | \u003cMachineName\u003e_AuditActivity_Engine.log | \u003cMachineName\u003e_Service_Engine.log |\n  | in Qlik Sense Desktop                  | in Qlik Sense Desktop            |\n  +----------------------------------------+----------------------------------+\n\nWhere to find the log files:\n\nThe location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.\n\n  +-------------------------------------+----------------------------------------+\n  |        QLIK SENSE ENTERPRISE        |           QLIK SENSE DESKTOP           |\n  +-------------------------------------+----------------------------------------+\n  | %ProgramData%/Qlik/Sense/Log/Engine | %UserProfile%/Documents/Qlik/Sense/Log |\n  +-------------------------------------+----------------------------------------+\n\nParameters:\n\n◾ mode      -   Error handling mode\nOne of:\n\n• 0: for default mode.\n\n• 1: for ABEND; the reload of the script ends if an error occurs.\n\n• 2: for ignore; the reload of the script continues even if an error is detected in the script.\n\n◾ partial   -   Set to true for partial reload.\nThe default value is false.\n\n◾ debug     -   Set to true if debug breakpoints are to be honored. The execution of the script will be in debug mode.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DoReloadEx": {
          "description": "Reloads the script that is set in an app and returns the path to the script log file.\nA log file is created per reload.\n\nLogs:\n\nWhen this method is called, audit activity logs are produced to track the user activity.\nIn the case of errors, both audit activity logs and system services logs are produced.\nThe log files are named as follows:\n\n  +--------------------------+--------------------------+\n  |    AUDIT ACTIVITY LOG    |    SYSTEM SERVICE LOG    |\n  +--------------------------+--------------------------+\n  | \u003c MachineName\u003e           | \u003c MachineName\u003e Service   |\n  | AuditActivity Engine.txt | Engine.txt in Qlik       |\n  | in Qlik Sense Enterprise | Sense Enterprise  \u003c      |\n  |  \u003c MachineName\u003e          | MachineName\u003e Service     |\n  | AuditActivity Engine.log | Engine.log in Qlik Sense |\n  | in Qlik Sense Desktop    | Desktop                  |\n  +--------------------------+--------------------------+\n\nWhere to find the log files:\n\nThe location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.\n\n  +-------------------------------------+----------------------------------------+\n  |        QLIK SENSE ENTERPRISE        |           QLIK SENSE DESKTOP           |\n  +-------------------------------------+----------------------------------------+\n  | %ProgramData%/Qlik/Sense/Log/Engine | %UserProfile%/Documents/Qlik/Sense/Log |\n  +-------------------------------------+----------------------------------------+\n\nDoReloadExParams:\n\n  +----------+--------------------------------+---------+\n  |   NAME   |          DESCRIPTION           |  TYPE   |\n  +----------+--------------------------------+---------+\n  | qMode    | Error handling mode  One of:   | Integer |\n  |          |    * 0: for default mode.  *   |         |\n  |          | 1: for ABEND; the reload of    |         |\n  |          | the script ends if an error    |         |\n  |          | occurs.  * 2: for ignore; the  |         |\n  |          | reload of the script continues |         |\n  |          | even if an error is detected   |         |\n  |          | in the script.                 |         |\n  | qPartial | Set to true for partial        | Boolean |\n  |          | reload.  The default value is  |         |\n  |          | false.                         |         |\n  | qDebug   | Set to true if debug           | Boolean |\n  |          | breakpoints are to be honored. |         |\n  |          | The execution of the script    |         |\n  |          | will be in debug mode.  The    |         |\n  |          | default value is false.        |         |\n  +----------+--------------------------------+---------+\n\nDoReloadExResult:\n\n  +----------------+--------------------------------+---------+\n  |      NAME      |          DESCRIPTION           |  TYPE   |\n  +----------------+--------------------------------+---------+\n  | qSuccess       | The operation is successful if | Boolean |\n  |                | qSuccess is set to True.       |         |\n  | qScriptLogFile | Path to the script log file.   | String  |\n  +----------------+--------------------------------+---------+\n\nIf the data load has successfully finished, no matter how the indexing behaves, true is returned. This happens even if there is a timeout, a memory limit is reached or any other error occurs during the indexing.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/DoReloadExParams"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/DoReloadExResult"
            },
            {
              "type": "error"
            }
          ]
        },
        "DoReloadExRaw": {
          "description": "Reloads the script that is set in an app and returns the path to the script log file.\nA log file is created per reload.\n\nLogs:\n\nWhen this method is called, audit activity logs are produced to track the user activity.\nIn the case of errors, both audit activity logs and system services logs are produced.\nThe log files are named as follows:\n\n  +--------------------------+--------------------------+\n  |    AUDIT ACTIVITY LOG    |    SYSTEM SERVICE LOG    |\n  +--------------------------+--------------------------+\n  | \u003c MachineName\u003e           | \u003c MachineName\u003e Service   |\n  | AuditActivity Engine.txt | Engine.txt in Qlik       |\n  | in Qlik Sense Enterprise | Sense Enterprise  \u003c      |\n  |  \u003c MachineName\u003e          | MachineName\u003e Service     |\n  | AuditActivity Engine.log | Engine.log in Qlik Sense |\n  | in Qlik Sense Desktop    | Desktop                  |\n  +--------------------------+--------------------------+\n\nWhere to find the log files:\n\nThe location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.\n\n  +-------------------------------------+----------------------------------------+\n  |        QLIK SENSE ENTERPRISE        |           QLIK SENSE DESKTOP           |\n  +-------------------------------------+----------------------------------------+\n  | %ProgramData%/Qlik/Sense/Log/Engine | %UserProfile%/Documents/Qlik/Sense/Log |\n  +-------------------------------------+----------------------------------------+\n\nDoReloadExParams:\n\n  +----------+--------------------------------+---------+\n  |   NAME   |          DESCRIPTION           |  TYPE   |\n  +----------+--------------------------------+---------+\n  | qMode    | Error handling mode  One of:   | Integer |\n  |          |    * 0: for default mode.  *   |         |\n  |          | 1: for ABEND; the reload of    |         |\n  |          | the script ends if an error    |         |\n  |          | occurs.  * 2: for ignore; the  |         |\n  |          | reload of the script continues |         |\n  |          | even if an error is detected   |         |\n  |          | in the script.                 |         |\n  | qPartial | Set to true for partial        | Boolean |\n  |          | reload.  The default value is  |         |\n  |          | false.                         |         |\n  | qDebug   | Set to true if debug           | Boolean |\n  |          | breakpoints are to be honored. |         |\n  |          | The execution of the script    |         |\n  |          | will be in debug mode.  The    |         |\n  |          | default value is false.        |         |\n  +----------+--------------------------------+---------+\n\nDoReloadExResult:\n\n  +----------------+--------------------------------+---------+\n  |      NAME      |          DESCRIPTION           |  TYPE   |\n  +----------------+--------------------------------+---------+\n  | qSuccess       | The operation is successful if | Boolean |\n  |                | qSuccess is set to True.       |         |\n  | qScriptLogFile | Path to the script log file.   | String  |\n  +----------------+--------------------------------+---------+\n\nIf the data load has successfully finished, no matter how the indexing behaves, true is returned. This happens even if there is a timeout, a memory limit is reached or any other error occurs during the indexing.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "DoSave": {
          "description": "Saves an app. All objects and data in the data model are saved.\n\nParameters:\n\n◾ fileName   -   Name of the file to save.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Evaluate": {
          "description": "Evaluates an expression and returns the result as a string.\n\nExample:\n\nThe client sends:\n```\n{\n\"handle\": 1,\n\"method\": \"Evaluate\",\n\"params\": {\n\"qExpression\": \"Sum(Holes)\"\n},\n\"id\": 6,\n\"jsonrpc\": \"2.0\"\n}\n```\nThe engine returns:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"id\": 6,\n\"result\": {\n\"qReturn\": \"361716\"\n}\n}\n```\n\nParameters:\n\n◾ expression   -   Expression to evaluate.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "EvaluateEx": {
          "description": "Evaluates an expression and returns the result as a dual.\n\nExample:\n\nThe client sends:\n```\n{\n\"handle\": 1,\n\"method\": \"EvaluateEx\",\n\"params\": {\n\"qExpression\": \"Sum(Holes)\"\n},\n\"id\": 7,\n\"jsonrpc\": \"2.0\"\n}\n```\nThe engine returns:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"id\": 7,\n\"result\": {\n\"qReturn\": \"361716\"\n}\n}\n```\n\nParameters:\n\n◾ expression   -   Expression to evaluate.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/FieldValue"
            },
            {
              "type": "error"
            }
          ]
        },
        "EvaluateExRaw": {
          "description": "Evaluates an expression and returns the result as a dual.\n\nExample:\n\nThe client sends:\n```\n{\n\"handle\": 1,\n\"method\": \"EvaluateEx\",\n\"params\": {\n\"qExpression\": \"Sum(Holes)\"\n},\n\"id\": 7,\n\"jsonrpc\": \"2.0\"\n}\n```\nThe engine returns:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"id\": 7,\n\"result\": {\n\"qReturn\": \"361716\"\n}\n}\n```\n\nParameters:\n\n◾ expression   -   Expression to evaluate.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "ExpandExpression": {
          "description": "Expands the expression.\n\nParameters:\n\n◾ expression   -   The expression string to expand.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "ExportReducedData": {
          "description": "Applies a bookmark to reduce (slice) the data on. Returns a url and file size to the reduced application. Section Access is always applied.\nThis API is only available on Sense Enterprice on Windows\n\nParameters:\n\n◾ options   -   BookmarkId used to reduced the app on and an expire time.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/NxDownloadOptions"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxDownloadInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "ExportReducedDataRaw": {
          "description": "Applies a bookmark to reduce (slice) the data on. Returns a url and file size to the reduced application. Section Access is always applied.\nThis API is only available on Sense Enterprice on Windows\n\nParameters:\n\n◾ options   -   BookmarkId used to reduced the app on and an expire time.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "FindMatchingFields": {
          "description": "Retrieves any fields that belong to the same archipelago as the specified field and that match at least one of the specified tags.\nTags set by Qlik Sense are prefixed by the $ sign.\n\nParameters:\n\n◾ fieldName   -   Name of the field.\nThis method looks for fields that belong to the same archipelago as this specified field.\n\n◾ tags        -   List of tags.\nThis method looks for fields that match at least one of the tags in this list.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxMatchingFieldInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "FindMatchingFieldsRaw": {
          "description": "Retrieves any fields that belong to the same archipelago as the specified field and that match at least one of the specified tags.\nTags set by Qlik Sense are prefixed by the $ sign.\n\nParameters:\n\n◾ fieldName   -   Name of the field.\nThis method looks for fields that belong to the same archipelago as this specified field.\n\n◾ tags        -   List of tags.\nThis method looks for fields that match at least one of the tags in this list.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "Forward": {
          "description": "Loads the next logical operation (if any).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ForwardCount": {
          "description": "Returns the number of entries on the Forward stack.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "int"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAllInfos": {
          "description": "Returns the identifier and the type of any generic object in the app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAllInfosRaw": {
          "description": "Returns the identifier and the type of any generic object in the app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAppLayout": {
          "description": "Evaluates an app.\nReturns dynamic properties (if any) in addition to the engine (fixed) properties.\nA data set is returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxAppLayout"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAppLayoutRaw": {
          "description": "Evaluates an app.\nReturns dynamic properties (if any) in addition to the engine (fixed) properties.\nA data set is returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAppProperties": {
          "description": "Gets the properties of an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxAppProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAppPropertiesRaw": {
          "description": "Gets the properties of an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAssociationScores": {
          "description": "Computes a set of association scores for each pair of fields between two given tables that have been loaded in an app.\nWhen a table contains some synthetic keys, all fields in the synthetic key tables are analyzed against fields in other tables. To denote that a field is a synthetic key, the field name is prefixed by [Synthetic Key]: .\n\nParameters:\n\n◾ table1   -   Name of the first table.\n\n◾ table2   -   Name of the second table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/AssociationScore"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAssociationScoresRaw": {
          "description": "Computes a set of association scores for each pair of fields between two given tables that have been loaded in an app.\nWhen a table contains some synthetic keys, all fields in the synthetic key tables are analyzed against fields in other tables. To denote that a field is a synthetic key, the field name is prefixed by [Synthetic Key]: .\n\nParameters:\n\n◾ table1   -   Name of the first table.\n\n◾ table2   -   Name of the second table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBookmark": {
          "description": "Returns the handle of a bookmark.\n\nParameters:\n\n◾ id   -   Identifier of the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmark"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBookmarks": {
          "description": "Returns all bookmarks compatible with options.\n\nParameters:\n\n◾ options   -   Bookmark type filter and requested properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/NxGetBookmarkOptions"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxContainerEntry"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBookmarksRaw": {
          "description": "Returns all bookmarks compatible with options.\n\nParameters:\n\n◾ options   -   Bookmark type filter and requested properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetConnection": {
          "description": "Retrieves a connection and returns:\n\n• The creation time of the connection.\n\n• The identifier of the connection.\n\n• The type of the connection.\n\n• The name of the connection.\n\n• The connection string.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Connection"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetConnectionRaw": {
          "description": "Retrieves a connection and returns:\n\n• The creation time of the connection.\n\n• The identifier of the connection.\n\n• The type of the connection.\n\n• The name of the connection.\n\n• The connection string.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetConnections": {
          "description": "Lists the connections in an app.\nIn Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . This connection is stored in the Qlik Sense repository.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/Connection"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetConnectionsRaw": {
          "description": "Lists the connections in an app.\nIn Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . This connection is stored in the Qlik Sense repository.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetContentLibraries": {
          "description": "Lists the content libraries.\nTo differentiate a global content library from an app specific content library, you can check the property qAppSpecific . If this property is set to true, it means that the content library is app specific.\nThere is always one specific content library per app.\n\nQlik Sense:\n\nReturns the global content libraries and the app specific content library.\nWhen using Qlik Sense, you can have more than one global content library. The global content libraries are common to all apps in the Qlik Sense repository.\nBy default, there is one global content library named Default .\n\nQlik Sense Desktop:\n\nReturns the global content library and the app specific content library from the disk.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/ContentLibraryList"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetContentLibrariesRaw": {
          "description": "Lists the content libraries.\nTo differentiate a global content library from an app specific content library, you can check the property qAppSpecific . If this property is set to true, it means that the content library is app specific.\nThere is always one specific content library per app.\n\nQlik Sense:\n\nReturns the global content libraries and the app specific content library.\nWhen using Qlik Sense, you can have more than one global content library. The global content libraries are common to all apps in the Qlik Sense repository.\nBy default, there is one global content library named Default .\n\nQlik Sense Desktop:\n\nReturns the global content library and the app specific content library from the disk.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseInfo": {
          "description": "Gives information about an ODBC, OLEDB or CUSTOM connection. See Outputs for more details.\n\nParameters:\n\n◾ connectionId   -   Name of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/DatabaseInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseInfoRaw": {
          "description": "Gives information about an ODBC, OLEDB or CUSTOM connection. See Outputs for more details.\n\nParameters:\n\n◾ connectionId   -   Name of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseOwners": {
          "description": "Lists the owners of a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DatabaseOwner"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseOwnersRaw": {
          "description": "Lists the owners of a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseTableFields": {
          "description": "Lists the fields inside a table of a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.\nIf qDatabase is not set then qOwner must be set.\n\n◾ owner          -   Owner of the database.\nIf qOwner is not set then qDatabase must be set.\n\n◾ table          -   Name of the table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataField"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseTableFieldsRaw": {
          "description": "Lists the fields inside a table of a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.\nIf qDatabase is not set then qOwner must be set.\n\n◾ owner          -   Owner of the database.\nIf qOwner is not set then qDatabase must be set.\n\n◾ table          -   Name of the table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseTablePreview": {
          "description": "Retrieves the values of the specified table of a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.\nIf qDatabase is not set then qOwner must be set.\n\n◾ owner          -   Owner of the database.\nIf qOwner is not set then qDatabase must be set.\n\n◾ table          -   Name of the table.\n\n◾ conditions     -",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/FilterInfo"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataRecord"
              }
            },
            {
              "type": "int"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseTablePreviewRaw": {
          "description": "Retrieves the values of the specified table of a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.\nIf qDatabase is not set then qOwner must be set.\n\n◾ owner          -   Owner of the database.\nIf qOwner is not set then qDatabase must be set.\n\n◾ table          -   Name of the table.\n\n◾ conditions     -",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "int"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseTables": {
          "description": "Lists the tables inside a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.\nIf qDatabase is not set then qOwner must be set.\n\n◾ owner          -   Owner of the database.\nIf qOwner is not set then qDatabase must be set.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataTable"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabaseTablesRaw": {
          "description": "Lists the tables inside a database for a ODBC, OLEDB or CUSTOM connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ database       -   Name of the database.\nIf qDatabase is not set then qOwner must be set.\n\n◾ owner          -   Owner of the database.\nIf qOwner is not set then qDatabase must be set.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabases": {
          "description": "Lists the databases inside a ODBC, OLEDB or CUSTOM data source.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/Database"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabasesRaw": {
          "description": "Lists the databases inside a ODBC, OLEDB or CUSTOM data source.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDimension": {
          "description": "Returns the handle of a dimension.\n\nParameters:\n\n◾ id   -   Identifier of the dimension.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericDimension"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetEmptyScript": {
          "description": "Creates a script that contains one section. This section contains SET statements that give localized information from the regional settings of the computer.\nThe computer regional settings are retrieved when the engine starts.\n\nParameters:\n\n◾ localizedMainSection   -   Name of the script section.\nThe default value is Main .",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFavoriteVariables": {
          "description": "Retrieves the variables that are tagged as favorite.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetField": {
          "description": "Returns a handle to a field.\n\nParameters:\n\n◾ fieldName   -   Name of the field.\n\n◾ stateName   -   Name of the alternate state.\nDefault state is current selections.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Field"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFieldAndColumnSamples": {
          "description": "Get sample values from either a column in a table or from a field.\nSupports wildcard matches in tables or field names:\n- '*' for zero or more characters.\n- '?' for one character.\n\nParameters:\n\n◾ fieldsOrColumnsWithWildcards   -   Pairs of table (optionally) and field names. Support wildcard matches.\n\n◾ maxNumberOfValues              -   Max number of sample values returned. Depending on the column or field size the number of returned samples can be less than MaxNumberOfValues. If MaxNumberOfValues is negative all sample values are returned.\n\n◾ randSeed                       -   Optional. Sets the random number seed. Should only be set for test purposes.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/FieldOrColumn"
              }
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/SampleResult"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFieldAndColumnSamplesRaw": {
          "description": "Get sample values from either a column in a table or from a field.\nSupports wildcard matches in tables or field names:\n- '*' for zero or more characters.\n- '?' for one character.\n\nParameters:\n\n◾ fieldsOrColumnsWithWildcards   -   Pairs of table (optionally) and field names. Support wildcard matches.\n\n◾ maxNumberOfValues              -   Max number of sample values returned. Depending on the column or field size the number of returned samples can be less than MaxNumberOfValues. If MaxNumberOfValues is negative all sample values are returned.\n\n◾ randSeed                       -   Optional. Sets the random number seed. Should only be set for test purposes.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFieldDescription": {
          "description": "Returns the description of a field.\n\nParameters:\n\n◾ fieldName   -   Name of the field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/FieldDescription"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFieldDescriptionRaw": {
          "description": "Returns the description of a field.\n\nParameters:\n\n◾ fieldName   -   Name of the field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFieldOnTheFlyByName": {
          "description": "Find the field-on-the-fly by passing its readable name.\n\nParameters:\n\n◾ readableName   -   Readable name of the field-on-the-fly.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTableFields": {
          "description": "Lists the fields of a table for a folder connection.\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.\n\n◾ table          -   Name of the table.\nThis parameter must be set for XLS , XLSX , HTML   and XML files.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/FileDataFormat"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataField"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTableFieldsRaw": {
          "description": "Lists the fields of a table for a folder connection.\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.\n\n◾ table          -   Name of the table.\nThis parameter must be set for XLS , XLSX , HTML   and XML files.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTablePreview": {
          "description": "Lists the values in a table for a folder connection.\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.\n\n◾ table          -   Name of the table.\nThis parameter must be set for XLS , XLSX , HTML   and XML files.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/FileDataFormat"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataRecord"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTablePreviewRaw": {
          "description": "Lists the values in a table for a folder connection.\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.\n\n◾ table          -   Name of the table.\nThis parameter must be set for XLS , XLSX , HTML   and XML files.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTables": {
          "description": "Lists the tables for a folder connection.\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/FileDataFormat"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataTable"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTablesEx": {
          "description": "Lists the tables and fields of a JSON or XML file for a folder connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/FileDataFormat"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DataTableEx"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTablesExRaw": {
          "description": "Lists the tables and fields of a JSON or XML file for a folder connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFileTablesRaw": {
          "description": "Lists the tables for a folder connection.\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Path of the connection file.\n\n◾ dataFormat     -   Type of the file.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFolderItemsForConnection": {
          "description": "Lists the items for a folder connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Relative path of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/FolderItem"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFolderItemsForConnectionRaw": {
          "description": "Lists the items for a folder connection.\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection.\n\n◾ relativePath   -   Relative path of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetIncludeFileContent": {
          "description": "Gets the content of a file.\n\nParameters:\n\n◾ path   -   [\"lib://CONNECTION_NAME\\\\\\\u003cthe name of the file you want to use\u003e.txt\"]\nOR\n[\"lib://Connection_Name\\\\\\\u003cFolder under your connection\u003e\\\\\\\u003cthe name of the file you want to use\u003e.txt\"]\n[ ] should be used when the first variable contains a lib reference.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLibraryContent": {
          "description": "Returns the content of a library.\n\nGlobal content library:\n\nIn Qlik Sense Desktop, the content files are retrieved from:\n_%userprofile%\\Documents\\Qlik\\Sense\\Content\\Default_\nIn Qlik Sense Enterprise, the content files are retrieved from the Qlik Sense repository.\n\nApp specific content library:\n\nThe embedded files are returned.\n\nParameters:\n\n◾ name   -   Name of the content library.\nIt corresponds to the property qContentLibraryListItem/qName returned by the GetContentLibraries method.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/StaticContentList"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLibraryContentRaw": {
          "description": "Returns the content of a library.\n\nGlobal content library:\n\nIn Qlik Sense Desktop, the content files are retrieved from:\n_%userprofile%\\Documents\\Qlik\\Sense\\Content\\Default_\nIn Qlik Sense Enterprise, the content files are retrieved from the Qlik Sense repository.\n\nApp specific content library:\n\nThe embedded files are returned.\n\nParameters:\n\n◾ name   -   Name of the content library.\nIt corresponds to the property qContentLibraryListItem/qName returned by the GetContentLibraries method.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLineage": {
          "description": "Gets the lineage information of the app. The lineage information includes the LOAD and STORE statements from the data load script associated with this app.\nAn array of lineage information.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/LineageInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLineageRaw": {
          "description": "Gets the lineage information of the app. The lineage information includes the LOAD and STORE statements from the data load script associated with this app.\nAn array of lineage information.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLocaleInfo": {
          "description": "Returns locale information.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/LocaleInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLocaleInfoRaw": {
          "description": "Returns locale information.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLooselyCoupledVector": {
          "description": "Returns a list of table states.\n\nThe following states apply:\n\n• 0 The table is not loosely coupled.\n\n• 1 The table is loosely coupled.\n\n• 2 The table is loosely coupled and cannot be changed to another state using the Qlik Engine API.\n\nThe last three values in the vector are for internal use.\n\nIn case of circular references, the engine automatically sets the table state to loosely coupled to avoid creating loops.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMatchingFields": {
          "description": "Retrieves any fields that match all of the specified tags or just one of them in the data model of an app.\nTags set by Qlik Sense are prefixed by the $ sign.\n\nParameters:\n\n◾ tags                -   List of tags.\nThe GetMatchingFields method looks for fields that match one or all of the tags in this list, depending on the value of qMatchingFieldMode .\n\n◾ matchingFieldMode   -   Matching field mode.\nThe default value is MATCHINGFIELDMODE_MATCH_ALL.\n\nOne of:\n\n• MATCHINGFIELDMODE_MATCH_ALL\n\n• MATCHINGFIELDMODE_MATCH_ONE",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxMatchingFieldInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMatchingFieldsRaw": {
          "description": "Retrieves any fields that match all of the specified tags or just one of them in the data model of an app.\nTags set by Qlik Sense are prefixed by the $ sign.\n\nParameters:\n\n◾ tags                -   List of tags.\nThe GetMatchingFields method looks for fields that match one or all of the tags in this list, depending on the value of qMatchingFieldMode .\n\n◾ matchingFieldMode   -   Matching field mode.\nThe default value is MATCHINGFIELDMODE_MATCH_ALL.\n\nOne of:\n\n• MATCHINGFIELDMODE_MATCH_ALL\n\n• MATCHINGFIELDMODE_MATCH_ONE",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMeasure": {
          "description": "Returns the handle of a measure.\n\nParameters:\n\n◾ id   -   Identifier of the measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericMeasure"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMediaList": {
          "description": "Lists the media files.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GetLibraryContent_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/MediaList"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMediaListRaw": {
          "description": "Lists the media files.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GetLibraryContent_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetObject": {
          "description": "Returns the type of the app object and the corresponding handle.\n\nParameters:\n\n◾ id   -   Identifier of the object to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetObjects": {
          "description": "Returns all objects compatible with options.\n\nParameters:\n\n◾ options   -   Object type filter and requested properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/NxGetObjectOptions"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxContainerEntry"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetObjectsRaw": {
          "description": "Returns all objects compatible with options.\n\nParameters:\n\n◾ options   -   Object type filter and requested properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetScript": {
          "description": "Gets values in script.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetScriptBreakpoints": {
          "description": "Lists the breakpoints in the script of an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/EditorBreakpoint"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetScriptBreakpointsRaw": {
          "description": "Lists the breakpoints in the script of an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetScriptEx": {
          "description": "Gets script and script meta-data.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/AppScript"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetScriptExRaw": {
          "description": "Gets script and script meta-data.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetSetAnalysis": {
          "description": "Returns a set analysis expression from active selections or from a saved bookmark. Fields on the fly and Calculated dimensions will not be included in the generated expressions, instead a message indicating 'missing fields' will provided within the expression.\n  | | BookmarkId empty | BookmarkId set |\n  |-----------------------|--------------------------------------|----------------------------------------------------|\n  |StateName empty (or $) | Default selections state is returned.| Default state ($) in bookmark with id is returned. |\n  |StateName set | State selections is returned. | State in bookmark with id is returned. |\n\nParameters:\n\n◾ stateName    -   Optional. The name of the state to get set analysis expression for. If left empty, the default state will be retrieved.\n\n◾ bookmarkId   -   Optional. The Id of the bookmark to get the set analysis expression for. If left empty, the current selection will be retrieved.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetTableData": {
          "description": "Retrieves the data of a specific table.\n\nParameters:\n\n◾ offset          -   Position from the top, starting from 0.\nIf the offset is set to 0, the rows starting from the position/index 0 are shown.\n\n◾ rows            -   Number of rows to show.\n\n◾ syntheticMode   -   If this parameter is set to true, the internal data/table representation is shown. Synthetic fields are present (if any).\n\n◾ tableName       -   Name of the table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/TableRow"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetTableDataRaw": {
          "description": "Retrieves the data of a specific table.\n\nParameters:\n\n◾ offset          -   Position from the top, starting from 0.\nIf the offset is set to 0, the rows starting from the position/index 0 are shown.\n\n◾ rows            -   Number of rows to show.\n\n◾ syntheticMode   -   If this parameter is set to true, the internal data/table representation is shown. Synthetic fields are present (if any).\n\n◾ tableName       -   Name of the table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetTablesAndKeys": {
          "description": "Returns:\n\n• The list of tables in an app and the fields inside each table.\n\n• The list of derived fields.\n\n• The list of key fields.\n\nParameters:\n\n◾ windowSize       -   Size of the window that is used to display the results.\n\n◾ nullSize         -\n\n◾ cellHeight       -   Height of a cell in a table in pixels.\n\n◾ syntheticMode    -   One of:\n\n• true for internal table viewer:\nShows a more detailed view on how the Qlik engine defines the relations between fields and the quality of the keys.\n\n• false for source table viewer:\nShows the natural relation between fields without reference to synthetic keys and resultant linking synthetic tables. Instead synthetic keys are represented by multiple connectors between tables.\n\n◾ includeSysVars   -   If set to true, the system variables are included.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/Size"
            },
            {
              "type": "#/definitions/Size"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/TableRecord"
              }
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/SourceKeyRecord"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetTablesAndKeysRaw": {
          "description": "Returns:\n\n• The list of tables in an app and the fields inside each table.\n\n• The list of derived fields.\n\n• The list of key fields.\n\nParameters:\n\n◾ windowSize       -   Size of the window that is used to display the results.\n\n◾ nullSize         -\n\n◾ cellHeight       -   Height of a cell in a table in pixels.\n\n◾ syntheticMode    -   One of:\n\n• true for internal table viewer:\nShows a more detailed view on how the Qlik engine defines the relations between fields and the quality of the keys.\n\n• false for source table viewer:\nShows the natural relation between fields without reference to synthetic keys and resultant linking synthetic tables. Instead synthetic keys are represented by multiple connectors between tables.\n\n◾ includeSysVars   -   If set to true, the system variables are included.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "interface"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetTextMacros": {
          "description": "Fetches updated variables after a statement execution.\n\nIf qRefSeqNo and qSetSeqNo are set to 0, it means that the variables were not updated.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/TextMacro"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetTextMacrosRaw": {
          "description": "Fetches updated variables after a statement execution.\n\nIf qRefSeqNo and qSetSeqNo are set to 0, it means that the variables were not updated.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetVariable": {
          "description": "Returns a handle to a variable.\n\nParameters:\n\n◾ name   -   Name of the variable.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _Doc::GetVariableById_ method or _Doc::GetVariableByName_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Variable"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetVariableById": {
          "description": "Gets the handle of a variable.\n\nParameters:\n\n◾ id   -   Identifier of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Variable"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetVariableByName": {
          "description": "Gets the handle of a variable.\n\nParameters:\n\n◾ name   -   Name of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericVariable"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetVariables": {
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/VariableListDef"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxVariableListItem"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetVariablesRaw": {
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetViewDlgSaveInfo": {
          "description": "Returns information about the position of the tables in the data model viewer.\nThe position of the broom points and the position of the connection points cannot be retrieved in Qlik Sense.\n\nRepresentation of tables, broom points and connection points:\n\n![](images/ui_gen_BroomConnectionPoints_dmv.png)\n\nThe green circles represent the broom points.\nThe red circle represents a connection point.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/TableViewDlgSaveInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetViewDlgSaveInfoRaw": {
          "description": "Returns information about the position of the tables in the data model viewer.\nThe position of the broom points and the position of the connection points cannot be retrieved in Qlik Sense.\n\nRepresentation of tables, broom points and connection points:\n\n![](images/ui_gen_BroomConnectionPoints_dmv.png)\n\nThe green circles represent the broom points.\nThe red circle represents a connection point.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GuessFileType": {
          "description": "Guesses the data format for a given file.\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection file.\n\n◾ relativePath   -   Path of the connection file.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/FileDataFormat"
            },
            {
              "type": "error"
            }
          ]
        },
        "GuessFileTypeRaw": {
          "description": "Guesses the data format for a given file.\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nFileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file\n\nParameters:\n\n◾ connectionId   -   Identifier of the connection file.\n\n◾ relativePath   -   Path of the connection file.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "LockAll": {
          "description": "Locks all selections in fields for current state.\n\nParameters:\n\n◾ stateName   -   Alternate state name. When set, applies to alternate state instead of current.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ModifyConnection": {
          "description": "Updates a connection.\nThe identifier of a connection cannot be updated. qType cannot be modified with the ModifyConnection method.\n\nParameters:\n\n◾ connectionId          -   Identifier of the connection.\n\n◾ connection            -   Information about the connection.\nProperties that can be updated.\n\n◾ overrideCredentials   -   Set this parameter to true to override the user name and password.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/Connection"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ModifyConnectionRaw": {
          "description": "Updates a connection.\nThe identifier of a connection cannot be updated. qType cannot be modified with the ModifyConnection method.\n\nParameters:\n\n◾ connectionId          -   Identifier of the connection.\n\n◾ connection            -   Information about the connection.\nProperties that can be updated.\n\n◾ overrideCredentials   -   Set this parameter to true to override the user name and password.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Publish": {
          "description": "Publishes an app.\nAll app objects are published. Generic objects, bookmarks, dimensions and measures inside the app are published.\nAn app can only be published once and cannot be published to more than one stream.\n\nParameters:\n\n◾ streamId   -   Identifier of the stream.\n\n◾ name       -   Name of the published app.\nIf this parameter is not set, the engine automatically gives a new name to the published app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Redo": {
          "description": "Redoes the previous operation.\n\nThe operation is successful if qSuccess is set to true.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "RemoveAlternateState": {
          "description": "Removes an alternate state in the app.\n\nParameters:\n\n◾ stateName   -   Name of the alternate state.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "RemoveVariable": {
          "description": "Removes a variable.\n\nParameters:\n\n◾ name   -   Name of the variable. Variable names are case sensitive.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _Doc::DestroyVariableById_ method or _Doc::DestroyVariableByName_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "Resume": {
          "description": "Resumes the app as the user left it.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SaveObjects": {
          "description": "Saves all objects that were modified in the app.\nData from the data model are not saved.\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Scramble": {
          "description": "Scrambles a field so the data is not recognizable. Some properties are retained to help debugging. For example, special characters are not changed, and small numbers are scrambled to another small number.\nUpdate access is required to use the function in Qlik Sense Enterprise.\n\nParameters:\n\n◾ fieldName   -   Name of the field to scramble.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SearchAssociations": {
          "description": "Returns the search matches for one or more search terms.\nThe search results depend on the search context.\n_SearchCombinationOptions_\n\nSearchMatchCombinations:\n\n  +--------------------------+-------------------------------+------------------------+\n  |           NAME           |          DESCRIPTION          |          TYPE          |\n  +--------------------------+-------------------------------+------------------------+\n  | qSearchMatchCombinations | Array of search combinations. | Array of               |\n  |                          |                               | SearchMatchCombination |\n  |                          |                               |                        |\n  +--------------------------+-------------------------------+------------------------+\n\nParameters:\n\n◾ options   -   Information about the search fields and the search context.\n\n◾ terms     -   List of terms to search for.\n\n◾ page      -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _SearchResults_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/SearchCombinationOptions"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "#/definitions/SearchPage"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/SearchAssociationResult"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchAssociationsRaw": {
          "description": "Returns the search matches for one or more search terms.\nThe search results depend on the search context.\n_SearchCombinationOptions_\n\nSearchMatchCombinations:\n\n  +--------------------------+-------------------------------+------------------------+\n  |           NAME           |          DESCRIPTION          |          TYPE          |\n  +--------------------------+-------------------------------+------------------------+\n  | qSearchMatchCombinations | Array of search combinations. | Array of               |\n  |                          |                               | SearchMatchCombination |\n  |                          |                               |                        |\n  +--------------------------+-------------------------------+------------------------+\n\nParameters:\n\n◾ options   -   Information about the search fields and the search context.\n\n◾ terms     -   List of terms to search for.\n\n◾ page      -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _SearchResults_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchObjects": {
          "description": "Returns the generic objects corresponding to one or more search terms. The search is performed within the title, subtitle, footnote and type. In addition, associated dimension values are also searched in. For example, if the country “Japan” is selected and the object contains the dimension City, the object will appear in the results for “Osaka” but not for “Johannesburg”. The generic objects with the following types will never appear in the results: slideitem , sheet , story , slide , masterobject , snapshot , LoadModel , appprops and searchhistory .\n\nParameters:\n\n◾ options   -   Information about attributes.\n\n◾ terms     -   Terms to search for.\n\n◾ page      -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/SearchObjectOptions"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "#/definitions/SearchPage"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/SearchResult"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchObjectsRaw": {
          "description": "Returns the generic objects corresponding to one or more search terms. The search is performed within the title, subtitle, footnote and type. In addition, associated dimension values are also searched in. For example, if the country “Japan” is selected and the object contains the dimension City, the object will appear in the results for “Osaka” but not for “Johannesburg”. The generic objects with the following types will never appear in the results: slideitem , sheet , story , slide , masterobject , snapshot , LoadModel , appprops and searchhistory .\n\nParameters:\n\n◾ options   -   Information about attributes.\n\n◾ terms     -   Terms to search for.\n\n◾ page      -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchResults": {
          "description": "Returns the search matches for one or more search terms.\nSearch results are organized in search groups. The type of search group indicates where the search matches come from (from data for example).\nEach search group contains search results that correspond to a combination of search terms.\nFor example, if the search terms are organic , pasta , and America , the possible combination of search groups are:\n\n• organic\n\n• pasta\n\n• America\n\n• organic, pasta, America\n\n• organic, pasta\n\n• organic, America\n\n• pasta, America\n\nFor every search group, there are one or more search group items. Each subgroup item contains results that correspond to an item type (for example a field).\nFor every search group item, there are one or several search matches. The position of the match in each search result is given.\n\nParameters:\n\n◾ options   -   Information about the search combinations.\n\n◾ terms     -   Terms to search for.\n\n◾ page      -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/SearchCombinationOptions"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "#/definitions/SearchPage"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/SearchResult"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchResultsRaw": {
          "description": "Returns the search matches for one or more search terms.\nSearch results are organized in search groups. The type of search group indicates where the search matches come from (from data for example).\nEach search group contains search results that correspond to a combination of search terms.\nFor example, if the search terms are organic , pasta , and America , the possible combination of search groups are:\n\n• organic\n\n• pasta\n\n• America\n\n• organic, pasta, America\n\n• organic, pasta\n\n• organic, America\n\n• pasta, America\n\nFor every search group, there are one or more search group items. Each subgroup item contains results that correspond to an item type (for example a field).\nFor every search group item, there are one or several search matches. The position of the match in each search result is given.\n\nParameters:\n\n◾ options   -   Information about the search combinations.\n\n◾ terms     -   Terms to search for.\n\n◾ page      -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchSuggest": {
          "description": "Returns search terms suggestions.\n\nParameters:\n\n◾ options   -   Information about the search combinations.\n\n◾ terms     -   Terms to search for.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/SearchCombinationOptions"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "#/definitions/SearchSuggestionResult"
            },
            {
              "type": "error"
            }
          ]
        },
        "SearchSuggestRaw": {
          "description": "Returns search terms suggestions.\n\nParameters:\n\n◾ options   -   Information about the search combinations.\n\n◾ terms     -   Terms to search for.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectAssociations": {
          "description": "Selects all search hits for a specified group.\nThe results depend on the search context.\n_SearchCombinationOptions_.\n\nParameters:\n\n◾ options    -   Information about the search fields and the search context.\n\n◾ terms      -   List of terms to search for.\n\n◾ matchIx    -   Index (value of qId ) of the search result to select.\n\n◾ softLock   -   This parameter is deprecated and should not be set.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/SearchCombinationOptions"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SelectAssociationsRaw": {
          "description": "Selects all search hits for a specified group.\nThe results depend on the search context.\n_SearchCombinationOptions_.\n\nParameters:\n\n◾ options    -   Information about the search fields and the search context.\n\n◾ terms      -   List of terms to search for.\n\n◾ matchIx    -   Index (value of qId ) of the search result to select.\n\n◾ softLock   -   This parameter is deprecated and should not be set.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SendGenericCommandToCustomConnector": {
          "description": "Sends a generic command to a custom connector.\nFor more information on the commands that can be sent to a custom connector, see the QVX SDK help.\n\nParameters:\n\n◾ provider           -   Connector file name.\nCommand to be executed by the connector.\n\n◾ command            -   One of:\n\n• JsonRequest\n\n• GetCustomCaption\n\n• IsConnected\n\n• DisableQlikViewSelectButton\n\n• HaveStarField\n\n◾ method             -   Method name to be used within the command.\nThe available methods depend on the chosen connector.\n\n◾ parameters         -   Parameters of the command.\nNo parameters are required.\n\n◾ appendConnection   -   Name of the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "SetAppProperties": {
          "description": "Sets properties to an app.\nThe qLastReloadTime, qMigrationHash and qSavedInProductVersion properties does not need to be set but if they are, they should match the current values in the app layout.\n\nParameters:\n\n◾ prop   -   Information about the properties of an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/NxAppProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetAppPropertiesRaw": {
          "description": "Sets properties to an app.\nThe qLastReloadTime, qMigrationHash and qSavedInProductVersion properties does not need to be set but if they are, they should match the current values in the app layout.\n\nParameters:\n\n◾ prop   -   Information about the properties of an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetFavoriteVariables": {
          "description": "Set some variables as favorite.\n\nParameters:\n\n◾ names   -   Variables to set as favorite.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetFetchLimit": {
          "description": "Limits the number of rows of data to load from a data source.\nThis method works when reloading in debug mode.\n\nParameters:\n\n◾ limit   -   Fetch limit.\nNumber of rows to load.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetLooselyCoupledVector": {
          "description": "Sets a list of table states, one for each table.\n\nThe following states apply:\n\n• 0 The table is not loosely coupled.\n\n• 1 The table is loosely coupled.\n\n• 2 The table is loosely coupled and cannot be changed to another state using the Qlik Engine API.\n\nThe last three values in the vector are for internal use.\n\nParameters:\n\n◾ v   -   The list of table states to set. A state will not be changed if already set to 2.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SetScript": {
          "description": "Sets values in script.\n\nParameters:\n\n◾ script   -   Script content.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetScriptBreakpoints": {
          "description": "Set some breakpoints in the script of an app.\n\nParameters:\n\n◾ breakpoints   -   Information about the breakpoints.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/EditorBreakpoint"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetScriptBreakpointsRaw": {
          "description": "Set some breakpoints in the script of an app.\n\nParameters:\n\n◾ breakpoints   -   Information about the breakpoints.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetViewDlgSaveInfo": {
          "description": "Sets the positions of the tables in the data model viewer.\nThe position of the broom points and the position of the connection points cannot be set in Qlik Sense.\n\nRepresentation of tables, broom points and connection points:\n\n![](images/ui_gen_BroomConnectionPoints_dmv.png)\n\nThe green circles represent the broom points.\nThe red circle represents a connection point.\n\nParameters:\n\n◾ info   -   Information about the table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/TableViewDlgSaveInfo"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetViewDlgSaveInfoRaw": {
          "description": "Sets the positions of the tables in the data model viewer.\nThe position of the broom points and the position of the connection points cannot be set in Qlik Sense.\n\nRepresentation of tables, broom points and connection points:\n\n![](images/ui_gen_BroomConnectionPoints_dmv.png)\n\nThe green circles represent the broom points.\nThe red circle represents a connection point.\n\nParameters:\n\n◾ info   -   Information about the table.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Undo": {
          "description": "Undoes the previous operation.\n\nThe operation is successful if qSuccess is set to true.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "UnlockAll": {
          "description": "Unlocks all selections in fields for current state.\n\nParameters:\n\n◾ stateName   -   Alternate state name. When set, applies to alternate state instead of current.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "DocListEntry": {
      "type": "struct",
      "entries": {
        "ConnectedUsers": {
          "description": "Not used.",
          "type": "int"
        },
        "DocId": {
          "description": "Identifier of the app.\n\n• In Qlik Sense Desktop, the identifier is the path and name of the app.\n\n• In Qlik Sense Enterprise, the identifier is the app's GUID.",
          "type": "string"
        },
        "DocName": {
          "description": "Name of the app.",
          "type": "string"
        },
        "FileSize": {
          "description": "Size of remote app.\nThis property is used only with Qlik Sense Desktop.\nIt is set to 0 for Qlik Sense Enterprise.",
          "type": "#/definitions/Float64"
        },
        "FileTime": {
          "description": "Last modified time stamp of the app.\nThis property is used only with Qlik Sense Desktop.\nIt is set to 0 for Qlik Sense Enterprise.",
          "type": "#/definitions/Float64"
        },
        "HasSectionAccess": {
          "description": "If true the app has section access configured.",
          "type": "bool"
        },
        "LastReloadTime": {
          "description": "Last reload time of the app.",
          "type": "string"
        },
        "Meta": {
          "description": "Meta data related to the app.",
          "type": "#/definitions/NxMeta"
        },
        "ReadOnly": {
          "description": "If set to true, the app is read-only.",
          "type": "bool"
        },
        "Thumbnail": {
          "description": "Thumbnail of the app.",
          "type": "#/definitions/StaticContentUrl"
        },
        "Title": {
          "description": "Title of the app.",
          "type": "string"
        }
      }
    },
    "DriveInfo": {
      "type": "struct",
      "entries": {
        "Drive": {
          "description": "Value of the drive.\nExamples:\nC:\\\\\\, E:\\\\\\",
          "type": "string"
        },
        "Name": {
          "description": "Name of the drive.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the drive.\n_Fixed_ means physical drive.",
          "type": "string"
        },
        "TypeIdentifier": {
          "description": "Information about the drive type.\n\nOne of:\n\n• REMOVABLE\n\n• FIXED\n\n• NETWORK\n\n• CD_ROM\n\n• RAM\n\n• UNKNOWN_TYPE",
          "type": "string"
        },
        "UnnamedDrive": {
          "type": "bool"
        }
      }
    },
    "EditorBreakpoint": {
      "type": "struct",
      "entries": {
        "BufferName": {
          "description": "Name of the breakpoint.",
          "type": "string"
        },
        "Enabled": {
          "description": "If set to true then the breakpoint is enabled (in use).",
          "type": "bool"
        },
        "LineIx": {
          "description": "Line number in the script where the breakpoint is set.",
          "type": "int"
        }
      }
    },
    "EmbeddedSnapshot": {
      "description": "Renders the embedded snapshot in an object.\nThe following is returned:\n\n• Any dynamic properties defined in the bookmark\n\n• Any properties defined in qEmbeddedSnapshot\n\nProperties:\n\n\"qEmbeddedSnapshot\": {}",
      "type": "struct"
    },
    "EmbeddedSnapshotDef": {
      "description": "Defines the embedded snapshot in a generic object.\n\nProperties:\n\n\"EmbeddedSnapshotDef\": {}",
      "type": "struct"
    },
    "Error": {
      "description": "Error extends the built in error type with extra error information provided by the Qlik Associative Engine",
      "type": "interface",
      "entries": {
        "Code": {
          "type": "method",
          "returns": [
            {
              "type": "int"
            }
          ]
        },
        "Error": {
          "type": "method",
          "returns": [
            {
              "type": "string"
            }
          ]
        },
        "Message": {
          "type": "method",
          "returns": [
            {
              "type": "string"
            }
          ]
        },
        "Parameter": {
          "type": "method",
          "returns": [
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "ErrorData": {
      "type": "struct",
      "entries": {
        "ErrorDataCode": {
          "description": "Type of the error messages.\n\nOne of:\n\n• EDC_ERROR\n\n• EDC_WARNING\n\n• EDC_CIRCULAR_REFERENCE",
          "type": "string"
        },
        "ErrorString": {
          "description": "Detailed information about the error message.",
          "type": "string"
        },
        "Line": {
          "description": "Script statement where the error occurs.",
          "type": "string"
        },
        "LineEnd": {
          "description": "Line termination characters.",
          "type": "string"
        },
        "Message": {
          "type": "#/definitions/ProgressMessage"
        }
      }
    },
    "ExpansionData": {
      "type": "struct",
      "entries": {
        "ExcludeList": {
          "type": "bool"
        },
        "Pos": {
          "type": "#/definitions/PositionMark"
        }
      }
    },
    "ExtensionList": {
      "description": "Obsolete, use qrs API's to fetch extensions.",
      "type": "struct",
      "entries": {
        "Items": {
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExtensionListDef": {
      "description": "Obsolete, use qrs API's to fetch extensions.",
      "type": "struct"
    },
    "Field": {
      "type": "struct",
      "entries": {
        "Clear": {
          "description": "Clears the selections in a specific field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "ClearAllButThis": {
          "description": "Maintains the selections in the current field while clearing the selections in the other fields.\n\nParameters:\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAndMode": {
          "description": "Returns the AND mode status of a field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetCardinal": {
          "description": "Retrieves the number of distinct values in a field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "int"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetNxProperties": {
          "description": "Gets the properties of a field.\n\nThe property OneAndOnlyOne is set to true if one and only value has been selected in the field prior setting the property.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxFieldProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetNxPropertiesRaw": {
          "description": "Gets the properties of a field.\n\nThe property OneAndOnlyOne is set to true if one and only value has been selected in the field prior setting the property.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "Lock": {
          "description": "Locks all selected values of a specific field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "LowLevelSelect": {
          "description": "Selects some values in a field, by entering the element numbers related to the values to select.\n\nParameters:\n\n◾ values       -   Indexes (or element numbers) of the values to select.\n\n◾ toggleMode   -   Set to true to keep any selections present in the list object.\nIf this parameter is set to false, selections made before accepting the list object search become alternative.\n\n◾ softLock     -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "Select": {
          "description": "Selects field values matching a search string.\n\nParameters:\n\n◾ match                -   String to search for.\nCan contain wild cards or numeric search criteria.\n\n◾ softLock             -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.\n\n◾ excludedValuesMode   -   Include excluded values in search.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectAll": {
          "description": "Selects all values of a field. Excluded values are also selected.\n\nParameters:\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectAlternative": {
          "description": "Selects all alternatives values in a specific field.\nIn a field that contains at least one selected value, the values that are neither selected nor excluded are alternatives values.\n\nParameters:\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectExcluded": {
          "description": "Inverts the current selections.\n\nParameters:\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectPossible": {
          "description": "Selects all possible values in a specific field.\n\nParameters:\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectValues": {
          "description": "Selects some values in a field, by entering the values to select.\n\nParameters:\n\n◾ fieldValues   -   List of the values to select.\n\n◾ toggleMode    -   The default value is false.\n\n◾ softLock      -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/FieldValue"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectValuesRaw": {
          "description": "Selects some values in a field, by entering the values to select.\n\nParameters:\n\n◾ fieldValues   -   List of the values to select.\n\n◾ toggleMode    -   The default value is false.\n\n◾ softLock      -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SetAndMode": {
          "description": "Sets a field in the AND mode.\n\nParameters:\n\n◾ andMode   -   Specifies if the AND mode applies to the field.\nSet this parameter to true to enter the AND mode.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetNxProperties": {
          "description": "Sets some properties to a field.\n\nParameters:\n\n◾ properties   -   Information about the properties of the field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/NxFieldProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetNxPropertiesRaw": {
          "description": "Sets some properties to a field.\n\nParameters:\n\n◾ properties   -   Information about the properties of the field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ToggleSelect": {
          "description": "Toggle selects field values matching a search string.\n\nParameters:\n\n◾ match                -   String to search for.\nCan contain wild cards or numeric search criteria.\n\n◾ softLock             -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.\n\n◾ excludedValuesMode   -   Include excluded values in search.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "Unlock": {
          "description": "Unlocks all selected values of a specific field if the target (or handle ) is a field.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "FieldAttributes": {
      "description": "Sets the formatting of a field.\nThe properties of qFieldAttributes and the formatting mechanism are described below.\n\nFormatting mechanism:\n\nThe formatting mechanism depends on the type set in qType, as shown below:\nIn case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.\n\nType is DATE, TIME, TIMESTAMP or INTERVAL:\n\nThe following applies:\n\n• If a format pattern is defined in qFmt , the formatting is as defined in qFmt .\n\n• If qFmt is empty, the formatting is defined by the number interpretation variables included at the top of the script ( TimeFormat , DateFormat , TimeStampFormat ).\n\n• The properties qDec , qThou , qnDec , qUseThou are not used.\n\nType is INTEGER:\n\nThe following applies:\n\n• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).\n\n• If no format pattern is defined in qFmt , no formatting is applied. The properties qDec , qThou , qnDec , qUseThou and the number interpretation variables defined in the script are not used .\n\nType is REAL:\n\nThe following applies:\n\n• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).\n\n• If no format pattern is defined in qFmt , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties qDec , qThou , qnDec , qUseThou are not used.\n\n• If no format pattern is defined in qFmt , and if qnDec is defined and not 0, the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.\n\n• If no format pattern is defined in qFmt , and if qnDec is 0, the number of decimals is 14 and the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.\n\nType is FIX:\n\nThe following applies:\n\n• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).\n\n• If no format pattern is defined in qFmt , the properties qDec and qnDec are used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.\n\nType is MONEY:\n\nThe following applies:\n\n• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( MoneyDecimalSep and MoneyThousandSep ).\n\n• If no format pattern is defined in qFmt , the engine uses the number interpretation variables included at the top of the script ( MoneyDecimalSep and MoneyThousandSep ).\n\nType is ASCII:\n\nNo formatting, qFmt is ignored.",
      "type": "struct",
      "entries": {
        "Dec": {
          "description": "Defines the decimal separator.\nExample:\n\n.:",
          "type": "string"
        },
        "Fmt": {
          "description": "Defines the format pattern that applies to qText .\nIs used in connection to the type of the field (parameter qType ).\nFor more information, see Formatting mechanism.\nExample: YYYY-MM-DD for a date.",
          "type": "string"
        },
        "NDec": {
          "description": "Number of decimals.\nDefault is 10.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "Thou": {
          "description": "Defines the thousand separator (if any).\nIs used if qUseThou is set to 1.\nExample:\n\n,:",
          "type": "string"
        },
        "Type": {
          "description": "Type of the field.\nDefault is U.\n\nOne of:\n\n• U or UNKNOWN\n\n• A or ASCII\n\n• I or INTEGER\n\n• R or REAL\n\n• F or FIX\n\n• M or MONEY\n\n• D or DATE\n\n• T or TIME\n\n• TS or TIMESTAMP\n\n• IV or INTERVAL",
          "type": "string"
        },
        "UseThou": {
          "description": "Defines whether or not a thousands separator must be used.\nDefault is 0.",
          "type": "int"
        }
      }
    },
    "FieldDefEx": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the field.",
          "type": "string"
        },
        "Type": {
          "description": "Type of data entity.\n\nOne of:\n\n• NOT_PRESENT\n\n• PRESENT\n\n• IS_CYCLIC_GROUP\n\n• IS_DRILL_GROUP\n\n• IS_VAR\n\n• IS_EXPR\n\n• IS_IMPLICIT\n\n• IS_DETAIL",
          "type": "string"
        }
      }
    },
    "FieldDescription": {
      "type": "struct",
      "entries": {
        "AlwaysOneSelected": {
          "description": "If set to true, it means that the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe default value is false.",
          "type": "bool"
        },
        "AndMode": {
          "description": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false.",
          "type": "bool"
        },
        "ByteSize": {
          "description": "Static RAM memory used in bytes.",
          "type": "int"
        },
        "Cardinal": {
          "description": "Number of distinct field values.",
          "type": "int"
        },
        "Comment": {
          "description": "Field comment.",
          "type": "string"
        },
        "DistinctOnly": {
          "description": "If set to true, only distinct field values are shown.\nThe default value is false.",
          "type": "bool"
        },
        "HasInfo_OBSOLETE": {
          "type": "bool"
        },
        "InternalNumber": {
          "description": "Internal number of the field.",
          "type": "int"
        },
        "IsDefinitionOnly": {
          "description": "If set to true, it means that the field is a field on the fly.\nThe default value is false.",
          "type": "bool"
        },
        "IsHidden": {
          "description": "If set to true, it means that the field is hidden.\nThe default value is false.",
          "type": "bool"
        },
        "IsLocked": {
          "description": "If set to true, it means that the field is locked.\nThe default value is false.",
          "type": "bool"
        },
        "IsNumeric": {
          "description": "Is set to true if the value is a numeric.\nThe default value is false.",
          "type": "bool"
        },
        "IsSemantic": {
          "description": "If set to true, it means that the field is a semantic.\nThe default value is false.",
          "type": "bool"
        },
        "IsSystem": {
          "description": "If set to true, it means that the field is a system field.\nThe default value is false.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the field.",
          "type": "string"
        },
        "PossibleCount_OBSOLETE": {
          "type": "int"
        },
        "SrcTables": {
          "description": "List of table names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "TotalCount": {
          "description": "Total number of field values.",
          "type": "int"
        }
      }
    },
    "FieldInTableData": {
      "type": "struct",
      "entries": {
        "Comment": {
          "description": "Comment related to the field.",
          "type": "string"
        },
        "DerivedFields": {
          "description": "List of the derived fields.",
          "type": "slice",
          "items": {
            "type": "#/definitions/DerivedFieldsInTableData"
          }
        },
        "HasDuplicates": {
          "description": "This property is set to true if the field contains some duplicate values.",
          "type": "bool"
        },
        "HasNull": {
          "description": "This property is set to true if the field contains some Null values.",
          "type": "bool"
        },
        "HasWild": {
          "type": "bool"
        },
        "InformationDensity": {
          "description": "Number of records that have values (for example, not NULL) in the field as compared to the total number of records in the table.",
          "type": "#/definitions/Float64"
        },
        "IsFieldOnTheFly": {
          "type": "bool"
        },
        "IsSynthetic": {
          "description": "This property is set to true if the field contains a synthetic key.",
          "type": "bool"
        },
        "KeyType": {
          "description": "Tells if the field is a key field.\n\nOne of:\n\n• NOT_KEY\n\n• ANY_KEY\n\n• PRIMARY_KEY\n\n• PERFECT_KEY",
          "type": "string"
        },
        "NNonNulls": {
          "description": "Number of values that are non Null.",
          "type": "int"
        },
        "NPresentDistinctValues": {
          "type": "int"
        },
        "NRows": {
          "description": "Number of rows in the field.",
          "type": "int"
        },
        "NTotalDistinctValues": {
          "description": "Number of distinct values in the field.",
          "type": "int"
        },
        "Name": {
          "description": "Name of the field.",
          "type": "string"
        },
        "OriginalFields": {
          "description": "Is shown for fixed records.\n_qOriginalFieldName_ and qName are identical if no field names are used in the file.\n_qOriginalFieldName_ differs from qName if embedded file names are used in the file.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Present": {
          "type": "bool"
        },
        "ReadableName": {
          "type": "string"
        },
        "SubsetRatio": {
          "description": "Number of distinct values in the field (in the current table) as compared to the total number of distinct values of this field (in all tables).",
          "type": "#/definitions/Float64"
        },
        "Tags": {
          "description": "List of tags related to the field.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FieldList": {
      "description": "Lists the fields present in the data model viewer. Is the layout for FieldListDef.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Array of items.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxFieldDescription"
          }
        }
      }
    },
    "FieldListDef": {
      "description": "Defines the fields to show.",
      "type": "struct",
      "entries": {
        "ShowDefinitionOnly": {
          "description": "Shows the fields defined on the fly if set to true.\nDefault is false.",
          "type": "bool"
        },
        "ShowDerivedFields": {
          "description": "Shows the fields and derived fields if set to true.\nDefault is false.",
          "type": "bool"
        },
        "ShowHidden": {
          "description": "Shows the hidden fields if set to true.\nDefault is false.",
          "type": "bool"
        },
        "ShowImplicit": {
          "description": "Shows the Direct Discovery measure fields if set to true.\nDefault is false.",
          "type": "bool"
        },
        "ShowSemantic": {
          "description": "Show the semantic fields if set to true.\nDefault is false.",
          "type": "bool"
        },
        "ShowSrcTables": {
          "description": "Shows the tables and fields present in the data model viewer if set to true.\nDefault is false.",
          "type": "bool"
        },
        "ShowSystem": {
          "description": "Shows the system tables if set to true.\nDefault is false.",
          "type": "bool"
        }
      }
    },
    "FieldOrColumn": {
      "type": "struct",
      "entries": {
        "FieldName": {
          "description": "Name of the field or column to be matched.",
          "type": "string"
        },
        "TableName": {
          "description": "Name of the table to be matched on. This parameter is optional. If TableName is set, FieldName represent the Table column with that name. If TableName is not set, FieldName represents the the field with that name.",
          "type": "string"
        }
      }
    },
    "FieldScores": {
      "type": "struct",
      "entries": {
        "CardinalRatio": {
          "description": "Cardinality of a column/field divided by the number of rows in the table.\nIf the cardinal ratio is 1, it means that the column is a candidate/primary key.",
          "type": "#/definitions/Float64"
        },
        "FieldName": {
          "description": "Field name.\nOne of the field names defined in qFieldPairName.",
          "type": "string"
        },
        "ReadableName": {
          "type": "string"
        },
        "RowScore": {
          "description": "Number of matches between the two fields defined in qFieldPairName divided by the number of values in the field qFieldName .\nIf 0, it means that there are no common values between the two fields defined in qFieldPairName .",
          "type": "#/definitions/Float64"
        },
        "SymbolScore": {
          "description": "Number of distinct matches between the two fields defined in qFieldPairName divided by the number of distinct values in the field qFieldName .\nIf 0, it means that there are no common values between the two fields defined in qFieldPairName .",
          "type": "#/definitions/Float64"
        }
      }
    },
    "FieldValue": {
      "type": "struct",
      "entries": {
        "IsNumeric": {
          "description": "Is set to true if the value is a numeric.\nThis parameter is optional. Default is false.",
          "type": "bool"
        },
        "Number": {
          "description": "Numeric value of the field.\nThis parameter is displayed if qIsNumeric is set to true.\nThis parameter is optional.",
          "type": "#/definitions/Float64"
        },
        "Text": {
          "description": "Text related to the field value.\nThis parameter is optional.",
          "type": "string"
        }
      }
    },
    "FileDataFormat": {
      "description": "FileType:\n\nRecognized file formats are:\n\n• CSV for Delimited\n\n• FIX for Fixed Record\n\n• DIF for Data Interchange Format\n\n• EXCELBIFF_ for Microsoft Excel (XLS)\n\n• EXCELOOXML_ for Microsoft Excel (XLSX)\n\n• HTML for HTML\n\n• QVD for QVD file\n\n• XML for XML\n\n• QVX for QVX file\n\n• JSON for JSON format\n\n• KML for KML file",
      "type": "struct",
      "entries": {
        "CodePage": {
          "description": "Character set used in the file.",
          "type": "int"
        },
        "Comment": {
          "description": "String that marks the beginning of the comment line.\nExample: “\n\n” or “//”:\n\nThe engine ignores the commented lines during the data load.\nThis property is only used for delimited files.",
          "type": "string"
        },
        "Delimiter": {
          "description": "Information about the delimiter.\nThis property is used for delimited files.",
          "type": "#/definitions/DelimiterInfo"
        },
        "FixedWidthDelimiters": {
          "description": "Positions of the field breaks in the table.\nThis property is used for fixed record data files.",
          "type": "string"
        },
        "HeaderSize": {
          "description": "Size of the header.\nExample: If the header size is 2, the first two rows in the file are considered as header and not as data. The header can contain the field names.",
          "type": "int"
        },
        "IgnoreEOF": {
          "description": "Is set to true, the end-of-file character is not taken into account during reload.\nThis property is used for delimited files and fixed record data files.",
          "type": "bool"
        },
        "Label": {
          "description": "One of:\n\n• Embedded labels (field names are present in the file)\n\n• No labels\n\n• Explicit labels (for DIFfiles)",
          "type": "string"
        },
        "Quote": {
          "description": "One of:\n\n• None (no quotes)\n\n• MSQ (Modern Style Quoting)\n\n• Standard (quotes \" \" or ' ' can be used, but only if they are the first and last non blank characters of a field value)\n\nThis property is used for delimited files.",
          "type": "string"
        },
        "RecordSize": {
          "description": "Record length.\nEach record (row of data) contains a number of columns with a fixed field size.\nThis property is used for fixed record data files.",
          "type": "int"
        },
        "TabSize": {
          "description": "Number of spaces that one tab character represents in the table file.\nThis property is used for fixed record data files.",
          "type": "int"
        },
        "Type": {
          "description": "Type of the file.\n\nOne of:\n\n• CSV or FILE_TYPE_CSV\n\n• FIX or FILE_TYPE_FIX\n\n• DIF or FILE_TYPE_DIF\n\n• EXCEL_BIFF or FILE_TYPE_EXCEL_BIFF\n\n• EXCEL_OOXML or FILE_TYPE_EXCEL_OOXML\n\n• HTML or FILE_TYPE_HTML\n\n• QVD or FILE_TYPE_QVD\n\n• XML or FILE_TYPE_XML\n\n• QVX or FILE_TYPE_QVX\n\n• JSON or FILE_TYPE_JSON\n\n• KML or FILE_TYPE_KML",
          "type": "string"
        }
      }
    },
    "FilterInfo": {
      "type": "struct",
      "entries": {
        "Type": {
          "description": "One of:\n\n• NONE or FILTER_TYPE_NONE\n\n• RAW or FILTER_TYPE_RAW",
          "type": "string"
        },
        "WherePredicate": {
          "type": "string"
        }
      }
    },
    "Float64": {
      "description": "Float64 is an enigma-go equivalent of float64 which adds support for the Qlik Associative Engine specific way of marshalling and unmarshalling \"Infinity\", \"-Infinity\" and \"NaN\" as json strings.\nIt can always safely be typecasted to plain float64 including these special cases.",
      "type": "float64",
      "entries": {
        "MarshalJSON": {
          "description": "MarshalJSON implements the Marshaler interface for custom marshalling.",
          "type": "method",
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "UnmarshalJSON": {
          "description": "UnmarshalJSON implements the Unmarshaler interface for custom unmarshalling.",
          "type": "method",
          "params": [
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "FolderItem": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the folder item.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the folder item.\n\nOne of:\n\n• FOLDER or FOLDER_ITEM_FOLDER\n\n• FILE or FOLDER_ITEM_FILE\n\n• OTHER or FOLDER_ITEM_OTHER",
          "type": "string"
        }
      }
    },
    "Function": {
      "type": "struct",
      "entries": {
        "Group": {
          "description": "Group of the script function.\n\nOne of:\n\n• ALL or FUNC_GROUP_ALL\n\n• U or FUNC_GROUP_UNKNOWN\n\n• NONE or FUNC_GROUP_NONE\n\n• AGGR or FUNC_GROUP_AGGR\n\n• NUM or FUNC_GROUP_NUMERIC\n\n• RNG or FUNC_GROUP_RANGE\n\n• EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC\n\n• TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC\n\n• FIN or FUNC_GROUP_FINANCIAL\n\n• MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE\n\n• COUNT or FUNC_GROUP_COUNTER\n\n• STR or FUNC_GROUP_STRING\n\n• MAPP or FUNC_GROUP_MAPPING\n\n• RCRD or FUNC_GROUP_INTER_RECORD\n\n• CND or FUNC_GROUP_CONDITIONAL\n\n• LOG or FUNC_GROUP_LOGICAL\n\n• NULL or FUNC_GROUP_NULL\n\n• SYS or FUNC_GROUP_SYSTEM\n\n• FILE or FUNC_GROUP_FILE\n\n• TBL or FUNC_GROUP_TABLE\n\n• DATE or FUNC_GROUP_DATE_AND_TIME\n\n• NUMI or FUNC_GROUP_NUMBER_INTERPRET\n\n• FRMT or FUNC_GROUP_FORMATTING\n\n• CLR or FUNC_GROUP_COLOR\n\n• RNK or FUNC_GROUP_RANKING\n\n• GEO or FUNC_GROUP_GEO\n\n• EXT or FUNC_GROUP_EXTERNAL\n\n• PROB or FUNC_GROUP_PROBABILITY\n\n• ARRAY or FUNC_GROUP_ARRAY\n\n• LEG or FUNC_GROUP_LEGACY",
          "type": "string"
        },
        "Name": {
          "description": "Name of the script function.",
          "type": "string"
        },
        "Signature": {
          "description": "Signature of the script function.\nGives general information about the function.",
          "type": "string"
        }
      }
    },
    "GenericBookmark": {
      "type": "struct",
      "entries": {
        "Apply": {
          "description": "Applies a bookmark.\n\nThe operation is successful if qSuccess is set to true.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatches": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPatch"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatchesRaw": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Approve": {
          "description": "Adds the generic bookmark to the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "GetFieldValues": {
          "description": "Retrieves the values of a field.\n\nFieldvalue:\n\n  +------------+--------------------------------+---------+\n  |    NAME    |          DESCRIPTION           |  TYPE   |\n  +------------+--------------------------------+---------+\n  | qText      | Text related to the field      | String  |\n  |            | value.                         |         |\n  | qIsNumeric | Is set to true if the value is | Boolean |\n  |            | a numeric.  Default is false.  |         |\n  | qNumber    | Numeric value of the field.    | Double  |\n  |            | This parameter is displayed if |         |\n  |            | qIsNumeric is set to true.     |         |\n  +------------+--------------------------------+---------+\n\nParameters:\n\n◾ field               -   Name of the field.\n\n◾ getExcludedValues   -   If set to true, only excluded values are returned.\n\n◾ dataPage            -   Range of returned values.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            },
            {
              "type": "#/definitions/BookmarkFieldPage"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/FieldValue"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFieldValuesRaw": {
          "description": "Retrieves the values of a field.\n\nFieldvalue:\n\n  +------------+--------------------------------+---------+\n  |    NAME    |          DESCRIPTION           |  TYPE   |\n  +------------+--------------------------------+---------+\n  | qText      | Text related to the field      | String  |\n  |            | value.                         |         |\n  | qIsNumeric | Is set to true if the value is | Boolean |\n  |            | a numeric.  Default is false.  |         |\n  | qNumber    | Numeric value of the field.    | Double  |\n  |            | This parameter is displayed if |         |\n  |            | qIsNumeric is set to true.     |         |\n  +------------+--------------------------------+---------+\n\nParameters:\n\n◾ field               -   Name of the field.\n\n◾ getExcludedValues   -   If set to true, only excluded values are returned.\n\n◾ dataPage            -   Range of returned values.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfo": {
          "description": "Returns:\n\n• The type of the object.\n\n• The identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfoRaw": {
          "description": "Returns:\n\n• The type of the object.\n\n• The identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayout": {
          "description": "Evaluates an object and displays its properties including the dynamic properties.\nIf the member delta is set to true in the request object, only the delta is evaluated.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmarkLayout"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayoutRaw": {
          "description": "Evaluates an object and displays its properties including the dynamic properties.\nIf the member delta is set to true in the request object, only the delta is evaluated.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProperties": {
          "description": "Shows the properties of an object.\nIf the member delta is set to true in the request object, only the delta is retrieved.\n\nThe following is always returned in the output:",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericBookmarkProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetPropertiesRaw": {
          "description": "Shows the properties of an object.\nIf the member delta is set to true in the request object, only the delta is retrieved.\n\nThe following is always returned in the output:",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "Publish": {
          "description": "Publishes a bookmark.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "SetProperties": {
          "description": "Sets some properties for a bookmark.\n\nParameters:\n\n◾ prop   -   Information about the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericBookmarkProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetPropertiesRaw": {
          "description": "Sets some properties for a bookmark.\n\nParameters:\n\n◾ prop   -   Information about the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnApprove": {
          "description": "Removes the generic bookmark from the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnPublish": {
          "description": "Unpublishes a bookmark.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "GenericBookmarkEntry": {
      "type": "struct",
      "entries": {
        "Bookmark": {
          "description": "Information about the bookmark.",
          "type": "#/definitions/NxBookmark"
        },
        "Properties": {
          "description": "Information about the properties of the bookmark.",
          "type": "#/definitions/GenericBookmarkProperties"
        }
      }
    },
    "GenericBookmarkLayout": {
      "description": "Is the layout for GenericBookmarkProperties.",
      "type": "struct",
      "entries": {
        "Bookmark": {
          "description": "Information about the bookmark.",
          "type": "#/definitions/NxBookmark"
        },
        "FieldInfos": {
          "description": "Information about the field selections associated with the bookmark.",
          "type": "slice",
          "items": {
            "type": "#/definitions/LayoutFieldInfo"
          }
        },
        "Info": {
          "description": "Information about the object.",
          "type": "#/definitions/NxInfo"
        },
        "Meta": {
          "description": "Information on publishing and permissions.",
          "type": "#/definitions/NxMeta"
        }
      }
    },
    "GenericBookmarkProperties": {
      "type": "struct",
      "entries": {
        "Info": {
          "description": "Information about the bookmark.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "MetaDef": {
          "description": "Definition of the dynamic properties.",
          "type": "#/definitions/NxMetaDef"
        }
      }
    },
    "GenericDimension": {
      "type": "struct",
      "entries": {
        "ApplyPatches": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPatch"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatchesRaw": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Approve": {
          "description": "Adds the generic dimension to the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "GetDimension": {
          "description": "Returns the definition of a dimension.\n\nThe definition of the dimension is returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxLibraryDimensionDef"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDimensionRaw": {
          "description": "Returns the definition of a dimension.\n\nThe definition of the dimension is returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfo": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfoRaw": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayout": {
          "description": "Evaluates a dimension and displays its properties, including the dynamic properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericDimensionLayout"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayoutRaw": {
          "description": "Evaluates a dimension and displays its properties, including the dynamic properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLinkedObjects": {
          "description": "Lists the linked objects to a generic object, a dimension or a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxLinkedObjectInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLinkedObjectsRaw": {
          "description": "Lists the linked objects to a generic object, a dimension or a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProperties": {
          "description": "Shows the properties of an object.\nReturns the identifier and the definition of the dimension.\nIf the member delta is set to true in the request object, only the delta is retrieved.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericDimensionProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetPropertiesRaw": {
          "description": "Shows the properties of an object.\nReturns the identifier and the definition of the dimension.\nIf the member delta is set to true in the request object, only the delta is retrieved.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "Publish": {
          "description": "Publishes a dimension.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "SetProperties": {
          "description": "Sets some properties for a dimension.\n\nParameters:\n\n◾ prop   -   Information about the dimension.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericDimensionProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetPropertiesRaw": {
          "description": "Sets some properties for a dimension.\n\nParameters:\n\n◾ prop   -   Information about the dimension.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnApprove": {
          "description": "Removes the generic dimension from the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnPublish": {
          "description": "Unpublishes a dimension.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "GenericDimensionInfo": {
      "type": "struct",
      "entries": {
        "AndMode": {
          "description": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false.",
          "type": "bool"
        },
        "ApprMaxGlyphCount": {
          "description": "Length of the longest value in the field.",
          "type": "int"
        },
        "Cardinal": {
          "description": "Number of distinct field values",
          "type": "int"
        },
        "IsSemantic": {
          "description": "If set to true, it means that the field is a semantic.",
          "type": "bool"
        },
        "Tags": {
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GenericDimensionLayout": {
      "description": "Is the layout for GenericDimensionProperties.",
      "type": "struct",
      "entries": {
        "Dim": {
          "description": "Name and label of the dimension, information about grouping.",
          "type": "#/definitions/NxLibraryDimension"
        },
        "DimInfos": {
          "description": "Cardinal and tags related to the dimension.\nLength of the longest value in the field.",
          "type": "slice",
          "items": {
            "type": "#/definitions/GenericDimensionInfo"
          }
        },
        "Info": {
          "description": "Identifier and type of the dimension.",
          "type": "#/definitions/NxInfo"
        },
        "Meta": {
          "description": "Information about publishing and permissions.",
          "type": "#/definitions/NxMeta"
        }
      }
    },
    "GenericDimensionProperties": {
      "type": "struct",
      "entries": {
        "Dim": {
          "description": "Definition of the dimension.\nThis parameter is mandatory.",
          "type": "#/definitions/NxLibraryDimensionDef"
        },
        "Info": {
          "description": "Identifier and type of the dimension.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "MetaDef": {
          "description": "Definition of the dynamic properties.",
          "type": "#/definitions/NxMetaDef"
        }
      }
    },
    "GenericMeasure": {
      "type": "struct",
      "entries": {
        "ApplyPatches": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPatch"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatchesRaw": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Approve": {
          "description": "Adds the generic measure to the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "GetInfo": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfoRaw": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayout": {
          "description": "Evaluates a measure and displays its properties, including the dynamic properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericMeasureLayout"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayoutRaw": {
          "description": "Evaluates a measure and displays its properties, including the dynamic properties.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLinkedObjects": {
          "description": "Lists the linked objects to a generic object, a dimension or a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxLinkedObjectInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLinkedObjectsRaw": {
          "description": "Lists the linked objects to a generic object, a dimension or a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMeasure": {
          "description": "Returns the definition of a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxLibraryMeasureDef"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetMeasureRaw": {
          "description": "Returns the definition of a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProperties": {
          "description": "Shows the properties of an object.\nReturns the identifier and the definition of the measure.\nIf the member delta is set to true in the request object, only the delta is retrieved.\n\nThe following is always returned in the output:",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericMeasureProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetPropertiesRaw": {
          "description": "Shows the properties of an object.\nReturns the identifier and the definition of the measure.\nIf the member delta is set to true in the request object, only the delta is retrieved.\n\nThe following is always returned in the output:",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "Publish": {
          "description": "Publishes a measure.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "SetProperties": {
          "description": "Sets some properties for a measure.\n\nParameters:\n\n◾ prop   -   Information about the measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericMeasureProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetPropertiesRaw": {
          "description": "Sets some properties for a measure.\n\nParameters:\n\n◾ prop   -   Information about the measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnApprove": {
          "description": "Removes the generic measure from the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnPublish": {
          "description": "Unpublishes a measure.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "GenericMeasureLayout": {
      "description": "Is the layout for GenericMeasureProperties.",
      "type": "struct",
      "entries": {
        "Info": {
          "description": "Information about the object.",
          "type": "#/definitions/NxInfo"
        },
        "Measure": {
          "description": "Information about the measure.",
          "type": "#/definitions/NxLibraryMeasure"
        },
        "Meta": {
          "description": "Information on publishing and permissions.",
          "type": "#/definitions/NxMeta"
        }
      }
    },
    "GenericMeasureProperties": {
      "type": "struct",
      "entries": {
        "Info": {
          "description": "Information about the measure.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "Measure": {
          "description": "Definition of the measure.\nThis parameter is mandatory.",
          "type": "#/definitions/NxLibraryMeasureDef"
        },
        "MetaDef": {
          "description": "Definition of the dynamic properties.",
          "type": "#/definitions/NxMetaDef"
        }
      }
    },
    "GenericObject": {
      "type": "struct",
      "entries": {
        "AbortListObjectSearch": {
          "description": "Aborts the results of a search in a list object.\nThis method applies to list objects (objects with one dimension).\nAfter an abort on a list object search, the GetLayout Method does not return any more search results but it does return the values in the field.\n\nParameters:\n\n◾ path   -   Path to the definition of the list object.\nFor example, /qListObjectDef .",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "AcceptListObjectSearch": {
          "description": "Accept the results of a search in a list object. The search results become selected in the field.\nThis method applies to list objects (objects with one dimension).\nThe search results are displayed using the GetLayout Method.\n\nParameters:\n\n◾ path         -   Path to the definition of the list object.\nFor example, /qListObjectDef .\n\n◾ toggleMode   -   Set to true to keep any selections present in the list object.\nIf this parameter is set to false, selections made before accepting the list object search become alternative.\n\n◾ softLock     -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatches": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nIt is possible to apply a patch to the properties of a generic object, that is not persistent. Such a patch is called a soft patch.\nIn that case, the result of the operation on the properties (add, remove or delete) is not shown when doing GetProperties , and only a GetLayout call shows the result of the operation.\nProperties that are not persistent are called soft properties. Once the engine session is over, soft properties are cleared.\nSoft properties apply only to generic objects.\n\nParameters:\n\n◾ patches     -   Array of patches.\n\n◾ softPatch   -   If set to true, it means that the properties to be applied are not persistent. The patch is a soft patch.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPatch"
              }
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatchesRaw": {
          "description": "Applies a patch to the properties of an object. Allows an update to some of the properties.\nIt is possible to apply a patch to the properties of a generic object, that is not persistent. Such a patch is called a soft patch.\nIn that case, the result of the operation on the properties (add, remove or delete) is not shown when doing GetProperties , and only a GetLayout call shows the result of the operation.\nProperties that are not persistent are called soft properties. Once the engine session is over, soft properties are cleared.\nSoft properties apply only to generic objects.\n\nParameters:\n\n◾ patches     -   Array of patches.\n\n◾ softPatch   -   If set to true, it means that the properties to be applied are not persistent. The patch is a soft patch.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Approve": {
          "description": "Adds the generic object to the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "BeginSelections": {
          "description": "Begins the selection mode. The app enters the modal state. The specified object enters the selection mode and a modal window is opened. The selection mode can apply to only one object in an app at a time.\nWhen a visualization is in selection mode, selections can be made in this visualization. The visualization is not sorted until the selection mode is ended. Once the selection mode is ended and if the selections are accepted, the visualization is sorted according to the sort criteria. For more information about:\n\n• Ending the selection mode, see EndSelections Method.\n\n• The sort criteria, see ListObjectDef or HyperCubeDef.\n\nExample:\n\nA sheet contains a list object and a chart. If the list object is in selection mode then the chart cannot be in selection mode. No selection on the chart can be made until the list object exits the selection mode.\n\nParameters:\n\n◾ paths   -   List of the paths to the definition of the objects to enter selection mode.\nFor example, /qListObjectDef .",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ClearSelections": {
          "description": "Clears the selections in a dimension of a visualization.\n\nParameters:\n\n◾ path         -   Path to the definition of the visualization.\nFor example, /qListObjectDef .\n\n◾ colIndices   -   Array of dimension numbers or indexes. The selections are cleared in the specified dimensions.\nDimension numbers/indexes start from 0.\nIf this parameter is not set, all dimensions are cleared.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ClearSoftPatches": {
          "description": "Clears the soft properties of a generic object.\nFor more information on how to add soft properties to a generic object, see ApplyPatches Method.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CollapseLeft": {
          "description": "Collapses the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.\nIn the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.\n\nParameters:\n\n◾ path   -   Path to the definition of the object to be collapsed.\nFor example, /qHyperCubeDef .\n\n◾ row    -   Row index in the data matrix.\nIndexing starts from 0.\n\n◾ col    -   Column index. The index is based on the left dimension indexes.\nIndexing starts from 0.\n\n◾ all    -   If set to true, it collapses all cells.\nParameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CollapseTop": {
          "description": "Collapses the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.\nIn the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.\n\nParameters:\n\n◾ path   -   Path to the definition of the object to be collapsed\nFor example, /qHyperCubeDef .\n\n◾ row    -   Row index. The index is based on the top dimension indexes.\nIndexing starts from 0.\n\n◾ col    -   Column index in the data matrix.\nIndexing starts from 0.\n\n◾ all    -   If set to true, it collapses all cells.\nParameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CopyFrom": {
          "description": "Copies the properties of a generic object and its children.\nThe source object is specified by the parameter qFromId and the destination object is referenced by its handle.\nThe identifier of the destination object is the same as before the copy takes place.\n\nParameters:\n\n◾ fromId   -   Identifier of the object to copy.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CreateChild": {
          "description": "Creates a generic object that is a child of another generic object.\nIt is possible to update the properties of the child's parent at the same time that the child is created. Both operations are performed by the same call.\nIt is possible to create a child that is linked to another generic object. The two objects have the same properties.\n\nParameters:\n\n◾ prop          -   Information about the child.\nIt is possible to create a child that is linked to another object.\n\n◾ propForThis   -   Identifier of the parent's object.\nShould be set to update the properties of the parent's object at the same time the child is created.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateChildRaw": {
          "description": "Creates a generic object that is a child of another generic object.\nIt is possible to update the properties of the child's parent at the same time that the child is created. Both operations are performed by the same call.\nIt is possible to create a child that is linked to another generic object. The two objects have the same properties.\n\nParameters:\n\n◾ prop          -   Information about the child.\nIt is possible to create a child that is linked to another object.\n\n◾ propForThis   -   Identifier of the parent's object.\nShould be set to update the properties of the parent's object at the same time the child is created.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyAllChildren": {
          "description": "Removes all children and all children to the children on an object.\n\nParameters:\n\n◾ propForThis   -   Identifier of the parent's object and property to update.\nShould be set to update the properties of the parent's object at the same time the child is created.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "DestroyAllChildrenRaw": {
          "description": "Removes all children and all children to the children on an object.\n\nParameters:\n\n◾ propForThis   -   Identifier of the parent's object and property to update.\nShould be set to update the properties of the parent's object at the same time the child is created.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "DestroyChild": {
          "description": "Removes a child object.\nIt is possible to update the properties of the child's parent at the same time that the child is removed. Both operations are performed by the same call.\nRemoving a linked object, invalidate the linking object.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id            -   Identifier of the child to remove.\n\n◾ propForThis   -   Identifier of the parent's object and property to update.\nShould be set to update the properties of the parent's object at the same time the child is created.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DestroyChildRaw": {
          "description": "Removes a child object.\nIt is possible to update the properties of the child's parent at the same time that the child is removed. Both operations are performed by the same call.\nRemoving a linked object, invalidate the linking object.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ id            -   Identifier of the child to remove.\n\n◾ propForThis   -   Identifier of the parent's object and property to update.\nShould be set to update the properties of the parent's object at the same time the child is created.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "DrillUp": {
          "description": "You can use the drillUp method with any object that contains a drill-down group as a dimension.\nThis method allows you to move between different levels of information (from a detailed level to a less detailed level of information). You can go back to previous visualizations up to the highest level of the hierarchy.\nIf you try to drill up more steps than there are available levels, the first level of the hierarchy is displayed.\n\nParameters:\n\n◾ path       -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ dimNo      -   Dimension number or index starting from 0.\nThe default value is 0.\n\n◾ nbrSteps   -   Number of steps you want to drill up.\nThe default value is 0.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "EmbedSnapshotObject": {
          "description": "Adds a snapshot to a generic object.\nOnly one snapshot can be embedded in a generic object.\nIf you embed a snapshot in an object that already contains a snapshot, the new snapshot overwrites the previous one.\n\nParameters:\n\n◾ id   -   Identifier of the bookmark.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "EndSelections": {
          "description": "Ends the selection mode on a visualization. The selections are accepted or aborted when exiting the selection mode, depending on the qAccept parameter value.\n\nParameters:\n\n◾ accept   -   Set this parameter to true to accept the selections before exiting the selection mode.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ExpandLeft": {
          "description": "Expands the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.\nIn the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.\n\nParameters:\n\n◾ path   -   Path to the definition of the object to be expanded.\nFor example, /qHyperCubeDef .\n\n◾ row    -   Row index in the data matrix to expand.\nIndexing starts from 0.\n\n◾ col    -   Column index. The index is based on the left dimension indexes.\nIndexing starts from 0.\n\n◾ all    -   If set to true, it expands all cells.\nParameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ExpandTop": {
          "description": "Expands the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.\nIn the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.\n\nParameters:\n\n◾ path   -   Path to the definition of the object to be expanded.\nFor example, /qHyperCubeDef .\n\n◾ row    -   Row index. The index is based on the top dimension indexes.\nIndexing starts from 0.\n\n◾ col    -   Column index in the data matrix.\nIndexing starts from 0.\n\n◾ all    -   If set to true, it expands all cells.\nParameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ExportData": {
          "description": "Exports the data of any generic object to an Excel file or a open XML file. If the object contains excluded values, those excluded values are not exported.\nThis API has limited functionality and will not support CSV export from all types of objects. Consider using Excel export instead. Treemap and bar chart are not supported.\n\nDefault limitations in number of rows and columns:\n\nThe default maximum number of rows and columns in the Excel export file is:\n\n• 1048566 rows per sheet. For pivot tables: 1048566 column dimensions. 10 rows can be added after the export.\n\n• 16384 columns per sheet. If the number of columns exceeds the limit, the exported file is truncated and a warning message is sent.\n\nDefault limitations in number of cells:\n\nThe default maximum number of cells in the export file is:\n\n• 1000000 to export to an Excel file\n\n• 5000000 to export to a CSV file\n\nThe exported file is truncated if the number of cells exceeds the limit. A warning message with code 1000 is sent.\nThere is an option to export only the possible values ( qExportState is P).\n\nDefault limitation in number of columns:\n\nThe default maximum number of columns in the export file is:\n\n• 1000 to export to a CSV file\n\nThe exported file is truncated if the number of cells exceeds the limit. A warning message with code 1000 is sent.\nThere is an option to export only the possible values ( qExportState is P).\n\nDefault limitation in size:\n\nIf the exported file is larger than the maximum value, then an out-of-memory error with code 13000 is returned.\n\nExported files are temporary and are available only for a certain time span and only to the user who created them.\n\nParameters:\n\n◾ fileType      -   Type of the file to export.\n\nOne of:\n\n• CSV_C or EXPORT_CSV_C\n\n• CSV_T or EXPORT_CSV_T\n\n• OOXML or EXPORT_OOXML\n\n◾ path          -   Path to the definition of the object to be exported.\nFor example, /qHyperCubeDef .\nThis parameter is mandatory if the file type is CSVC_ or CSVT_ .\n\n◾ fileName      -   Name of the exported file after download from browser.\nThis parameter is optional and only used in Qlik Sense Desktop.\n\n◾ exportState   -   Defines the values to be exported.\nThe default value is A.\n\nOne of:\n\n• P or EXPORT_POSSIBLE\n\n• A or EXPORT_ALL",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetChild": {
          "description": "Returns the type of the object and the corresponding handle.\n\nParameters:\n\n◾ id   -   Identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetChildInfos": {
          "description": "Returns the identifier and the type for each child in an app object. If the child contains extra properties in qInfos , these properties are returned.\n\nFull dynamic properties are optional and are returned if they exist in the definition of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetChildInfosRaw": {
          "description": "Returns the identifier and the type for each child in an app object. If the child contains extra properties in qInfos , these properties are returned.\n\nFull dynamic properties are optional and are returned if they exist in the definition of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetEffectiveProperties": {
          "description": "Returns the identifier, the type and the properties of the object.\nIf the object contains some soft properties, the soft properties are returned.\nIf the object is linked to another object, the properties of the linking object are returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObjectProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetEffectivePropertiesRaw": {
          "description": "Returns the identifier, the type and the properties of the object.\nIf the object contains some soft properties, the soft properties are returned.\nIf the object is linked to another object, the properties of the linking object are returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFullPropertyTree": {
          "description": "Gets the properties of:\n\n• A generic object.\n\n• The children of the generic object.\n\n• The bookmarks/embedded snapshots of the generic object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObjectEntry"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFullPropertyTreeRaw": {
          "description": "Gets the properties of:\n\n• A generic object.\n\n• The children of the generic object.\n\n• The bookmarks/embedded snapshots of the generic object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeBinnedData": {
          "description": "This method supports data binning.\nWhen a generic object with two or three measures and one dimension contains a lot of data, groups of points (for example, cells) can be rendered instead of points.\nA zone of interest can be refined (for zooming in) up to a maximum refinement level (set in the qQueryLevel parameter) or coarsened (for zoom out).\nThe grid of cells is adaptive (not static), meaning that it adapts to different length scales.\nThe GetHyperCubeBinnedData method gives information about the adaptive grid and the values of the generic object.\nThe number of points in a cell and the coordinates (expressed in the measure range) of each cell are returned.\nDimension values and measure values are rendered at point level (highest detailed level).\nThe generic object should contain two or three measures and one dimension. When the refinement is high, the first two measures are represented on the x-axis and on the y-axis, while the third measure is visualized as color or point size.\n\nAdaptive Grid:\n\nMore details about the properties of the adaptive grid are given in this paragraph.\nWhen the refinement is not the highest (cells are rendered), information about the adaptive grid is returned through several arrays.\nThe first array contains the following properties:\n\n  +-------------+--------------------------------+----------------------------+\n  |    NAME     |          DESCRIPTION           |            TYPE            |\n  +-------------+--------------------------------+----------------------------+\n  | qNum        | Maximum number of points that  | String                     |\n  |             | a cell can contain.            |                            |\n  | qElemNumber | Is set to 0.                   | Boolean                    |\n  | qState      | The default value is L.        | One of:   * L for Locked   |\n  |             |                                |  * S for Selected  *       |\n  |             |                                | O for Optional  * D        |\n  |             |                                | for Deselected  * A        |\n  |             |                                | for Alternative  * X       |\n  |             |                                | for eXcluded  * XS for     |\n  |             |                                | eXcluded Selected  * XL    |\n  |             |                                | for eXcluded Locked        |\n  +-------------+--------------------------------+----------------------------+\n\nThe next arrays give the coordinates of each cell in the page.\nEach array contains the following properties:\n\n  +-------------+--------------------------------+--------------------------------+\n  |    NAME     |          DESCRIPTION           |              TYPE              |\n  +-------------+--------------------------------+--------------------------------+\n  | qText       | Coordinates of a cell in       | String                         |\n  |             | the measure range.  “qText”:   |                                |\n  |             | “[[\u003cleft\u003e, \u003ctop\u003e, \u003cright\u003e,     |                                |\n  |             | \u003cbottom\u003e], [\u003cleft\u003e, \u003ctop\u003e,     |                                |\n  |             | \u003cright\u003e, \u003cbottom\u003e], ....       |                                |\n  |             | [\u003cleft\u003e, \u003ctop\u003e, \u003cright\u003e,       |                                |\n  |             | \u003cbottom\u003e]]  Where:  \u003c left     |                                |\n  |             | \u003e, \u003c top \u003e, \u003c right \u003e and \u003c    |                                |\n  |             | bottom \u003e are the coordinates   |                                |\n  |             | of the cell in the measure     |                                |\n  |             | range.                         |                                |\n  | qNum        | Number of points in the cell.  | Double precision floating      |\n  |             |                                | point                          |\n  | qElemNumber | Unique identifier for each     | Integer                        |\n  |             | cell, calculated by the engine |                                |\n  |             | during the construction of     |                                |\n  |             | the grid.  This element number |                                |\n  |             | is not stored in the database  |                                |\n  |             | and can have a positive or a   |                                |\n  |             | negative value.                |                                |\n  | qState      | The default value is L.        | One of:   * L for Locked       |\n  |             |                                |  * S for Selected  *           |\n  |             |                                | O for Optional  * D            |\n  |             |                                | for Deselected  * A            |\n  |             |                                | for Alternative  * X           |\n  |             |                                | for eXcluded  * XS for         |\n  |             |                                | eXcluded Selected  * XL        |\n  |             |                                | for eXcluded Locked            |\n  +-------------+--------------------------------+--------------------------------+\n\nCells are represented as rectangles.\n\nDimension values and measures values:\n\nMore details about the properties, when dimension and measure values are returned, are given in this paragraph.\nWhen the refinement is high, points are rendered (not cells) and dimension and measure values for each cell are returned.\nThe first array is empty because no information on the adaptive grid is needed.\nThe next arrays bring information about the dimension and the measure values.\n\n  +-------------+--------------------------------+--------------------------------+\n  |    NAME     |          DESCRIPTION           |              TYPE              |\n  +-------------+--------------------------------+--------------------------------+\n  | qText       | Text value of the dimension or | String                         |\n  |             | the measure.                   |                                |\n  | qNum        | Numerical value of the         | Double precision floating      |\n  |             | dimension or the measure.  Is  | point                          |\n  |             | set to 0 if the value is only  |                                |\n  |             | text.                          |                                |\n  | qElemNumber | Unique identifier for each     | Integer                        |\n  |             | cell, calculated by the engine |                                |\n  |             | during the construction of     |                                |\n  |             | the grid.  This element number |                                |\n  |             | is not stored in the database  |                                |\n  |             | and can have a positive or a   |                                |\n  |             | negative value.                |                                |\n  | qState      | The default value is L.        | One of:   * L for Locked       |\n  |             |                                |  * S for Selected  *           |\n  |             |                                | O for Optional  * D            |\n  |             |                                | for Deselected  * A            |\n  |             |                                | for Alternative  * X           |\n  |             |                                | for eXcluded  * XS for         |\n  |             |                                | eXcluded Selected  * XL        |\n  |             |                                | for eXcluded Locked            |\n  +-------------+--------------------------------+--------------------------------+\n\nParameters:\n\n◾ path            -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ pages           -   Array of pages to retrieve.\nSince the generic object contains two measures and one dimension, qWidth should be set to 3.\nIf the value of a measure is Null, the value cannot be rendered. Therefore, the number of elements rendered in a page can be less than the number defined in the property qHeight .\n\n◾ viewport        -   Defines the canvas and the zoom level.\nThis parameter is not yet used and is optional.\n\n◾ dataRanges      -   Range of the data to render.\nThis range applies to the measure values.\nThe lowest and highest values of a measure can be retrieved by using the GetLayout method (in /qHyperCube/qMeasureInfo ).\n\n◾ maxNbrCells     -   Maximum number of cells in the grid.\n\n◾ queryLevel      -   Level of details. The higher the level, the more detailed information you get (zoom-in).\nWhen the number of points to render falls below a certain threshold, the values are no longer rendered as cells but as points.\nThe query level should be no greater than 20.\n\n◾ binningMethod   -   Selects the algorithm.\nThe default value is 0.\nOne of:\n\n• 0: Adaptive grid\n\n• 1: Hexagonal grid\n\n• 2: Uniform grid",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPage"
              }
            },
            {
              "type": "#/definitions/NxViewPort"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxDataAreaPage"
              }
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxDataPage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeBinnedDataRaw": {
          "description": "This method supports data binning.\nWhen a generic object with two or three measures and one dimension contains a lot of data, groups of points (for example, cells) can be rendered instead of points.\nA zone of interest can be refined (for zooming in) up to a maximum refinement level (set in the qQueryLevel parameter) or coarsened (for zoom out).\nThe grid of cells is adaptive (not static), meaning that it adapts to different length scales.\nThe GetHyperCubeBinnedData method gives information about the adaptive grid and the values of the generic object.\nThe number of points in a cell and the coordinates (expressed in the measure range) of each cell are returned.\nDimension values and measure values are rendered at point level (highest detailed level).\nThe generic object should contain two or three measures and one dimension. When the refinement is high, the first two measures are represented on the x-axis and on the y-axis, while the third measure is visualized as color or point size.\n\nAdaptive Grid:\n\nMore details about the properties of the adaptive grid are given in this paragraph.\nWhen the refinement is not the highest (cells are rendered), information about the adaptive grid is returned through several arrays.\nThe first array contains the following properties:\n\n  +-------------+--------------------------------+----------------------------+\n  |    NAME     |          DESCRIPTION           |            TYPE            |\n  +-------------+--------------------------------+----------------------------+\n  | qNum        | Maximum number of points that  | String                     |\n  |             | a cell can contain.            |                            |\n  | qElemNumber | Is set to 0.                   | Boolean                    |\n  | qState      | The default value is L.        | One of:   * L for Locked   |\n  |             |                                |  * S for Selected  *       |\n  |             |                                | O for Optional  * D        |\n  |             |                                | for Deselected  * A        |\n  |             |                                | for Alternative  * X       |\n  |             |                                | for eXcluded  * XS for     |\n  |             |                                | eXcluded Selected  * XL    |\n  |             |                                | for eXcluded Locked        |\n  +-------------+--------------------------------+----------------------------+\n\nThe next arrays give the coordinates of each cell in the page.\nEach array contains the following properties:\n\n  +-------------+--------------------------------+--------------------------------+\n  |    NAME     |          DESCRIPTION           |              TYPE              |\n  +-------------+--------------------------------+--------------------------------+\n  | qText       | Coordinates of a cell in       | String                         |\n  |             | the measure range.  “qText”:   |                                |\n  |             | “[[\u003cleft\u003e, \u003ctop\u003e, \u003cright\u003e,     |                                |\n  |             | \u003cbottom\u003e], [\u003cleft\u003e, \u003ctop\u003e,     |                                |\n  |             | \u003cright\u003e, \u003cbottom\u003e], ....       |                                |\n  |             | [\u003cleft\u003e, \u003ctop\u003e, \u003cright\u003e,       |                                |\n  |             | \u003cbottom\u003e]]  Where:  \u003c left     |                                |\n  |             | \u003e, \u003c top \u003e, \u003c right \u003e and \u003c    |                                |\n  |             | bottom \u003e are the coordinates   |                                |\n  |             | of the cell in the measure     |                                |\n  |             | range.                         |                                |\n  | qNum        | Number of points in the cell.  | Double precision floating      |\n  |             |                                | point                          |\n  | qElemNumber | Unique identifier for each     | Integer                        |\n  |             | cell, calculated by the engine |                                |\n  |             | during the construction of     |                                |\n  |             | the grid.  This element number |                                |\n  |             | is not stored in the database  |                                |\n  |             | and can have a positive or a   |                                |\n  |             | negative value.                |                                |\n  | qState      | The default value is L.        | One of:   * L for Locked       |\n  |             |                                |  * S for Selected  *           |\n  |             |                                | O for Optional  * D            |\n  |             |                                | for Deselected  * A            |\n  |             |                                | for Alternative  * X           |\n  |             |                                | for eXcluded  * XS for         |\n  |             |                                | eXcluded Selected  * XL        |\n  |             |                                | for eXcluded Locked            |\n  +-------------+--------------------------------+--------------------------------+\n\nCells are represented as rectangles.\n\nDimension values and measures values:\n\nMore details about the properties, when dimension and measure values are returned, are given in this paragraph.\nWhen the refinement is high, points are rendered (not cells) and dimension and measure values for each cell are returned.\nThe first array is empty because no information on the adaptive grid is needed.\nThe next arrays bring information about the dimension and the measure values.\n\n  +-------------+--------------------------------+--------------------------------+\n  |    NAME     |          DESCRIPTION           |              TYPE              |\n  +-------------+--------------------------------+--------------------------------+\n  | qText       | Text value of the dimension or | String                         |\n  |             | the measure.                   |                                |\n  | qNum        | Numerical value of the         | Double precision floating      |\n  |             | dimension or the measure.  Is  | point                          |\n  |             | set to 0 if the value is only  |                                |\n  |             | text.                          |                                |\n  | qElemNumber | Unique identifier for each     | Integer                        |\n  |             | cell, calculated by the engine |                                |\n  |             | during the construction of     |                                |\n  |             | the grid.  This element number |                                |\n  |             | is not stored in the database  |                                |\n  |             | and can have a positive or a   |                                |\n  |             | negative value.                |                                |\n  | qState      | The default value is L.        | One of:   * L for Locked       |\n  |             |                                |  * S for Selected  *           |\n  |             |                                | O for Optional  * D            |\n  |             |                                | for Deselected  * A            |\n  |             |                                | for Alternative  * X           |\n  |             |                                | for eXcluded  * XS for         |\n  |             |                                | eXcluded Selected  * XL        |\n  |             |                                | for eXcluded Locked            |\n  +-------------+--------------------------------+--------------------------------+\n\nParameters:\n\n◾ path            -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ pages           -   Array of pages to retrieve.\nSince the generic object contains two measures and one dimension, qWidth should be set to 3.\nIf the value of a measure is Null, the value cannot be rendered. Therefore, the number of elements rendered in a page can be less than the number defined in the property qHeight .\n\n◾ viewport        -   Defines the canvas and the zoom level.\nThis parameter is not yet used and is optional.\n\n◾ dataRanges      -   Range of the data to render.\nThis range applies to the measure values.\nThe lowest and highest values of a measure can be retrieved by using the GetLayout method (in /qHyperCube/qMeasureInfo ).\n\n◾ maxNbrCells     -   Maximum number of cells in the grid.\n\n◾ queryLevel      -   Level of details. The higher the level, the more detailed information you get (zoom-in).\nWhen the number of points to render falls below a certain threshold, the values are no longer rendered as cells but as points.\nThe query level should be no greater than 20.\n\n◾ binningMethod   -   Selects the algorithm.\nThe default value is 0.\nOne of:\n\n• 0: Adaptive grid\n\n• 1: Hexagonal grid\n\n• 2: Uniform grid",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "interface"
            },
            {
              "type": "interface"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeContinuousData": {
          "description": "Retrieves and packs compressed hypercube and axis data. It is possible to retrieve specific pages of data.\nBinning is done on the time stamp data as well as the date. This means that you can zoom in to a level of granularity as low as seconds.\n\nParameters:\n\n◾ path          -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ options       -   Defines the data to return.\n\n◾ reverseSort   -   If set to true the returned data pages are reverse sorted.\nOptional.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/NxContinuousDataOptions"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxDataPage"
              }
            },
            {
              "type": "#/definitions/NxAxisData"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeContinuousDataRaw": {
          "description": "Retrieves and packs compressed hypercube and axis data. It is possible to retrieve specific pages of data.\nBinning is done on the time stamp data as well as the date. This means that you can zoom in to a level of granularity as low as seconds.\n\nParameters:\n\n◾ path          -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ options       -   Defines the data to return.\n\n◾ reverseSort   -   If set to true the returned data pages are reverse sorted.\nOptional.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeData": {
          "description": "Retrieves the calculated data for a chart, a table, or a scatter plot. It is possible to retrieve specific pages of data.\nThis method works for a hypercube in DATA_MODE_STRAIGHT.\n\nA data set is returned.\n\nParameters:\n\n◾ path    -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages   -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPage"
              }
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxDataPage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeDataRaw": {
          "description": "Retrieves the calculated data for a chart, a table, or a scatter plot. It is possible to retrieve specific pages of data.\nThis method works for a hypercube in DATA_MODE_STRAIGHT.\n\nA data set is returned.\n\nParameters:\n\n◾ path    -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages   -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubePivotData": {
          "description": "Retrieves the values of a pivot table. It is possible to retrieve specific pages of data.\nThis method works for a hypercube in DATA_MODE_PIVOT.\n\nParameters:\n\n◾ path    -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages   -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPage"
              }
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPivotPage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubePivotDataRaw": {
          "description": "Retrieves the values of a pivot table. It is possible to retrieve specific pages of data.\nThis method works for a hypercube in DATA_MODE_PIVOT.\n\nParameters:\n\n◾ path    -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages   -   Array of pages to retrieve.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeReducedData": {
          "description": "Reduces the data of a bar chart, a line chart or a scatter plot chart and retrieves them.\nThe reduction is dependent on the zoom factor (parameter qZoomFactor ) and on the reduction mode.\nThis method can be used to create mini charts.\n\nBar chart or line chart data reduction:\n\nFor the data reduction to happen, the following conditions must be fulfilled:\n\n• The values cannot fit in the defined page (parameter qPages ).\n\n• The zoom factor is not 0 (parameter qZoomFactor ).\n\n• The reduction mode must be set to D1.\n\nThe reduction algorithm keeps the shape of the visualizations and works whatever the number of dimensions in the chart. The global profile of the chart is reduced, and not only a specific dimension. A visualization that has been reduced contains fewer values but its shape is the same. Data of all types can be reduced. Therefore it is hard to relate the values before and after a reduction especially when reducing string values.\n\nExample:\n\nIf you have a chart with 1 million data, and you have set the zoom factor to 5, the GetHyperCubeReducedData method reduces the chart and retrieves 200 000 data.\n\nScatter plot chart data reduction:\n\nThe reduction mode must be set to C.\nThis reduction mechanism follows the 2D K-Means algorithm. Data are reduced into a number of clusters. Each data is assigned to a specific centroid.\nThe number of centroids can be defined in the parameter qZoomFactor.\n\nScatter plot chart resolution reduction:\n\nThe reduction mode must be set to S.\nThe resolution is reduced according to the zoom factor (parameter qZoomFactor ).\n\nExample:\n\nIf you have a scatter plot chart and the zoom factor is set to 2, the scatter plot chart resolution is reduced by 4.\n\nParameters:\n\n◾ path            -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages           -   Array of pages.\n\n◾ zoomFactor      -   Defines the zoom factor.\nIf set to -1, the engine decides of the zoom factor.\n\n• If the reduction mode is D1 or S , the zoom factor is 2ⁿ. If the zoom factor is 5, the data are reduced by a factor 32.\n\n• If the reduction mode is C , the zoom factor defines the number of centroids.\n\n◾ reductionMode   -   Defines the reduction mode.\n\nOne of:\n\n• N or DATA_REDUCTION_NONE\n\n• D1 or DATA_REDUCTION_ONEDIM\n\n• S or DATA_REDUCTION_SCATTERED\n\n• C or DATA_REDUCTION_CLUSTERED\n\n• ST or DATA_REDUCTION_STACKED",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPage"
              }
            },
            {
              "type": "int"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxDataPage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeReducedDataRaw": {
          "description": "Reduces the data of a bar chart, a line chart or a scatter plot chart and retrieves them.\nThe reduction is dependent on the zoom factor (parameter qZoomFactor ) and on the reduction mode.\nThis method can be used to create mini charts.\n\nBar chart or line chart data reduction:\n\nFor the data reduction to happen, the following conditions must be fulfilled:\n\n• The values cannot fit in the defined page (parameter qPages ).\n\n• The zoom factor is not 0 (parameter qZoomFactor ).\n\n• The reduction mode must be set to D1.\n\nThe reduction algorithm keeps the shape of the visualizations and works whatever the number of dimensions in the chart. The global profile of the chart is reduced, and not only a specific dimension. A visualization that has been reduced contains fewer values but its shape is the same. Data of all types can be reduced. Therefore it is hard to relate the values before and after a reduction especially when reducing string values.\n\nExample:\n\nIf you have a chart with 1 million data, and you have set the zoom factor to 5, the GetHyperCubeReducedData method reduces the chart and retrieves 200 000 data.\n\nScatter plot chart data reduction:\n\nThe reduction mode must be set to C.\nThis reduction mechanism follows the 2D K-Means algorithm. Data are reduced into a number of clusters. Each data is assigned to a specific centroid.\nThe number of centroids can be defined in the parameter qZoomFactor.\n\nScatter plot chart resolution reduction:\n\nThe reduction mode must be set to S.\nThe resolution is reduced according to the zoom factor (parameter qZoomFactor ).\n\nExample:\n\nIf you have a scatter plot chart and the zoom factor is set to 2, the scatter plot chart resolution is reduced by 4.\n\nParameters:\n\n◾ path            -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages           -   Array of pages.\n\n◾ zoomFactor      -   Defines the zoom factor.\nIf set to -1, the engine decides of the zoom factor.\n\n• If the reduction mode is D1 or S , the zoom factor is 2ⁿ. If the zoom factor is 5, the data are reduced by a factor 32.\n\n• If the reduction mode is C , the zoom factor defines the number of centroids.\n\n◾ reductionMode   -   Defines the reduction mode.\n\nOne of:\n\n• N or DATA_REDUCTION_NONE\n\n• D1 or DATA_REDUCTION_ONEDIM\n\n• S or DATA_REDUCTION_SCATTERED\n\n• C or DATA_REDUCTION_CLUSTERED\n\n• ST or DATA_REDUCTION_STACKED",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "int"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeStackData": {
          "description": "Retrieves the values of a stacked pivot table. It is possible to retrieve specific pages of data.\nThis method works for a hypercube in DATA_MODE_PIVOT_STACK.\n\nParameters:\n\n◾ path          -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages         -   Array of pages to retrieve.\n\n◾ maxNbrCells   -   Maximum number of cells at outer level.\nThe default value is 10 000.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPage"
              }
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxStackPage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeStackDataRaw": {
          "description": "Retrieves the values of a stacked pivot table. It is possible to retrieve specific pages of data.\nThis method works for a hypercube in DATA_MODE_PIVOT_STACK.\n\nParameters:\n\n◾ path          -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ pages         -   Array of pages to retrieve.\n\n◾ maxNbrCells   -   Maximum number of cells at outer level.\nThe default value is 10 000.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeTreeData": {
          "description": "Retrieves data for nodes in a tree structure. It is possible to retrieve specific pages of data.\nThis method works for a treedata object or a hypercube in DATA_MODE_TREE.\n\nParameters:\n\n◾ path          -   Path to the definition of the object to be selected.\n\n◾ nodeOptions   -   Specifies all the paging filters needed to define the tree to be fetched. If left out the complete tree is returned.",
          "x-qlik-stability": "stable",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/NxTreeDataOption"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxTreeNode"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetHyperCubeTreeDataRaw": {
          "description": "Retrieves data for nodes in a tree structure. It is possible to retrieve specific pages of data.\nThis method works for a treedata object or a hypercube in DATA_MODE_TREE.\n\nParameters:\n\n◾ path          -   Path to the definition of the object to be selected.\n\n◾ nodeOptions   -   Specifies all the paging filters needed to define the tree to be fetched. If left out the complete tree is returned.",
          "x-qlik-stability": "stable",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfo": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfoRaw": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayout": {
          "description": "Evaluates an object and displays its properties including the dynamic properties.\nIf the member delta is set to true in the request object, only the delta is evaluated. A GetLayout call on a generic object, returns up to one level down in the hierarchy.\n\nExample::\n\n_A_ is a generic object and is the parent of the objects B and C. B is the parent of the objects D and E.\n\n![](images/dr_gen_QVCPMethodGetLayoutHierarchy.png)\n\nA GetLayout call on A returns information on the objects A, B and C.\nA GetLayout call on B returns information on the objects B, D and E.\nA  GetLayout call on C returns information on the object C.\n\nIn addition to the parameters displayed above, the GetLayout method can return other properties according to what is defined in the generic object.\nFor example, if qHyperCubeDef is defined in the generic object, the GetLayout method returns the properties described in HyperCube.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObjectLayout"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayoutRaw": {
          "description": "Evaluates an object and displays its properties including the dynamic properties.\nIf the member delta is set to true in the request object, only the delta is evaluated. A GetLayout call on a generic object, returns up to one level down in the hierarchy.\n\nExample::\n\n_A_ is a generic object and is the parent of the objects B and C. B is the parent of the objects D and E.\n\n![](images/dr_gen_QVCPMethodGetLayoutHierarchy.png)\n\nA GetLayout call on A returns information on the objects A, B and C.\nA GetLayout call on B returns information on the objects B, D and E.\nA  GetLayout call on C returns information on the object C.\n\nIn addition to the parameters displayed above, the GetLayout method can return other properties according to what is defined in the generic object.\nFor example, if qHyperCubeDef is defined in the generic object, the GetLayout method returns the properties described in HyperCube.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLinkedObjects": {
          "description": "Lists the linked objects to a generic object, a dimension or a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxLinkedObjectInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLinkedObjectsRaw": {
          "description": "Lists the linked objects to a generic object, a dimension or a measure.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetListObjectData": {
          "description": "Retrieves the values of a list object.\nA data set is returned.\n\nParameters:\n\n◾ path    -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ pages   -   Array of pages you are interested in.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPage"
              }
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxDataPage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetListObjectDataRaw": {
          "description": "Retrieves the values of a list object.\nA data set is returned.\n\nParameters:\n\n◾ path    -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ pages   -   Array of pages you are interested in.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetParent": {
          "description": "Returns the type of the object and the corresponding handle to the parent object in the hiearchy.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProperties": {
          "description": "Returns the identifier, the type and the properties of the object.\nBecause it is not mandatory to set all properties when you define an object, the GetProperties method may show properties that were not set. In that case, default values are given.\nIf the object contains some soft properties, the soft properties are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.\nIf the object is linked to another object, the properties of the linking object are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.\nThe properties depends on the generic object type, see [properties](genericobject-layout.html).\n\nIf the member delta is set to true in the request object, only the delta is retrieved.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObjectProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetPropertiesRaw": {
          "description": "Returns the identifier, the type and the properties of the object.\nBecause it is not mandatory to set all properties when you define an object, the GetProperties method may show properties that were not set. In that case, default values are given.\nIf the object contains some soft properties, the soft properties are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.\nIf the object is linked to another object, the properties of the linking object are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.\nThe properties depends on the generic object type, see [properties](genericobject-layout.html).\n\nIf the member delta is set to true in the request object, only the delta is retrieved.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetSnapshotObject": {
          "description": "Returns the type of the object and the corresponding handle.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericObject"
            },
            {
              "type": "error"
            }
          ]
        },
        "Lock": {
          "description": "Locks the selected values of a generic object.\n\nParameters:\n\n◾ path         -   Path to the definition of the object.\nFor example, /qListObjectDef .\n\n◾ colIndices   -   Dimension numbers or dimension indexes where the lock should apply.\nDimension numbers/indexes start from 0.\nIf this parameter is not set, the selected values in all dimensions are locked.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "MultiRangeSelectHyperCubeValues": {
          "description": "Makes multiple range selections in measures.\nThis method applies to hypercubes. For example, bar charts, tables and scatter plots.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ ranges                    -   Ranges of selections.\n\n◾ orMode                    -   Applies to hypercubes with multiple measures.\nIf set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.\nIf set to false, it means that all measures must be in the range of selections for the group of measures to be selected.\nThe default value is false.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxMultiRangeSelectInfo"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "MultiRangeSelectHyperCubeValuesRaw": {
          "description": "Makes multiple range selections in measures.\nThis method applies to hypercubes. For example, bar charts, tables and scatter plots.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ ranges                    -   Ranges of selections.\n\n◾ orMode                    -   Applies to hypercubes with multiple measures.\nIf set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.\nIf set to false, it means that all measures must be in the range of selections for the group of measures to be selected.\nThe default value is false.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "MultiRangeSelectTreeDataValues": {
          "x-qlik-stability": "stable",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxTreeMultiRangeSelectInfo"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "MultiRangeSelectTreeDataValuesRaw": {
          "x-qlik-stability": "stable",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "Publish": {
          "description": "Publishes a generic object.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "RangeSelectHyperCubeValues": {
          "description": "Makes range selections in measures.\nThis method applies to hypercubes. For example, bar charts, tables and scatter plots.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ ranges                    -   Ranges of selections.\n\n◾ columnsToSelect           -   Indicates which dimensions to select.\nThe dimensions numbering starts at 0 (first dimension is 0).\nIf the array is empty, all dimensions are selected.\n\n◾ orMode                    -   Applies to hypercubes with multiple measures.\nIf set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.\nIf set to false, it means that all measures must be in the range of selections for the group of measures to be selected.\nThe default value is false.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxRangeSelectInfo"
              }
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "RangeSelectHyperCubeValuesRaw": {
          "description": "Makes range selections in measures.\nThis method applies to hypercubes. For example, bar charts, tables and scatter plots.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ ranges                    -   Ranges of selections.\n\n◾ columnsToSelect           -   Indicates which dimensions to select.\nThe dimensions numbering starts at 0 (first dimension is 0).\nIf the array is empty, all dimensions are selected.\n\n◾ orMode                    -   Applies to hypercubes with multiple measures.\nIf set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.\nIf set to false, it means that all measures must be in the range of selections for the group of measures to be selected.\nThe default value is false.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "ResetMadeSelections": {
          "description": "Resets all selections made in selection mode.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SearchListObjectFor": {
          "description": "Searches for a string in a list object.\nThis method applies to list objects (objects with one dimension).\nThe search results can be displayed using the GetLayout Method.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ path    -   Path to the definition of the list object.\nFor example, /qListObjectDef .\n\n◾ match   -   Search string.\nWild card characters are allowed. The search is not case sensitive.\nExamples:\n\n• P*U*: retrieves only values that start with P and contain U\n\n• P U S: retrieves values that start with P, U or S",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectHyperCubeCells": {
          "description": "Makes selections in multiple dimensions and measures.\nThis method applies to hypercubes, such as bar charts, tables and scatter plots.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ rowIndices                -   Array of row indexes to select, starting from 0.\nIf the array is empty [ ] , all rows are selected.\n\n◾ colIndices                -   Indexes of the columns to select, starting from 0.\nA column corresponds to a dimension in the order they are added to the hypercube.\nIf a column is hidden it is ignored, qColIndex n refers to the n:th visible column (starting from zero).\nExample:\nIf the hypercube has two dimensions:\n\n• [0] selects the first column (i.e the first dimension).\n\n• [1] selects the second column (i.e the second dimension).\n\nIf the array is empty [ ] , all columns are selected.\n\n◾ softLock                  -   Set to true to ignore locks; in that case, locked fields can be selected.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectHyperCubeContinuousRange": {
          "description": "The following is returned in the output:\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ path       -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ ranges     -   Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.\nIf either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxContinuousRangeSelectInfo"
              }
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectHyperCubeContinuousRangeRaw": {
          "description": "The following is returned in the output:\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ path       -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ ranges     -   Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.\nIf either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectHyperCubeValues": {
          "description": "Selects some values in one dimension.\nThe values are identified by their element numbers.\nThis method applies to charts, tables and scatter plots.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path         -   Path to the definition of the object to be selected.\nFor example, /qHyperCubeDef .\n\n◾ dimNo        -   Dimension number or index to select.\nDimension numbers/index start from 0.\n\n◾ values       -   Element numbers of the field to select.\nYou can select multiple elements; the separator is the comma.\n\n◾ toggleMode   -   Set to true to toggle.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "int"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectAll": {
          "description": "Selects all values of a field.\nThis method applies to list objects (objects with one dimension).\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path       -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectAlternative": {
          "description": "Selects all alternative values in a specific field.\nThis method applies to list objects (objects with one dimension).\nIf a field contains at least one selected value, the values that are neither selected nor excluded are alternatives values.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path       -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectContinuousRange": {
          "description": "The following is returned in the output:\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ path       -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ ranges     -   Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.\nIf either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/Range"
              }
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectContinuousRangeRaw": {
          "description": "The following is returned in the output:\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ path       -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ ranges     -   Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.\nIf either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectExcluded": {
          "description": "Inverts the current selections in a specific field.\nThis method applies to list objects (objects with one dimension).\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path       -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectPossible": {
          "description": "Selects all possible values of a list object.\nThis method applies to list objects (objects with one dimension).\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path       -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ softLock   -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectListObjectValues": {
          "description": "Makes single selections in dimensions.\nThis method applies to list objects only.\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path         -   Path to the definition of the object to be selected.\nFor example, /qListObjectDef .\n\n◾ values       -   Element numbers to select.\nYou can select multiple values; the separator is the comma.\n\n◾ toggleMode   -   Set to true to toggle.\n\n◾ softLock     -   Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectPivotCells": {
          "description": "This method only applies to hypercubes that are not represented as straight tables. The parameter qMode in HyperCubeDef must be set either to P  or K .\n\nPivot table:\n\nMakes selections in the top or left dimension cells of a pivot table or in the data matrix. Only expanded dimensions can be selected.\n\nStacked table:\n\nMakes selections in the left dimension cells of a stacked table or in the data matrix.\nThere is no top dimensions in a stacked table. A stacked table can only contain one measure.\n\nExample of a pivot table:\n\n![](images/ui_gen_ExampleQVCPPivotTableDescription.png)\n\nIn the representation above:\n\n  +-------------------+--------------------------------+\n  | Sum(OrderTotal)   | Are pseudo dimensions.         |\n  | Count(OrderTotal) |                                |\n  | CategoryName      | Is a left dimension.           |\n  |                   | Beverages , Condiments ... are |\n  |                   | left dimension values.         |\n  | ProductName       | Is a top dimension.  Chef      |\n  |                   | Anton's Cajun Seasoning is a   |\n  |                   | top dimension value.           |\n  | Numeric values    | Are calculated values in the   |\n  |                   | data matrix.  626291,832 is a  |\n  |                   | calculated value.              |\n  +-------------------+--------------------------------+\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ selections                -   Information about the selections to perform.\n\n◾ softLock                  -   Set to true to ignore locks; in that case, locked fields can be selected.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxSelectionCell"
              }
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SelectPivotCellsRaw": {
          "description": "This method only applies to hypercubes that are not represented as straight tables. The parameter qMode in HyperCubeDef must be set either to P  or K .\n\nPivot table:\n\nMakes selections in the top or left dimension cells of a pivot table or in the data matrix. Only expanded dimensions can be selected.\n\nStacked table:\n\nMakes selections in the left dimension cells of a stacked table or in the data matrix.\nThere is no top dimensions in a stacked table. A stacked table can only contain one measure.\n\nExample of a pivot table:\n\n![](images/ui_gen_ExampleQVCPPivotTableDescription.png)\n\nIn the representation above:\n\n  +-------------------+--------------------------------+\n  | Sum(OrderTotal)   | Are pseudo dimensions.         |\n  | Count(OrderTotal) |                                |\n  | CategoryName      | Is a left dimension.           |\n  |                   | Beverages , Condiments ... are |\n  |                   | left dimension values.         |\n  | ProductName       | Is a top dimension.  Chef      |\n  |                   | Anton's Cajun Seasoning is a   |\n  |                   | top dimension value.           |\n  | Numeric values    | Are calculated values in the   |\n  |                   | data matrix.  626291,832 is a  |\n  |                   | calculated value.              |\n  +-------------------+--------------------------------+\n\nThe member Change returns the handles of the objects that are updated following the selections.\n_qSuccess_ is set to true if the selections are successful and is set to false in the following cases:\n\n• The object contains some invalid fields (fields that are not in the data model).\n\n• The selection applies to a locked field.\n\n• A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.\n\nParameters:\n\n◾ path                      -   Path to the definition of the object.\nFor example, /qHyperCubeDef .\n\n◾ selections                -   Information about the selections to perform.\n\n◾ softLock                  -   Set to true to ignore locks; in that case, locked fields can be selected.\n\n◾ deselectOnlyOneSelected   -   Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "interface"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SetChildArrayOrder": {
          "description": "Sets the order of the children in a generic object.\nTo change the order of the children in a generic object, the identifiers of all the children must be included in the list of the identifiers (in qIds ).\n\nParameters:\n\n◾ ids   -   List of the children identifiers.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetFullPropertyTree": {
          "description": "Sets the properties of:\n\n• A generic object.\n\n• The children of the generic object.\n\n• The bookmarks/embedded snapshots of the generic object.\n\nIf the SetFullPropertyTree method is asked to set some properties to a child that does not exist, it creates the child.\nThe type of an object cannot be updated.\n\nParameters:\n\n◾ propEntry   -   Information about the generic object entry.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericObjectEntry"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetFullPropertyTreeRaw": {
          "description": "Sets the properties of:\n\n• A generic object.\n\n• The children of the generic object.\n\n• The bookmarks/embedded snapshots of the generic object.\n\nIf the SetFullPropertyTree method is asked to set some properties to a child that does not exist, it creates the child.\nThe type of an object cannot be updated.\n\nParameters:\n\n◾ propEntry   -   Information about the generic object entry.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetProperties": {
          "description": "Sets some properties for a generic object.\nThe properties depends on the generic object type, see [properties](genericobject-property.html).\n\nParameters:\n\n◾ prop   -   Information about the generic object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericObjectProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetPropertiesRaw": {
          "description": "Sets some properties for a generic object.\nThe properties depends on the generic object type, see [properties](genericobject-property.html).\n\nParameters:\n\n◾ prop   -   Information about the generic object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnApprove": {
          "description": "Removes the generic object from the list of approved objects\nThis operation is possible only in Qlik Sense Enterprise.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "UnPublish": {
          "description": "Unpublishes a generic object.\nThis operation is not applicable for Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "Unlock": {
          "description": "Unlocks the selected values of a generic object if the target (or handle ) is a generic object\n\nParameters:\n\n◾ path         -   Path to the definition of the object.\nFor example, /qListObjectDef .\n\n◾ colIndices   -   Dimension numbers/indexes where the unlock should apply.\nDimension numbers/indexes start from 0.\nIf this parameter is not set, the locked values in all dimensions are unlocked.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "int"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "GenericObjectEntry": {
      "type": "struct",
      "entries": {
        "Children": {
          "description": "Information about the children of the generic object.",
          "type": "slice",
          "items": {
            "type": "#/definitions/GenericObjectEntry"
          }
        },
        "EmbeddedSnapshotRef": {
          "description": "Reference to a bookmark/snapshot that is embedded in the generic object.",
          "type": "#/definitions/GenericBookmarkEntry"
        },
        "Property": {
          "description": "Information about the generic object properties.",
          "type": "#/definitions/GenericObjectProperties"
        }
      }
    },
    "GenericObjectLayout": {
      "description": "Is the layout for GenericObjectProperties.",
      "type": "struct",
      "entries": {
        "AppObjectList": {
          "type": "#/definitions/AppObjectList"
        },
        "BookmarkList": {
          "type": "#/definitions/BookmarkList"
        },
        "ChildList": {
          "type": "#/definitions/ChildList"
        },
        "DimensionList": {
          "type": "#/definitions/DimensionList"
        },
        "EmbeddedSnapshot": {
          "type": "#/definitions/EmbeddedSnapshot"
        },
        "Error": {
          "description": "Gives information on the error.\nThis parameter is optional.",
          "type": "#/definitions/NxLayoutErrors"
        },
        "ExtendsId": {
          "description": "Should be set to create an object that is linked to another object. Enter the identifier of the object you want to link to.\nIf you do not want to link your object, set this parameter to an empty string.",
          "type": "string"
        },
        "ExtensionList": {
          "type": "#/definitions/ExtensionList"
        },
        "FieldList": {
          "type": "#/definitions/FieldList"
        },
        "HasSoftPatches": {
          "description": "Is set to true if the generic object contains some properties that are not persistent (a soft patch was applied).",
          "type": "bool"
        },
        "HyperCube": {
          "type": "#/definitions/HyperCube"
        },
        "Info": {
          "description": "Identifier and type of the generic object.",
          "type": "#/definitions/NxInfo"
        },
        "ListObject": {
          "type": "#/definitions/ListObject"
        },
        "MeasureList": {
          "type": "#/definitions/MeasureList"
        },
        "MediaList": {
          "type": "#/definitions/MediaList"
        },
        "Meta": {
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "type": "#/definitions/NxMeta"
        },
        "NxLibraryDimension": {
          "type": "#/definitions/NxLibraryDimension"
        },
        "NxLibraryMeasure": {
          "type": "#/definitions/NxLibraryMeasure"
        },
        "SelectionInfo": {
          "description": "Information about the selections.",
          "type": "#/definitions/NxSelectionInfo"
        },
        "SelectionObject": {
          "type": "#/definitions/SelectionObject"
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        },
        "StaticContentUrl": {
          "type": "#/definitions/StaticContentUrl"
        },
        "TreeData": {
          "type": "#/definitions/TreeData"
        },
        "UndoInfo": {
          "type": "#/definitions/UndoInfo"
        },
        "VariableList": {
          "type": "#/definitions/VariableList"
        }
      }
    },
    "GenericObjectProperties": {
      "type": "struct",
      "entries": {
        "AppObjectListDef": {
          "type": "#/definitions/AppObjectListDef"
        },
        "BookmarkListDef": {
          "type": "#/definitions/BookmarkListDef"
        },
        "ChildListDef": {
          "type": "#/definitions/ChildListDef"
        },
        "DimensionListDef": {
          "type": "#/definitions/DimensionListDef"
        },
        "EmbeddedSnapshotDef": {
          "type": "#/definitions/EmbeddedSnapshotDef"
        },
        "ExtendsId": {
          "description": "Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).\nIf you do not want to link your object, set this parameter to an empty string.",
          "type": "string"
        },
        "ExtensionListDef": {
          "type": "#/definitions/ExtensionListDef"
        },
        "FieldListDef": {
          "type": "#/definitions/FieldListDef"
        },
        "HyperCubeDef": {
          "type": "#/definitions/HyperCubeDef"
        },
        "Info": {
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "LayoutExclude": {
          "type": "#/definitions/LayoutExclude"
        },
        "ListObjectDef": {
          "type": "#/definitions/ListObjectDef"
        },
        "MeasureListDef": {
          "type": "#/definitions/MeasureListDef"
        },
        "MediaListDef": {
          "type": "#/definitions/MediaListDef"
        },
        "MetaDef": {
          "description": "Definition of the dynamic properties.",
          "type": "#/definitions/NxMetaDef"
        },
        "NxLibraryDimensionDef": {
          "type": "#/definitions/NxLibraryDimensionDef"
        },
        "NxLibraryMeasureDef": {
          "type": "#/definitions/NxLibraryMeasureDef"
        },
        "SelectionObjectDef": {
          "type": "#/definitions/SelectionObjectDef"
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        },
        "StaticContentUrlDef": {
          "type": "#/definitions/StaticContentUrlDef"
        },
        "StringExpression": {
          "type": "#/definitions/StringExpression"
        },
        "TreeDataDef": {
          "type": "#/definitions/TreeDataDef"
        },
        "UndoInfoDef": {
          "type": "#/definitions/UndoInfoDef"
        },
        "ValueExpression": {
          "type": "#/definitions/ValueExpression"
        },
        "VariableListDef": {
          "type": "#/definitions/VariableListDef"
        }
      }
    },
    "GenericVariable": {
      "type": "struct",
      "entries": {
        "ApplyPatches": {
          "description": "Applies a patch to the properties of a variable. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxPatch"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ApplyPatchesRaw": {
          "description": "Applies a patch to the properties of a variable. Allows an update to some of the properties.\nApplying a patch takes less time than resetting all the properties.\n\nParameters:\n\n◾ patches   -   Array of patches.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "GetInfo": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxInfo"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInfoRaw": {
          "description": "Returns the type and identifier of the object.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayout": {
          "description": "Evaluates an object and displays its properties including the dynamic properties.\nIf the member delta is set to true in the request object, only the delta is evaluated.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericVariableLayout"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLayoutRaw": {
          "description": "Evaluates an object and displays its properties including the dynamic properties.\nIf the member delta is set to true in the request object, only the delta is evaluated.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProperties": {
          "description": "Shows the properties of an object.\nIf the member delta is set to true in the request, only the delta is retrieved.\n\nThe following is always returned in the output:",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/GenericVariableProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetPropertiesRaw": {
          "description": "Shows the properties of an object.\nIf the member delta is set to true in the request, only the delta is retrieved.\n\nThe following is always returned in the output:",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetRawContent": {
          "description": "Returns the raw value of a variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "SetDualValue": {
          "description": "Sets the value of a dual variable.\nThese changes are not persistent. They only last the duration of the engine session.\n\nParameters:\n\n◾ text   -   String representation of a dual value. Set this parameter to \"\", if the string representation is to be Null.\n\n◾ num    -   Numeric representation of a dual value.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/Float64"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetNumValue": {
          "description": "Sets a numerical value to a variable.\nThese changes are not persistent. They only last the duration of the engine session.\n\nParameters:\n\n◾ val   -   Value of the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/Float64"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetProperties": {
          "description": "Sets some properties for a variable.\nThe identifier of a variable cannot be modified.\nYou cannot update the properties of a script-defined variable using the SetProperties method.\n\nParameters:\n\n◾ prop   -   Information about the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/GenericVariableProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetPropertiesRaw": {
          "description": "Sets some properties for a variable.\nThe identifier of a variable cannot be modified.\nYou cannot update the properties of a script-defined variable using the SetProperties method.\n\nParameters:\n\n◾ prop   -   Information about the variable.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetStringValue": {
          "description": "Sets a string value to a variable.\nThese changes are not persistent. They only last the duration of the engine session.\n\nParameters:\n\n◾ val   -   Value of the variable. The string can contain an expression.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "GenericVariableLayout": {
      "description": "Is the layout for GenericVariableProperties.",
      "type": "struct",
      "entries": {
        "Info": {
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "IsScriptCreated": {
          "description": "If set to true, it means that the variable was defined via script.",
          "type": "bool"
        },
        "Meta": {
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "type": "#/definitions/NxMeta"
        },
        "Num": {
          "description": "A value.",
          "type": "#/definitions/Float64"
        },
        "Text": {
          "description": "Some text.",
          "type": "string"
        }
      }
    },
    "GenericVariableProperties": {
      "type": "struct",
      "entries": {
        "Comment": {
          "description": "Comment related to the variable.\nThis parameter is optional.",
          "type": "string"
        },
        "Definition": {
          "description": "Definition of the variable.",
          "type": "string"
        },
        "IncludeInBookmark": {
          "description": "Set this property to true to update the variable when applying a bookmark. The variable value will be persisted in the bookmark.\nThe value of a variable can affect the state of the selections.\nScript variables cannot be persisted in the bookmark.\nThe default value is false.",
          "type": "bool"
        },
        "Info": {
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "MetaDef": {
          "description": "Meta data.",
          "type": "#/definitions/NxMetaDef"
        },
        "Name": {
          "description": "Name of the variable.\nThe name must be unique.\nThis parameter is mandatory.",
          "type": "string"
        },
        "NumberPresentation": {
          "description": "Defines the format of the value.\nThis parameter is optional.",
          "type": "#/definitions/FieldAttributes"
        }
      }
    },
    "Global": {
      "type": "struct",
      "entries": {
        "AbortAll": {
          "description": "Sets an abort flag on all pending and ongoing requests in the current engine session.\n\n• If an abort flag is set on a pending request, the request is aborted.\n\n• If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "AbortRequest": {
          "description": "Sets an abort flag on a specific request in the current engine session.\n\n• If an abort flag is set on a pending request, the request is aborted.\n\n• If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.\n\nParameters:\n\n◾ requestId   -   Identifier of request to abort.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "AllowCreateApp": {
          "description": "Indicates whether or not a user is able to create an app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "CancelReload": {
          "description": "Cancels an ongoing reload. The reload of the app is stopped. The indexation can be canceled and true is still the return value of the reload task.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CancelRequest": {
          "description": "Cancels an ongoing request. The request is stopped.\n\nParameters:\n\n◾ requestId   -   Identifier of the request to stop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ConfigureReload": {
          "description": "Configures the engine's behavior during a reload.\nThe ConfigureReload method should be run before the DoReload method.\n\nParameters:\n\n◾ cancelOnScriptError   -   If set to true, the script execution is halted on error.\nOtherwise, the engine continues the script execution.\nThis parameter is relevant only if the variable ErrorMode is set to 1.\n\n◾ useErrorData          -   If set to true, any script execution error is returned in qErrorData by the GetProgress method.\n\n◾ interactOnError       -   If set to true, the script execution is halted on error and the engine is waiting for an interaction to be performed. If the result from the interaction is 1 (_qDef.qResult_ is 1), the engine continues the script execution otherwise the execution is halted.\nThis parameter is relevant only if the variable ErrorMode is set to 1 and the script is run in debug mode (_qDebug_ is set to true when calling the DoReload method).",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "CopyApp": {
          "description": "Copies an app that is in the Qlik Sense repository.\nThe engine copies the app into an app entity that was previously created by the repository. See the [Qlik Sense Repository Service API](\n\ncsh-RepositoryServiceAPI-Introduction) for more information.:\n\nThis operation is possible only in Qlik Sense Enterprise.\n\nParameters:\n\n◾ targetAppId   -   Identifier (GUID) of the app entity in the Qlik Sense repository.\nThe app entity must have been previously created by the Qlik Sense Repository Service (QRS) API.\n\n◾ srcAppId      -   Identifier (GUID) of the source app in the Qlik Sense repository.\n\n◾ ids           -   Array of QRS identifiers.\nThe list of all objects in the app to be copied must be given. This list must contain the GUIDs of all these objects.\nIf the list of the QRS identifiers is empty, the CopyApp method copies all objects to the target app.\nScript-defined variables are automatically copied when copying an app. To be able to copy variables not created via script, the GUID of each variable must be provided in the list of QRS identifiers.\nTo get the QRS identifiers of the objects in an app, you can use the QRS API. The GET method (from the QRS API) returns the identifiers of the objects in the app.\nThe following example returns the QRS identifiers of all the objects in a specified app:\nGET /qrs/app/9c3f8634-6191-4a34-a114-a39102058d13\nWhere\n_9c3f8634-6191-4a34-a114-a39102058d13_ is the identifier of the app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateApp": {
          "description": "Creates an app.\n\nThe operation is successful if qSuccess is set to true.\n\nLogs:\n\nWhen this method is called, audit activity logs are produced to track the user activity.\nIn the case of errors, both audit activity logs and system services logs are produced.\nThe log files are named as follows:\n\n  +----------------------------------------+---------------------------------+\n  |           AUDIT ACTIVITY LOG           |       SYSTEM SERVICE LOG        |\n  +----------------------------------------+---------------------------------+\n  | \u003cMachineName\u003e_AuditActivity_Engine.txt | \u003cMachineName\u003e_ServiceEngine.txt |\n  | in Qlik Sense Enterprise               | in Qlik Sense Enterprise        |\n  | \u003cMachineName\u003e_AuditActivity_Engine.log | \u003cMachineName\u003e_ServiceEngine.log |\n  | in Qlik Sense Desktop                  | in Qlik Sense Desktop           |\n  +----------------------------------------+---------------------------------+\n\nWhere to find the log files:\n\nThe location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.\n\n  +-------------------------------------+----------------------------------------+\n  |        QLIK SENSE ENTERPRISE        |           QLIK SENSE DESKTOP           |\n  +-------------------------------------+----------------------------------------+\n  | %ProgramData%/Qlik/Sense/Log/Engine | %UserProfile%/Documents/Qlik/Sense/Log |\n  +-------------------------------------+----------------------------------------+\n\nParameters:\n\n◾ appName                      -   Name of the app.\n\n◾ localizedScriptMainSection   -   Name of the first section in the script editor.\nThe default value is Main.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateDocEx": {
          "description": "Creates an app and opens an engine session.\nThis operation is possible only in Qlik Sense Desktop.\n\nParameters:\n\n◾ docName                      -   Name of the app.\n\n◾ userName                     -   Name of the user.\n\n◾ password                     -   Password of the user.\n\n◾ serial                       -   Current Qlik Sense serial number.\n\n◾ localizedScriptMainSection   -   Name of the first section in the script editor.\nThe default value is Main.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Doc"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateSessionApp": {
          "description": "Creates an empty session app.\nThe following applies:\n\n• The name of a session app cannot be chosen. The engine automatically assigns a unique identifier to the session app.\n\n• A session app is not persisted and cannot be saved. Everything created during a session app is non-persisted; for example: objects, data connections.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Doc"
            },
            {
              "type": "error"
            }
          ]
        },
        "CreateSessionAppFromApp": {
          "description": "Creates a session app from a source app.\nThe following applies:\n\n• The objects in the source app are copied into the session app but contain no data.\n\n• The script of the session app can be edited and reloaded.\n\n• The name of a session app cannot be chosen. The engine automatically assigns a unique identifier to the session app.\n\n• A session app is not persisted and cannot be saved. Everything created during a session app is non-persisted; for example: objects, data connections.\n\nParameters:\n\n◾ srcAppId   -   App identifier of the source app.\nIt corresponds to qAppId returned by the CreateApp method when creating the source app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Doc"
            },
            {
              "type": "error"
            }
          ]
        },
        "DeleteApp": {
          "description": "Deletes an app from the Qlik Sense repository or from the file system.\n\nQlik Sense Enterprise:\n\nIn addition to being removed from the repository, the app is removed from the directory as well:\n\n•\u003cinstallation_directory\u003e\\Qlik\\Sense\\Apps*\nThe default installation directory is ProgramData.\n\nQlik Sense Desktop:\n\nThe app is deleted from the directory %userprofile%\\Documents\\Qlik\\ \\Apps.\n\nThe operation is successful if qSuccess is set to true.\n\nLogs:\n\nWhen this method is called, audit activity logs are produced to track the user activity.\nIn the case of errors, both audit activity logs and system services logs are produced.\nThe log files are named as follows:\n\n  +--------------------------------------+--------------------------------+\n  |          AUDIT ACTIVITY LOG          |       SYSTEM SERVICE LOG       |\n  +--------------------------------------+--------------------------------+\n  | \u003cMachineName\u003eAuditActivityEngine.txt | \u003cMachineName\u003eServiceEngine.txt |\n  | in Qlik Sense Enterprise             | in Qlik Sense Enterprise       |\n  | \u003cMachineName\u003eAuditActivityEngine.log | \u003cMachineName\u003eServiceEngine.log |\n  | in Qlik Sense Desktop                | in Qlik Sense Desktop          |\n  +--------------------------------------+--------------------------------+\n\nWhere to find the log files:\n\nThe location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.\n\n  +-------------------------------------+----------------------------------------+\n  |        QLIK SENSE ENTERPRISE        |           QLIK SENSE DESKTOP           |\n  +-------------------------------------+----------------------------------------+\n  | %ProgramData%/Qlik/Sense/Log/Engine | %UserProfile%/Documents/Qlik/Sense/Log |\n  +-------------------------------------+----------------------------------------+\n\nParameters:\n\n◾ appId   -   Identifier of the app to delete.\nIn Qlik Sense Enterprise, the identifier of the app is a GUID in the Qlik Sense repository.\nIn Qlik Sense Desktop, the identifier of the app is the name of the app, as defined in the apps folder %userprofile%\\Documents\\Qlik\\Sense\\Apps.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "EngineVersion": {
          "description": "Returns the version number of the Qlik engine component.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxEngineVersion"
            },
            {
              "type": "error"
            }
          ]
        },
        "EngineVersionRaw": {
          "description": "Returns the version number of the Qlik engine component.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "ExportApp": {
          "description": "Exports an app from the Qlik Sense repository to the file system.\nThis operation is possible only in Qlik Sense Enterprise.\n\nThe operation is successful if qSuccess is set to true.\n\nLogs:\n\nWhen this method is called, audit activity logs are produced to track the user activity.\nIn the case of errors, both audit activity logs and system services logs are produced.\nThe log files are named as follows:\n\n  +-----------------------------------------+-----------------------------------+\n  |           AUDIT ACTIVITY LOG            |        SYSTEM SERVICE LOG         |\n  +-----------------------------------------+-----------------------------------+\n  | *\u003cMachineName\u003e_AuditActivityEngine.txt* | *\u003cMachineName\u003e_ServiceEngine.txt* |\n  +-----------------------------------------+-----------------------------------+\n\nThe log files are located in:\n_%ProgramData%/Qlik/Sense/Log/Engine_\n\nParameters:\n\n◾ targetPath   -   Path and name of the target app.\n\n◾ srcAppId     -   Identifier of the source app. The identifier is a GUID from the Qlik Sense repository.\n\n◾ ids          -   Array of identifiers.\nThe list of all the objects in the app to be exported must be given. This list must contain the GUIDs of all these objects.\n\n◾ noData       -   Set this parameter to true if the data should be omitted in the exported app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetActiveDoc": {
          "description": "Returns the handle of the current app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Doc"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAppEntry": {
          "description": "Retrieves the meta data of an app.\n\nParameters:\n\n◾ appID   -   Identifier of the app, as returned by the CreateApp method.\nOne of:\n\n• Path and name of the app (Qlik Sense Desktop)\n\n• GUID (Qlik Sense Enterprise)",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/AppEntry"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAppEntryRaw": {
          "description": "Retrieves the meta data of an app.\n\nParameters:\n\n◾ appID   -   Identifier of the app, as returned by the CreateApp method.\nOne of:\n\n• Path and name of the app (Qlik Sense Desktop)\n\n• GUID (Qlik Sense Enterprise)",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetAuthenticatedUser": {
          "description": "Retrieves information about the authenticated user.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBNF": {
          "description": "Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. The BNF rules define the syntax for the script statements and the script or chart functions.\nIn the Qlik engine BNF grammar, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.\n\nParameters:\n\n◾ bnfType   -   Returns a set of rules defining the syntax for:\n\n• The script statements and the script functions if qBnfType is set to S.\n\n• The chart functions if qBnfType is set to E.\n\nOne of:\n\n• S or SCRIPT_TEXT_SCRIPT\n\n• E or SCRIPT_TEXT_EXPRESSION",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use the _GetBaseBNF_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/BNFDef"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBNFRaw": {
          "description": "Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. The BNF rules define the syntax for the script statements and the script or chart functions.\nIn the Qlik engine BNF grammar, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.\n\nParameters:\n\n◾ bnfType   -   Returns a set of rules defining the syntax for:\n\n• The script statements and the script functions if qBnfType is set to S.\n\n• The chart functions if qBnfType is set to E.\n\nOne of:\n\n• S or SCRIPT_TEXT_SCRIPT\n\n• E or SCRIPT_TEXT_EXPRESSION",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use the _GetBaseBNF_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBaseBNF": {
          "description": "Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.\nIn the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.\n\nParameters:\n\n◾ bnfType   -   The type of grammar to return:\n\n• The script statements and the script functions if qBnfType is set to S.\n\n• The chart functions if qBnfType is set to E.\n\nOne of:\n\n• S or SCRIPT_TEXT_SCRIPT\n\n• E or SCRIPT_TEXT_EXPRESSION",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/BNFDef"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBaseBNFHash": {
          "description": "Gets a string hash calculated from the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. If the hash changes between subsequent calls to this method, this indicates that the BNF grammar has changed.\n\nParameters:\n\n◾ bnfType   -   The type of grammar to return:\n\n• The script statements and the script functions if qBnfType is set to S.\n\n• The chart functions if qBnfType is set to E.\n\nOne of:\n\n• S or SCRIPT_TEXT_SCRIPT\n\n• E or SCRIPT_TEXT_EXPRESSION",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBaseBNFRaw": {
          "description": "Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.\nIn the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.\n\nParameters:\n\n◾ bnfType   -   The type of grammar to return:\n\n• The script statements and the script functions if qBnfType is set to S.\n\n• The chart functions if qBnfType is set to E.\n\nOne of:\n\n• S or SCRIPT_TEXT_SCRIPT\n\n• E or SCRIPT_TEXT_EXPRESSION",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetBaseBNFString": {
          "description": "Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.\nIn the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.\n\nParameters:\n\n◾ bnfType   -   The type of grammar to return:\n\n• S: returns the script statements and the script functions.\n\n• E: returns the chart functions.\n\nOne of:\n\n• S or SCRIPT_TEXT_SCRIPT\n\n• E or SCRIPT_TEXT_EXPRESSION",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetCustomConnectors": {
          "description": "List the custom connectors available in the system.\n\nParameters:\n\n◾ reloadList   -   Sets if the list of custom connectors should be reloaded or not.\nIf set to false, only the connectors that were returned the previous time are returned. If new connectors have been added since the last call to the GetCustomConnectors method was made, the new connectors are not returned.\nIf set to true, the GetCustomConnectors method looks for new connectors in the file system.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/CustomConnector"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetCustomConnectorsRaw": {
          "description": "List the custom connectors available in the system.\n\nParameters:\n\n◾ reloadList   -   Sets if the list of custom connectors should be reloaded or not.\nIf set to false, only the connectors that were returned the previous time are returned. If new connectors have been added since the last call to the GetCustomConnectors method was made, the new connectors are not returned.\nIf set to true, the GetCustomConnectors method looks for new connectors in the file system.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabasesFromConnectionString": {
          "description": "Lists the databases in a ODBC, OLEDB or CUSTOM data source.\n\nParameters:\n\n◾ connection   -   Information about the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/Connection"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/Database"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDatabasesFromConnectionStringRaw": {
          "description": "Lists the databases in a ODBC, OLEDB or CUSTOM data source.\n\nParameters:\n\n◾ connection   -   Information about the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDefaultAppFolder": {
          "description": "Returns the folder where the apps are stored.\nThis method applies only if running Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDocList": {
          "description": "Returns the list of apps.\n\nIn Qlik Sense Enterprise::\n\nThe list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.\n\nIn Qlik Sense Desktop::\n\nThe apps are located in C:\\Users\\\u003cuser name\u003e\\Documents\\Qlik\\Sense\\Apps.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DocListEntry"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetDocListRaw": {
          "description": "Returns the list of apps.\n\nIn Qlik Sense Enterprise::\n\nThe list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.\n\nIn Qlik Sense Desktop::\n\nThe apps are located in C:\\Users\\\u003cuser name\u003e\\Documents\\Qlik\\Sense\\Apps.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFolderItemsForPath": {
          "description": "Returns the files and folders located at a specified path.\n\nParameters:\n\n◾ path   -   Absolute or relative path.\nRelative paths are relative to the default Apps folder.\n\nIn Qlik Sense Enterprise::\n\nThe list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.\n\nIn Qlik Sense Desktop::\n\nThe apps are located in C:\\Users\\\u003cuser name\u003e\\Documents\\Qlik\\Sense\\Apps.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/FolderItem"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFolderItemsForPathRaw": {
          "description": "Returns the files and folders located at a specified path.\n\nParameters:\n\n◾ path   -   Absolute or relative path.\nRelative paths are relative to the default Apps folder.\n\nIn Qlik Sense Enterprise::\n\nThe list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.\n\nIn Qlik Sense Desktop::\n\nThe apps are located in C:\\Users\\\u003cuser name\u003e\\Documents\\Qlik\\Sense\\Apps.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFunctions": {
          "description": "Gets the list of all the script functions.\n\nParameters:\n\n◾ group   -   Name of the group.\nDefault is all groups.\n\nOne of:\n\n• ALL or FUNC_GROUP_ALL\n\n• U or FUNC_GROUP_UNKNOWN\n\n• NONE or FUNC_GROUP_NONE\n\n• AGGR or FUNC_GROUP_AGGR\n\n• NUM or FUNC_GROUP_NUMERIC\n\n• RNG or FUNC_GROUP_RANGE\n\n• EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC\n\n• TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC\n\n• FIN or FUNC_GROUP_FINANCIAL\n\n• MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE\n\n• COUNT or FUNC_GROUP_COUNTER\n\n• STR or FUNC_GROUP_STRING\n\n• MAPP or FUNC_GROUP_MAPPING\n\n• RCRD or FUNC_GROUP_INTER_RECORD\n\n• CND or FUNC_GROUP_CONDITIONAL\n\n• LOG or FUNC_GROUP_LOGICAL\n\n• NULL or FUNC_GROUP_NULL\n\n• SYS or FUNC_GROUP_SYSTEM\n\n• FILE or FUNC_GROUP_FILE\n\n• TBL or FUNC_GROUP_TABLE\n\n• DATE or FUNC_GROUP_DATE_AND_TIME\n\n• NUMI or FUNC_GROUP_NUMBER_INTERPRET\n\n• FRMT or FUNC_GROUP_FORMATTING\n\n• CLR or FUNC_GROUP_COLOR\n\n• RNK or FUNC_GROUP_RANKING\n\n• GEO or FUNC_GROUP_GEO\n\n• EXT or FUNC_GROUP_EXTERNAL\n\n• PROB or FUNC_GROUP_PROBABILITY\n\n• ARRAY or FUNC_GROUP_ARRAY\n\n• LEG or FUNC_GROUP_LEGACY",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/Function"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetFunctionsRaw": {
          "description": "Gets the list of all the script functions.\n\nParameters:\n\n◾ group   -   Name of the group.\nDefault is all groups.\n\nOne of:\n\n• ALL or FUNC_GROUP_ALL\n\n• U or FUNC_GROUP_UNKNOWN\n\n• NONE or FUNC_GROUP_NONE\n\n• AGGR or FUNC_GROUP_AGGR\n\n• NUM or FUNC_GROUP_NUMERIC\n\n• RNG or FUNC_GROUP_RANGE\n\n• EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC\n\n• TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC\n\n• FIN or FUNC_GROUP_FINANCIAL\n\n• MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE\n\n• COUNT or FUNC_GROUP_COUNTER\n\n• STR or FUNC_GROUP_STRING\n\n• MAPP or FUNC_GROUP_MAPPING\n\n• RCRD or FUNC_GROUP_INTER_RECORD\n\n• CND or FUNC_GROUP_CONDITIONAL\n\n• LOG or FUNC_GROUP_LOGICAL\n\n• NULL or FUNC_GROUP_NULL\n\n• SYS or FUNC_GROUP_SYSTEM\n\n• FILE or FUNC_GROUP_FILE\n\n• TBL or FUNC_GROUP_TABLE\n\n• DATE or FUNC_GROUP_DATE_AND_TIME\n\n• NUMI or FUNC_GROUP_NUMBER_INTERPRET\n\n• FRMT or FUNC_GROUP_FORMATTING\n\n• CLR or FUNC_GROUP_COLOR\n\n• RNK or FUNC_GROUP_RANKING\n\n• GEO or FUNC_GROUP_GEO\n\n• EXT or FUNC_GROUP_EXTERNAL\n\n• PROB or FUNC_GROUP_PROBABILITY\n\n• ARRAY or FUNC_GROUP_ARRAY\n\n• LEG or FUNC_GROUP_LEGACY",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInteract": {
          "description": "Retrieves information on the user interaction that is requested by the engine.\nEngine can request user interactions only during script reload and when the reload is performed in debug mode ( qDebug is set to true when using the DoReload method ).\nWhen running reload in debug mode, the engine pauses the script execution to receive data about user interaction. The engine can pause:\n\n• Before executing a new script statement.\n\n• When an error occurs while executing the script.\n\n• When the script execution is finished.\n\nTo know if the engine is paused and waits for a response to an interaction request, the GetProgress method should be used. The engine waits for a response if the property qUserInteractionWanted is set to true in the response of the GetProgress request.\n\nParameters:\n\n◾ requestId   -   Identifier of the request.\nCorresponds to the identifier of the DoReload request.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/InteractDef"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetInteractRaw": {
          "description": "Retrieves information on the user interaction that is requested by the engine.\nEngine can request user interactions only during script reload and when the reload is performed in debug mode ( qDebug is set to true when using the DoReload method ).\nWhen running reload in debug mode, the engine pauses the script execution to receive data about user interaction. The engine can pause:\n\n• Before executing a new script statement.\n\n• When an error occurs while executing the script.\n\n• When the script execution is finished.\n\nTo know if the engine is paused and waits for a response to an interaction request, the GetProgress method should be used. The engine waits for a response if the property qUserInteractionWanted is set to true in the response of the GetProgress request.\n\nParameters:\n\n◾ requestId   -   Identifier of the request.\nCorresponds to the identifier of the DoReload request.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLogicalDriveStrings": {
          "description": "Lists the logical drives in the system.\nThis method applies only if running Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/DriveInfo"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetLogicalDriveStringsRaw": {
          "description": "Lists the logical drives in the system.\nThis method applies only if running Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetOdbcDsns": {
          "description": "Returns the list of the ODBC connectors that are installed in the system.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/OdbcDsn"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetOdbcDsnsRaw": {
          "description": "Returns the list of the ODBC connectors that are installed in the system.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetOleDbProviders": {
          "description": "Returns the list of the OLEDB providers installed on the system.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/OleDbProvider"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetOleDbProvidersRaw": {
          "description": "Returns the list of the OLEDB providers installed on the system.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProgress": {
          "description": "Gives information about the progress of the DoReload and DoSave calls.\nFor more information on DoReload and DoSave, see the DoReload Method and DoSave Method.\n\nParameters:\n\n◾ requestId   -   Identifier of the DoReload or DoSave request or 0.\nComplete information is returned if the identifier of the request is given.\nIf the identifier is 0, less information is given. Progress messages and error messages are returned but information like when the request started and finished is not returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/ProgressData"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetProgressRaw": {
          "description": "Gives information about the progress of the DoReload and DoSave calls.\nFor more information on DoReload and DoSave, see the DoReload Method and DoSave Method.\n\nParameters:\n\n◾ requestId   -   Identifier of the DoReload or DoSave request or 0.\nComplete information is returned if the identifier of the request is given.\nIf the identifier is 0, less information is given. Progress messages and error messages are returned but information like when the request started and finished is not returned.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetStreamList": {
          "description": "Lists the streams.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use general purpose endpoint in [QRS API: GET qrs/stream/](/Subsystems/RepositoryServiceAPI/Content/Sense_RepositoryServiceAPI/RepositoryServiceAPI-Get.htm) instead.",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/NxStreamListEntry"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetStreamListRaw": {
          "description": "Lists the streams.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use general purpose endpoint in [QRS API: GET qrs/stream/](/Subsystems/RepositoryServiceAPI/Content/Sense_RepositoryServiceAPI/RepositoryServiceAPI-Get.htm) instead.",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetSupportedCodePages": {
          "description": "Lists the supported code pages.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "slice",
              "items": {
                "type": "#/definitions/CodePage"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "GetSupportedCodePagesRaw": {
          "description": "Lists the supported code pages.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetUniqueID": {
          "description": "Returns the unique identifier of the endpoint for the current user in the current app.\nThis unique identifier can be used for logging purposes.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "InteractDone": {
          "description": "Informs the engine that a user interaction (which was earlier requested by the engine) was performed and indicates to the engine what to do next.\n\nParameters:\n\n◾ requestId   -   Identifier of the request.\nCorresponds to the identifier of the DoReload request.\n\n◾ def         -   User response to the current interaction.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            },
            {
              "type": "#/definitions/InteractDef"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "InteractDoneRaw": {
          "description": "Informs the engine that a user interaction (which was earlier requested by the engine) was performed and indicates to the engine what to do next.\n\nParameters:\n\n◾ requestId   -   Identifier of the request.\nCorresponds to the identifier of the DoReload request.\n\n◾ def         -   User response to the current interaction.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "IsDesktopMode": {
          "description": "Indicates whether the user is working in Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "IsPersonalMode": {
          "description": "Indicates whether or not the user is working in personal mode (Qlik Sense Desktop).",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _IsDesktopMode_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "IsValidConnectionString": {
          "description": "Checks if a connection string is valid.\n\nParameters:\n\n◾ connection   -   Information about the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/Connection"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "IsValidConnectionStringRaw": {
          "description": "Checks if a connection string is valid.\n\nParameters:\n\n◾ connection   -   Information about the connection.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "OSName": {
          "description": "Returns the name of the operating system.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "OSVersion": {
          "description": "Returns the version number of the operating system.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "OpenDoc": {
          "description": "Opens an app and checks if the app needs to be migrated (if the app is deprecated).\nThe OpenDoc method compares the version of the app with the version of Qlik Sense and migrates the app to the current version of Qlik Sense if necessary. Once the migration is done, the app is opened.\nIf no migration is needed, the app is opened immediately.\nThe following applies:\n\n• The app version is lower than 0.95: no migration is done. Apps older than the version 0.95 are not supported.\n\n• The app version is at least 0.95 and less than the Qlik Sense version: the app is migrated and then opened.\n\n• Qlik Sense and the app have the same version: the app is opened, no migration is needed.\n\nIf the app is read-only, the app migration cannot occur. An error message is sent.\n\nBackups:\n\nIn Qlik Sense Desktop, apps are automatically backed up before a migration.\nThe backup files are located in %userprofile%\\Documents\\Qlik\\Sense\\AppsBackup\\\u003cQlik Sense Desktop version\u003e.\nIn Qlik Sense Enterprise, no automatic back up is run. The back up should be done manually.\n\nParameters:\n\n◾ docName    -   The GUID (in Qlik Sense Enterprise) or Name (in Qlik Sense Desktop) of the app to retrieve.\n\n◾ userName   -   Name of the user that opens the app.\n\n◾ password   -   Password of the user.\n\n◾ serial     -   Current Qlik Sense serial number.\n\n◾ noData     -   Set this parameter to true to be able to open an app without loading its data.\nWhen this parameter is set to true, the objects in the app are present but contain no data. The script can be edited and reloaded.\nThe default value is false.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/Doc"
            },
            {
              "type": "error"
            }
          ]
        },
        "ProductVersion": {
          "description": "Returns the Qlik Sense version number.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _EngineVersion_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "PublishApp": {
          "description": "Publishes an app to the supplied stream.\n\nParameters:\n\n◾ appId      -   The Id of the app to publish.\n\n◾ name       -   The name of the app to publish.\n\n◾ streamId   -   The stream Id of the app to publish.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "QTProduct": {
          "description": "Returns the Qlik product name.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "QvVersion": {
          "description": "Returns the Qlik Sense version number.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use the _EngineVersion_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "ReloadExtensionList": {
          "description": "Reloads the list of extensions.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "ReplaceAppFromID": {
          "description": "Replaces objects of a target app with the objects from a source app.\nThe list of objects in the app to be replaced must be defined in qIds.\nThe data model of the app cannot be updated.\nThis operation is possible only in Qlik Sense Enterprise.\n\nThe operation is successful if qSuccess is set to true.\n\nParameters:\n\n◾ targetAppId   -   Identifier (GUID) of the target app.\nThe target app is the app to be replaced.\n\n◾ srcAppID      -   Identifier (GUID) of the source app.\nThe objects in the source app will replace the objects in the target app.\n\n◾ ids           -   QRS identifiers (GUID) of the objects in the target app to be replaced. Only QRS-approved GUIDs are applicable.\nAn object that is QRS-approved, is for example an object that has been published (for example, not private anymore).\nIf an object is private, it should not be included in this list.\nIf the array of identifiers contains objects that are not present in the source app, the objects related to these identifiers are removed from the target app.\nIf qIds is empty, no objects are deleted in the target app.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SaveAs": {
          "description": "Save a copy of an app with a different name.\nCan be used to save a session app as an ordinary app.\n\nParameters:\n\n◾ newAppName   -   \u003cName of the saved app\u003e",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "ShutdownProcess": {
          "description": "Shuts down the Qlik engine.\nThis operation is possible only in Qlik Sense Desktop.",
          "x-qlik-stability": "locked",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "HyperCube": {
      "description": "Renders the properties of a hypercube. Is the layout for HyperCubeDef.\nFor more information about the definition of a hypercube, see Generic object.\nWhat is returned in HyperCube depends on the type of the hypercube (straight, pivot or stacked table, or tree) and on the method called (GetLayout, GetHyperCubeData, GetHyperCubePivotData, GetHyperCubeStackData, GetHyperCubeTreeData).",
      "type": "struct",
      "entries": {
        "CalcCondMsg": {
          "description": "The message displayed if calculation condition is not fulfilled.",
          "type": "string"
        },
        "ColumnOrder": {
          "description": "The order of the columns.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "DataPages": {
          "description": "Set of data.\nIs empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDataPage"
          }
        },
        "DimensionInfo": {
          "description": "Information on the dimension.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDimensionInfo"
          }
        },
        "EffectiveInterColumnSortOrder": {
          "description": "Sort order of the columns in the hypercube.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first column to be sorted was the column 1, followed by the column 0 and the column 2.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Error": {
          "description": "This parameter is optional and is displayed in case of error.",
          "type": "#/definitions/NxValidationError"
        },
        "GrandTotalRow": {
          "description": "Aggregate for measures of all values in the field.\nThe result value depends on the qAggrFunc defined in HyperCubeDef.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxCell"
          }
        },
        "HasOtherValues": {
          "description": "True if other row exists.",
          "type": "bool"
        },
        "IndentMode": {
          "description": "Is used for pivot tables only.\nIf set to true, the formatting of the results is slightly different.\nThis property is optional.",
          "type": "bool"
        },
        "LastExpandedPos": {
          "description": "Is used for pivot tables only.\nPosition of the last expended cell.\nThis property is optional.",
          "type": "#/definitions/NxCellPosition"
        },
        "MeasureInfo": {
          "description": "Information on the measure.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxMeasureInfo"
          }
        },
        "Mode": {
          "description": "Information about the mode of the visualization.\n\nOne of:\n\n• S or DATA_MODE_STRAIGHT\n\n• P or DATA_MODE_PIVOT\n\n• K or DATA_MODE_PIVOT_STACK\n\n• T or DATA_MODE_TREE",
          "type": "string"
        },
        "NoOfLeftDims": {
          "description": "Number of left dimensions.\nDefault value is -1.\nThe index related to each left dimension depends on the position of the pseudo dimension (if any).\nFor example, a pivot table with:\n\n• Four dimensions in the following order: Country, City, Product and Category\n\n• One pseudo dimension in position 1\n\n• Three left dimensions.\n\nimplies that:\n\n• The index 0 corresponds to the left dimension Country.\n\n• The index 1 corresponds to the pseudo dimension.\n\n• The index 2 corresponds to the left dimension City.\n\n• Product and Category are top dimensions.\n\nAnother example:\n\n• Four dimensions in the following order: Country, City, Product and Category.\n\n• One pseudo dimension in position -1.\n\n• Three left dimensions.\n\nimplies that:\n\n• The index -1 corresponds to the pseudo dimension; the pseudo dimension is the most to the right.\n\n• The index 0 corresponds to the left dimension Country.\n\n• The index 1 corresponds to the left dimension City.\n\n• The index 2 corresponds to the left dimension Product.\n\n• Category is a top dimension.",
          "type": "int"
        },
        "PivotDataPages": {
          "description": "Set of data for pivot tables.\nIs empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPivotPage"
          }
        },
        "Size": {
          "description": "Defines the size of the hypercube.",
          "type": "#/definitions/Size"
        },
        "StackedDataPages": {
          "description": "Set of data for stacked tables.\nIs empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxStackPage"
          }
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        },
        "Title": {
          "description": "Title of the hypercube, for example the title of a chart.",
          "type": "string"
        },
        "TreeNodesOnDim": {
          "description": "The total number of nodes on each dimension (only applicable when qMode = T ).",
          "type": "slice",
          "items": {
            "type": "int"
          }
        }
      }
    },
    "HyperCubeDef": {
      "description": "Defines the properties of a hypercube.\nFor more information about the definition of a hypercube, see Generic object.",
      "type": "struct",
      "entries": {
        "AlwaysFullyExpanded": {
          "description": "If this property is set to true, the cells are always expanded. It implies that it is not possible to collapse any cells.\nThe default value is false.",
          "type": "bool"
        },
        "CalcCond": {
          "description": "Specifies a calculation condition, which must be fulfilled for the hypercube to be (re)calculated.\nAs long as the condition is not met, the engine does not perform a new calculation.\nThis property is optional. By default, there is no calculation condition.",
          "type": "#/definitions/ValueExpr"
        },
        "CalcCondition": {
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the hypercube is not calculated and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/NxCalcCond"
        },
        "ColumnOrder": {
          "description": "The order of the columns.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Dimensions": {
          "description": "Array of dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDimension"
          }
        },
        "ExpansionState": {
          "description": "Expansion state per dimension for pivot mode ( qMode is P).",
          "x-qlik-stability": "experimental",
          "type": "slice",
          "items": {
            "type": "#/definitions/ExpansionData"
          }
        },
        "IndentMode": {
          "description": "This property applies for pivot tables and allows to change the layout of the table. An indentation is added to the beginning of each row.\nThe default value is false.",
          "type": "bool"
        },
        "InitialDataFetch": {
          "description": "Initial data set.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPage"
          }
        },
        "InterColumnSortOrder": {
          "description": "Defines the sort order of the columns in the hypercube.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first column to be sorted should be the column 1, followed by the column 0 and the column 2.\nThe default sort order is the order in which the dimensions and measures have been defined in the hypercube. By default, the pseudo-dimension (if any) is the most to the right in the array.\nThe index of the pseudo-dimension (if any) is -1.\nPseudo dimensions only apply for pivot tables with more than one measure.\nA pseudo dimension groups together the measures defined in a pivot table. You can neither collapse/expand a pseudo dimension nor make any selections in it.\nStacked pivot tables can only contain one measure.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "MaxStackedCells": {
          "description": "Maximum number of cells for an initial data fetch (set in qInitialDataFetch ) when in stacked mode ( qMode is K).\nThe default value is 5000.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "Measures": {
          "description": "Array of measures.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxMeasure"
          }
        },
        "Mode": {
          "description": "Defines the way the data are handled internally by the engine.\nDefault value is DATAMODE_STRAIGHT_ .\nA pivot table can contain several dimensions and measures whereas a stacked pivot table can contain several dimensions but only one measure.\n\nOne of:\n\n• S or DATA_MODE_STRAIGHT\n\n• P or DATA_MODE_PIVOT\n\n• K or DATA_MODE_PIVOT_STACK\n\n• T or DATA_MODE_TREE",
          "type": "string"
        },
        "NoOfLeftDims": {
          "description": "Number of left dimensions.\nDefault value is -1. In that case, all dimensions are left dimensions.\nHidden dimensions (e.g. due to unfulfilled calc condition on dimension level) is still counted in this context.\nThe index related to each left dimension depends on the position of the pseudo dimension (if any).\nFor example, a pivot table with:\n\n• Four dimensions in the following order: Country, City, Product and Category.\n\n• One pseudo dimension in position 1 (the position is defined in qInterColumnSortOrder )\n_qInterColumnSortOrder_ is (0,-1,1,2,3).\n\n• Three left dimensions ( qNoOfLeftDims is set to 3).\n\nimplies that:\n\n• The index 0 corresponds to the left dimension Country.\n\n• The index 1 corresponds to the pseudo dimension.\n\n• The index 2 corresponds to the left dimension City.\n\n• Product and Category are top dimensions.\n\nAnother example:\n\n• Four dimensions in the following order: Country, City, Product and Category.\n\n• Three left dimensions ( qNoOfLeftDims is set to 3).\n\n• One pseudo dimension.\n\n• The property qInterColumnSortOrder is left empty.\n\nImplies that:\n\n• The index 0 corresponds to the left dimension Country.\n\n• The index 1 corresponds to the left dimension City.\n\n• The index 2 corresponds to the left dimension Product.\n\n• Category is a top dimension.\n\n• The pseudo dimension is a top dimension.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "PopulateMissing": {
          "description": "If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.\nThe default value is false.",
          "type": "bool"
        },
        "PseudoDimPos": {
          "description": "When set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "ReductionMode": {
          "description": "One of:\n\n• N or DATA_REDUCTION_NONE\n\n• D1 or DATA_REDUCTION_ONEDIM\n\n• S or DATA_REDUCTION_SCATTERED\n\n• C or DATA_REDUCTION_CLUSTERED\n\n• ST or DATA_REDUCTION_STACKED",
          "type": "string"
        },
        "ShowTotalsAbove": {
          "description": "If set to true, the total (if any) is shown on the first row.\nThe default value is false.",
          "type": "bool"
        },
        "SortbyYValue": {
          "description": "To enable the sorting by ascending or descending order in the values of a measure.\nThis property applies to pivot tables and stacked pivot tables.\nIn the case of a pivot table, the measure or pseudo dimension should be defined as a top dimension. The sorting is restricted to the values of the first measure in a pivot table.",
          "type": "int"
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        },
        "SuppressMissing": {
          "description": "Removes missing values.",
          "type": "bool"
        },
        "SuppressZero": {
          "description": "Removes zero values.",
          "type": "bool"
        },
        "Title": {
          "description": "Title of the hypercube, for example the title of a chart.",
          "type": "#/definitions/StringExpr"
        }
      }
    },
    "InteractDef": {
      "type": "struct",
      "entries": {
        "Buttons": {
          "description": "Buttons displayed in the message box dialog.\nThis property is relevant if qType is *IT_MSGBOX*.\nOne of:\n\n• 0 means that the qButtons property is not relevant.\n\n• 17 means that the message box contains the OK and Cancel buttons or the stop -sign icon.",
          "type": "int"
        },
        "Hidden": {
          "description": "This property is set to true if the returned statement is an hidden script statement.",
          "type": "bool"
        },
        "Input": {
          "description": "Is not used in Qlik Sense.",
          "type": "string"
        },
        "Line": {
          "description": "Next script statement to be executed.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.",
          "type": "string"
        },
        "Msg": {
          "description": "Message used in the message box dialog.\nThis property is relevant if qType is *IT_MSGBOX*.",
          "type": "string"
        },
        "NewLineNr": {
          "description": "First line number of the next statement to be executed.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.",
          "type": "int"
        },
        "OldLineNr": {
          "description": "First line number of the previously executed statement.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.",
          "type": "int"
        },
        "Path": {
          "description": "Path specified by the Include script variable.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.\nExample of an Include variable:\n_$(Include=lib:\\\\\\MyDataFiles\\abc.txt);_",
          "type": "string"
        },
        "Result": {
          "description": "Not relevant for describing the requested user interaction.",
          "type": "int"
        },
        "Title": {
          "description": "Title used in the message box dialog.\nThis property is relevant if qType is *IT_MSGBOX*.",
          "type": "string"
        },
        "Type": {
          "description": "Interaction type.\n\nOne of:\n\n• IT_MSGBOX\n\n• IT_SCRIPTLINE\n\n• IT_BREAK\n\n• IT_INPUT\n\n• IT_END\n\n• IT_PASSWD\n\n• IT_USERNAME",
          "type": "string"
        }
      }
    },
    "Interceptor": {
      "description": "Interceptor is a function which takes an invocation request, forwards it to the next step in the interceptor chain.\nIt is synchronous and waits for the response from the rest of the call chain before returning the response.\nThis means that an interceptor can affect both the request and the response in one function call",
      "type": "function-signature",
      "params": [
        {
          "type": "https://golang.org/pkg/context/Context"
        },
        {
          "type": "#/definitions/Invocation"
        },
        {
          "type": "#/definitions/InterceptorContinuation"
        }
      ],
      "returns": [
        {
          "type": "#/definitions/InvocationResponse"
        }
      ]
    },
    "InterceptorContinuation": {
      "description": "InterceptorContinuation executes the rest of the call chain. The call locks until the request is fulfilled and a response is returned",
      "type": "function-signature",
      "params": [
        {
          "type": "https://golang.org/pkg/context/Context"
        },
        {
          "type": "#/definitions/Invocation"
        }
      ],
      "returns": [
        {
          "type": "#/definitions/InvocationResponse"
        }
      ]
    },
    "Invocation": {
      "description": "Invocation represents one invocation towards a remote object",
      "type": "struct",
      "entries": {
        "Method": {
          "description": "Method is the name of the method being called",
          "type": "string"
        },
        "Params": {
          "description": "Params contains the function call parameters as provided in the top level API. Parameter types can be both primitives, structs and raw json (byte arrays) depending on what api level function is used.",
          "type": "slice",
          "items": {
            "type": "interface"
          }
        },
        "RemoteObject": {
          "description": "RemoteObject contains information about what Qlik Associative Engine object to call",
          "type": "#/definitions/RemoteObject"
        }
      }
    },
    "InvocationMetrics": {
      "description": "InvocationMetrics contains performance information about the last invocation in the context",
      "type": "struct",
      "entries": {
        "InvocationRequestTimestamp": {
          "type": "https://golang.org/pkg/time/Time",
          "ref-type": "value"
        },
        "InvocationResponseTimestamp": {
          "type": "https://golang.org/pkg/time/Time",
          "ref-type": "value"
        },
        "RequestMessageSize": {
          "type": "int"
        },
        "ResponseMessageSize": {
          "type": "int"
        },
        "SocketReadTimestamp": {
          "type": "https://golang.org/pkg/time/Time",
          "ref-type": "value"
        },
        "SocketWriteTimestamp": {
          "type": "https://golang.org/pkg/time/Time",
          "ref-type": "value"
        },
        "ToString": {
          "description": "ToString returns a human-friendly string representation of elapsed times",
          "type": "method",
          "returns": [
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "InvocationResponse": {
      "description": "InvocationResponse represents a QIX engine response message",
      "type": "struct",
      "entries": {
        "Error": {
          "type": "error"
        },
        "RequestID": {
          "type": "int"
        },
        "Result": {
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        }
      }
    },
    "LayoutExclude": {
      "description": "Contains JSON to be excluded from validation.",
      "type": "struct"
    },
    "LayoutFieldInfo": {
      "description": "Meta data about the selection in a field.",
      "type": "struct",
      "entries": {
        "ExcludedValuesCount": {
          "description": "Number of excluded values in the field.",
          "type": "int"
        },
        "FieldName": {
          "description": "The name of the field.",
          "type": "string"
        },
        "ValuesCount": {
          "description": "Number of selected values in the field.",
          "type": "int"
        }
      }
    },
    "LineageInfo": {
      "type": "struct",
      "entries": {
        "Discriminator": {
          "description": "A string indicating the origin of the data:\n\n• [filename]: the data comes from a local file.\n\n• INLINE: the data is entered inline in the load script.\n\n• RESIDENT: the data comes from a resident table. The table name is listed.\n\n• AUTOGENERATE: the data is generated from the load script (no external table of data source).\n\n• Provider: the data comes from a data connection. The connector source name is listed.\n\n• [webfile]: the data comes from a web-based file.\n\n• STORE: path to QVD or TXT file where data is stored.\n\n• EXTENSION: the data comes from a Server Side Extension (SSE).",
          "type": "string"
        },
        "Statement": {
          "description": "The LOAD and SELECT script statements from the data load script.",
          "type": "string"
        }
      }
    },
    "ListObject": {
      "description": "Renders the properties of a list object. Is the layout for ListObjectDef.\nFor more information about the definition of a list object, see Generic object.\nListObject is used by the GetLayout Method to display the properties of a list object.",
      "type": "struct",
      "entries": {
        "DataPages": {
          "description": "Set of data.\nIs empty if nothing has been defined in qInitialDataFetch in ListObjectDef.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDataPage"
          }
        },
        "DimensionInfo": {
          "description": "Information about the dimension.",
          "type": "#/definitions/NxDimensionInfo"
        },
        "Error": {
          "description": "This parameter is optional and is displayed in case of error.",
          "type": "#/definitions/NxValidationError"
        },
        "Expressions": {
          "description": "Lists the expressions in the list object.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxListObjectExpression"
          }
        },
        "Size": {
          "description": "Defines the size of a list object.",
          "type": "#/definitions/Size"
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        }
      }
    },
    "ListObjectDef": {
      "description": "Defines the properties of a list object.\nFor more information about the definition of a list object, see Generic object.",
      "type": "struct",
      "entries": {
        "AutoSortByState": {
          "description": "Defines the sorting by state.",
          "type": "#/definitions/NxAutoSortByStateDef"
        },
        "Def": {
          "description": "Refers to a dimension stored in the list object.",
          "type": "#/definitions/NxInlineDimensionDef"
        },
        "Expressions": {
          "description": "Lists the expressions in the list object.\nThis parameter is optional.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxListObjectExpressionDef"
          }
        },
        "FrequencyMode": {
          "description": "Defines the frequency mode. The frequency mode is used to calculate the frequency of a value in a list object.\nDefault is NXFREQUENCY_NONE_ .\nThis parameter is optional.\n\nOne of:\n\n• N or NX_FREQUENCY_NONE\n\n• V or NX_FREQUENCY_VALUE\n\n• P or NX_FREQUENCY_PERCENT\n\n• R or NX_FREQUENCY_RELATIVE",
          "type": "string"
        },
        "InitialDataFetch": {
          "description": "Fetches an initial data set.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPage"
          }
        },
        "LibraryId": {
          "description": "Refers to a dimension stored in the library.",
          "type": "string"
        },
        "ShowAlternatives": {
          "description": "If set to true, alternative values are allowed in qData .\nIf set to false, no alternative values are displayed in qData . Values are excluded instead.\nThe default value is false.\nNote that on the contrary, the qStateCounts parameter counts the excluded values as alternative values.\nThis parameter is optional.",
          "type": "bool"
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        }
      }
    },
    "LocaleInfo": {
      "type": "struct",
      "entries": {
        "BrokenWeeks": {
          "description": "Is set to true if broken weeks are allowed in a year.\nAccording to ISO 8601, no broken weeks should be allowed.\nThis property is not shown if set to false.\nIf qBrokenWeeks is set to true, qReferenceDay is irrelevant.\nIf this property has not been set in a script, the returned value comes from the Windows operating system.",
          "type": "bool"
        },
        "CalendarStrings": {
          "description": "Information about the calendar.",
          "type": "#/definitions/CalendarStrings"
        },
        "Collation": {
          "description": "Locale name (following language tagging convention RFC 4646):\n_\u003c language\u003e-\u003cREGION\u003e_\nWhere:\n\n• language is a lowercase ISO  639 language code\n\n• REGION specifies an uppercase ISO 3166 country code.\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.",
          "type": "string"
        },
        "CurrentYear": {
          "description": "Current year.",
          "type": "int"
        },
        "DateFmt": {
          "description": "Date format.\nExample: YYYY-MM-DD",
          "type": "string"
        },
        "DecimalSep": {
          "description": "Decimal separator.",
          "type": "string"
        },
        "FirstMonthOfYear": {
          "description": "First month of the year, starting from 1.\nAccording to ISO 8601, January is the first month of the year.\n\n• 1 = January\n\n• 2 = February\n\n• 12 = January\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.",
          "type": "int"
        },
        "FirstWeekDay": {
          "description": "First day of the week, starting from 0.\nAccording to ISO 8601, Monday is the first day of the week.\n\n• 0 = Monday\n\n• 1 = Tuesday\n\n• ...\n\n• 6 = Sunday\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.",
          "type": "int"
        },
        "ListSep": {
          "description": "List separator.",
          "type": "string"
        },
        "MoneyDecimalSep": {
          "description": "Money decimal separator.",
          "type": "string"
        },
        "MoneyFmt": {
          "description": "Money format.\nExample:\n\n.\n\n0,00 kr;-#.##0,00 kr:\n\n:",
          "type": "string"
        },
        "MoneyThousandSep": {
          "description": "Money thousand separator.",
          "type": "string"
        },
        "NumericalAbbreviation": {
          "description": "Number format.\nExample: 3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y",
          "type": "string"
        },
        "ReferenceDay": {
          "description": "Day in the year that is always in week 1.\nAccording to ISO 8601, January 4th should always be part of the first week of the year ( qReferenceDay =4).\nRecommended values are in the range 1 and 7.\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\nThis property is not relevant if there are broken weeks in the year.",
          "type": "int"
        },
        "ThousandSep": {
          "description": "Thousand separator.",
          "type": "string"
        },
        "TimeFmt": {
          "description": "Time format.\nExample: hh:mm:ss",
          "type": "string"
        },
        "TimestampFmt": {
          "description": "Time stamp format.\nExample: YYYY-MM-DD hh:mm:ss[.fff]",
          "type": "string"
        }
      }
    },
    "MeasureList": {
      "description": "Lists the measures. Is the layout for MeasureListDef.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the list of measures.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "MeasureListDef": {
      "description": "Defines the list of measures.",
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Type": {
          "description": "Type of the list.",
          "type": "string"
        }
      }
    },
    "MediaList": {
      "description": "Lists the media files. Is the layout for MediaListDef.\nThis struct is deprecated.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the list of media files.\nIn Qlik Sense Desktop, the media files are retrieved from:\n_%userprofile%\\Documents\\Qlik\\Sense\\Content\\Default_\nIn Qlik Sense Enterprise, the media files are retrieved from:\n\u003cinstallation_directory\u003e\\Qlik\\Sense\\Repository\\Content\\Default\nThe default installation directory is ProgramData .",
          "type": "slice",
          "items": {
            "type": "#/definitions/MediaListItem"
          }
        }
      }
    },
    "MediaListDef": {
      "description": "Defines the list of media files.\nThis struct is deprecated.\n\nProperties:\n\n\"qMediaListDef\": {}\n_qMediaListDef_ has an empty structure. No properties need to be set.",
      "type": "struct"
    },
    "MediaListItem": {
      "description": "In addition, this structure can return dynamic properties.",
      "type": "struct",
      "entries": {
        "Url": {
          "description": "Relative path to the media file.\nMedia files located:\n\n• in the /content/default/ folder are outside the qvf file.\n\n• in the /media/ folder are embedded in the qvf file.",
          "type": "string"
        },
        "UrlDef": {
          "description": "Relative path to the media file. The URL is static.\nMedia files located:\n\n• in the /content/default/ folder are outside the qvf file.\n\n• in the /media/ folder are embedded in the qvf file.",
          "type": "string"
        }
      }
    },
    "MetricsCollector": {
      "description": "MetricsCollector is used to extract performance metrics for the last invocation in the context",
      "type": "struct",
      "entries": {
        "Metrics": {
          "description": "Metrics extracts performance information",
          "type": "method",
          "returns": [
            {
              "type": "#/definitions/InvocationMetrics"
            }
          ]
        },
        "Mutex": {
          "type": "https://golang.org/pkg/sync/Mutex",
          "embedded": true,
          "ref-type": "value"
        }
      }
    },
    "MockSocket": {
      "description": "MockSocket provides a dummy implementation of the Socket interface.",
      "type": "struct",
      "entries": {
        "AddReceivedMessage": {
          "description": "AddReceivedMessage adds a message to the received message queue immediately",
          "type": "method",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        "Close": {
          "description": "Close implements the Socket interface",
          "type": "method",
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ExpectCall": {
          "description": "ExpectCall sets a response message given a request message.",
          "type": "method",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        "ReadMessage": {
          "description": "ReadMessage implements the Socket interface",
          "type": "method",
          "returns": [
            {
              "type": "int"
            },
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "WriteMessage": {
          "description": "WriteMessage implements the Socket interface",
          "type": "method",
          "params": [
            {
              "type": "int"
            },
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "NewMockSocket": {
      "description": "NewMockSocket creates a new MockSocket instance",
      "type": "function",
      "params": [
        {
          "type": "string"
        }
      ],
      "returns": [
        {
          "type": "#/definitions/MockSocket"
        },
        {
          "type": "error"
        }
      ]
    },
    "NxAppLayout": {
      "description": "Qlik Sense Desktop:\n\nIn Qlik Sense Desktop, this structure can contain dynamic properties.\n\nQlik Sense Enterprise:\n\nIn Qlik Sense Enterprise, only a few dynamic properties at the app level are persisted.\nThe persisted dynamic properties are the following:\n\n• modifiedDate\n\n• published\n\n• publishTime\n\n• privileges\n\n• description\n\n• dynamicColor",
      "type": "struct",
      "entries": {
        "FileName": {
          "description": "In Qlik Sense Enterprise, this property corresponds to the app identifier (GUID).\nIn Qlik Sense Desktop, this property corresponds to the full path of the app.",
          "type": "string"
        },
        "HasData": {
          "description": "Is set to true if the app contains data following a script reload.",
          "type": "bool"
        },
        "HasScript": {
          "description": "Is set to true if a script is defined in the app.",
          "type": "bool"
        },
        "IsOpenedWithoutData": {
          "description": "If set to true, it means that the app was opened without loading its data.",
          "type": "bool"
        },
        "IsSessionApp": {
          "description": "If set to true, the app is a Session App, i.e. not persistent.",
          "type": "bool"
        },
        "LastReloadTime": {
          "description": "Date and time of the last reload of the app in ISO format.",
          "type": "string"
        },
        "LocaleInfo": {
          "description": "Information about the locale.",
          "type": "#/definitions/LocaleInfo"
        },
        "Meta": {
          "description": "Information on publishing and permissions.",
          "type": "#/definitions/NxMeta"
        },
        "Modified": {
          "description": "Is set to true if the app has been updated since the last save.",
          "type": "bool"
        },
        "ReadOnly": {
          "description": "If set to true, it means that the app is read-only.",
          "type": "bool"
        },
        "StateNames": {
          "description": "Array of alternate states.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Thumbnail": {
          "description": "App thumbnail.",
          "type": "#/definitions/StaticContentUrl"
        },
        "Title": {
          "description": "Title of the app.",
          "type": "string"
        }
      }
    },
    "NxAppProperties": {
      "description": "Qlik Sense Desktop:\n\nIn Qlik Sense Desktop, this structure can contain dynamic properties.\n\nQlik Sense Enterprise:\n\nIn Qlik Sense Enterprise, only a few dynamic properties at the app level are persisted.\nThe persisted dynamic properties are the following:\n\n• modifiedDate\n\n• published\n\n• publishTime\n\n• privileges\n\n• description\n\n• dynamicColor",
      "type": "struct",
      "entries": {
        "HasSectionAccess": {
          "description": "If true the app has section access configured.",
          "type": "bool"
        },
        "LastReloadTime": {
          "description": "Last reload time of the app.",
          "type": "string"
        },
        "MigrationHash": {
          "description": "Internal property reserved for app migration.\nPatch version of the app.\nDo not update.",
          "type": "string"
        },
        "SavedInProductVersion": {
          "description": "Internal property reserved for app migration.\nThe app is saved in this version of the product.\nDo not update.",
          "type": "string"
        },
        "Thumbnail": {
          "description": "App thumbnail.",
          "type": "#/definitions/StaticContentUrlDef"
        },
        "Title": {
          "description": "App title.",
          "type": "string"
        }
      }
    },
    "NxAttrDimDef": {
      "description": "Layout for NxAttrDimDef.",
      "type": "struct",
      "entries": {
        "Attribute": {
          "description": "If set to true, this attribute will not affect the number of rows in the cube.",
          "type": "bool"
        },
        "Def": {
          "description": "Expression or field name.",
          "type": "string"
        },
        "LibraryId": {
          "description": "LibraryId for dimension.",
          "type": "string"
        },
        "SortBy": {
          "description": "Sorting.",
          "type": "#/definitions/SortCriteria"
        }
      }
    },
    "NxAttrDimInfo": {
      "description": "Layout for NxAttrDimDef.",
      "type": "struct",
      "entries": {
        "Cardinal": {
          "description": "Cardinality of the attribute expression.",
          "type": "int"
        },
        "Error": {
          "description": "Validation error.",
          "type": "#/definitions/NxValidationError"
        },
        "FallbackTitle": {
          "description": "The title for the attribute dimension.",
          "type": "string"
        },
        "IsCalculated": {
          "description": "True if this is a calculated dimension.",
          "type": "bool"
        },
        "Locked": {
          "description": "The Locked value of the dimension.",
          "type": "bool"
        },
        "Size": {
          "description": "Number of rows.",
          "type": "#/definitions/Size"
        }
      }
    },
    "NxAttrExprDef": {
      "type": "struct",
      "entries": {
        "Attribute": {
          "description": "If set to true, this measure will not affect the number of rows in the cube.",
          "type": "bool"
        },
        "Expression": {
          "description": "Definition of the attribute expression.\nExample: \"Max(OrderID)\"",
          "type": "string"
        },
        "LibraryId": {
          "description": "Definition of the attribute expression stored in the library.\nExample: \"MyGenericMeasure\"",
          "type": "string"
        }
      }
    },
    "NxAttrExprInfo": {
      "description": "Layout for NxAttrExprDef.",
      "type": "struct",
      "entries": {
        "FallbackTitle": {
          "type": "string"
        },
        "Max": {
          "description": "Maximum value.",
          "type": "#/definitions/Float64"
        },
        "MaxText": {
          "description": "String version of the maximum Value.",
          "type": "string"
        },
        "Min": {
          "description": "Minimum value.",
          "type": "#/definitions/Float64"
        },
        "MinText": {
          "description": "String version of the minimum Value.",
          "type": "string"
        }
      }
    },
    "NxAttributeDimValues": {
      "type": "struct",
      "entries": {
        "Values": {
          "description": "List of values.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxSimpleDimValue"
          }
        }
      }
    },
    "NxAttributeExpressionValues": {
      "type": "struct",
      "entries": {
        "Values": {
          "description": "List of attribute expressions values.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxSimpleValue"
          }
        }
      }
    },
    "NxAutoSortByStateDef": {
      "type": "struct",
      "entries": {
        "DisplayNumberOfRows": {
          "description": "This parameter applies to list objects.\nIf the number of selected values in the list object is greater than the value set in qDisplayNumberOfRows , the selected lines are promoted at the top of the list object.\nIf qDisplayNumberOfRows is set to a negative value or to 0, the sort by state is disabled.",
          "type": "int"
        }
      }
    },
    "NxAxisData": {
      "type": "struct",
      "entries": {
        "Axis": {
          "description": "List of axis data.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAxisTicks"
          }
        }
      }
    },
    "NxAxisTicks": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the derived definition.",
          "type": "string"
        },
        "Tags": {
          "description": "List of tags.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Ticks": {
          "description": "List of ticks.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTickCell"
          }
        }
      }
    },
    "NxBookmark": {
      "type": "struct",
      "entries": {
        "Patches": {
          "description": "Softpatches to be applied with this bookmark.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPatches"
          }
        },
        "StateData": {
          "description": "List of selections for each state.",
          "type": "slice",
          "items": {
            "type": "#/definitions/AlternateStateData"
          }
        },
        "UtcModifyTime": {
          "description": "Time when the bookmark was created.",
          "type": "#/definitions/Float64"
        },
        "VariableItems": {
          "description": "List of the variables in the app at the time the bookmark was created.",
          "type": "slice",
          "items": {
            "type": "#/definitions/BookmarkVariableItem"
          }
        }
      }
    },
    "NxCalcCond": {
      "type": "struct",
      "entries": {
        "Cond": {
          "description": "Condition for calculating an hypercube, dimension or measure.",
          "type": "#/definitions/ValueExpr"
        },
        "Msg": {
          "description": "Evaluated if Cond is not fullfilled.",
          "type": "#/definitions/StringExpr"
        }
      }
    },
    "NxCardinalities": {
      "type": "struct",
      "entries": {
        "AllValuesCardinal": {
          "description": "Number of distinct values when paging for AllValues in a Tree Structure.\nDefault is -1 if not part of a Tree structure.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "Cardinal": {
          "description": "Number of distinct field values.",
          "type": "int"
        },
        "HypercubeCardinal": {
          "description": "Number of distinct hypercube values.",
          "type": "int"
        }
      }
    },
    "NxCell": {
      "type": "struct",
      "entries": {
        "AttrDims": {
          "description": "Attribute dimensions values.",
          "type": "#/definitions/NxAttributeDimValues"
        },
        "AttrExps": {
          "description": "Attribute expression values.",
          "type": "#/definitions/NxAttributeExpressionValues"
        },
        "ElemNumber": {
          "description": "Rank number of the value, starting from 0.\nIf the element number is a negative number, it means that the returned value is not an element number.\nYou can get the following negative values:\n\n• -1: the cell is a Total cell. It shows a total.\n\n• -2: the cell is a Null cell.\n\n• -3: the cell belongs to the group Others .\n\n• -4: the cell is empty. Applies to pivot tables.",
          "type": "int"
        },
        "Frequency": {
          "description": "Frequency of the value.\nThis parameter is optional.",
          "type": "string"
        },
        "HighlightRanges": {
          "description": "Search hits.\nThe search hits are highlighted.\nThis parameter is optional.",
          "type": "#/definitions/NxHighlightRanges"
        },
        "IsEmpty": {
          "description": "Is set to true , if qText and qNum are empty.\nThis parameter is optional. The default value is false .",
          "type": "bool"
        },
        "IsNull": {
          "description": "Is set to true if the value is Null.",
          "type": "bool"
        },
        "IsOtherCell": {
          "description": "Is set to true if the cell belongs to the group Others .\nDimension values can be set as Others depending on what has been defined in OtherTotalSpecProp .\nThis parameter is optional. The default value is false .\nNot applicable to list objects.",
          "type": "bool"
        },
        "IsTotalCell": {
          "description": "Is set to true if a total is displayed in the cell.\nThis parameter is optional. The default value is false .\nNot applicable to list objects.",
          "type": "bool"
        },
        "Num": {
          "description": "A value.\nThis parameter is optional.",
          "type": "#/definitions/Float64"
        },
        "State": {
          "description": "State of the value.\nThe default state for a measure is L.\n\nOne of:\n\n• L or LOCKED\n\n• S or SELECTED\n\n• O or OPTION\n\n• D or DESELECTED\n\n• A or ALTERNATIVE\n\n• X or EXCLUDED\n\n• XS or EXCL_SELECTED\n\n• XL or EXCL_LOCKED\n\n• NSTATES",
          "type": "string"
        },
        "Text": {
          "description": "Some text.\nThis parameter is optional.",
          "type": "string"
        }
      }
    },
    "NxCellPosition": {
      "type": "struct",
      "entries": {
        "X": {
          "description": "Position of the cell on the x-axis.",
          "type": "int"
        },
        "Y": {
          "description": "Position of the cell on the y-axis.",
          "type": "int"
        }
      }
    },
    "NxCellRows": {
      "type": "slice",
      "items": {
        "type": "#/definitions/NxCell"
      }
    },
    "NxContainerEntry": {
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Set of data.",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Info": {
          "description": "Information about the object.",
          "type": "#/definitions/NxInfo"
        },
        "Meta": {
          "description": "Information on publishing and permissions.",
          "type": "#/definitions/NxMeta"
        }
      }
    },
    "NxContinuousDataOptions": {
      "type": "struct",
      "entries": {
        "End": {
          "description": "End value.",
          "type": "#/definitions/Float64"
        },
        "MaxNbrTicks": {
          "description": "Maximum number of ticks.",
          "type": "int"
        },
        "MaxNumberLines": {
          "description": "Maximum number of lines.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "NbrPoints": {
          "description": "Number of bins for binning.",
          "type": "int"
        },
        "Start": {
          "description": "Start value.",
          "type": "#/definitions/Float64"
        }
      }
    },
    "NxContinuousRangeSelectInfo": {
      "type": "struct",
      "entries": {
        "DimIx": {
          "description": "Dimension index.",
          "type": "int"
        },
        "Range": {
          "description": "Range information.",
          "type": "#/definitions/Range"
        }
      }
    },
    "NxCurrentSelectionItem": {
      "type": "struct",
      "entries": {
        "Field": {
          "description": "Name of the field that is selected.",
          "type": "string"
        },
        "IsHidden": {
          "description": "Optional parameter. Indicates if the selection is to be hidden in the Selections bar.\nIs set to true if the current selection is hidden.",
          "type": "bool"
        },
        "IsNum": {
          "description": "This parameter is displayed if its value is true.\nIs set to true if the field is a numeric.\nThis parameter is optional.",
          "type": "bool"
        },
        "Locked": {
          "description": "This parameter is displayed if its value is true.\nIs set to true if the field is locked.\nThis parameter is optional.",
          "type": "bool"
        },
        "NotSelectedFieldSelectionInfo": {
          "description": "Information about the fields that are not selected.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxFieldSelectionInfo"
          }
        },
        "OneAndOnlyOne": {
          "description": "This parameter is displayed if its value is true.\nProperty that is set to a field. Is set to true if the field cannot be unselected.\nThis parameter is optional.",
          "type": "bool"
        },
        "RangeInfo": {
          "description": "Information about the range of selected values.\nIs empty if there is no range of selected values.",
          "type": "slice",
          "items": {
            "type": "#/definitions/RangeSelectInfo"
          }
        },
        "ReadableName": {
          "description": "Label that, if defined, is displayed in current selections instead of the actual expression.",
          "type": "string"
        },
        "Selected": {
          "description": "Values that are selected.",
          "type": "string"
        },
        "SelectedCount": {
          "description": "Number of values that are selected.",
          "type": "int"
        },
        "SelectedFieldSelectionInfo": {
          "description": "Information about the fields that are selected.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxFieldSelectionInfo"
          }
        },
        "SelectionThreshold": {
          "description": "Maximum values to show in the current selections.\nThe default value is 6.",
          "type": "int"
        },
        "SortIndex": {
          "description": "Sort index of the field. Indexing starts from 0.",
          "type": "int"
        },
        "StateCounts": {
          "description": "Number of values in a particular state.",
          "type": "#/definitions/NxStateCounts"
        },
        "TextSearch": {
          "description": "Text that was used for the search. This parameter is filled when searching for a value and selecting it.\nThis parameter is optional.",
          "type": "string"
        },
        "Total": {
          "description": "Number of values in the field.",
          "type": "int"
        }
      }
    },
    "NxDataAreaPage": {
      "type": "struct",
      "entries": {
        "Height": {
          "description": "Height of the page.\nThe difference between qTop and qHeight gives the lowest possible value of the second measure (the measure on the y-axis).",
          "type": "#/definitions/Float64"
        },
        "Left": {
          "description": "Position from the left.\nCorresponds to the lowest possible value of the first measure (the measure on the x-axis).",
          "type": "#/definitions/Float64"
        },
        "Top": {
          "description": "Position from the top.\nCorresponds to the highest possible value of the second measure (the measure on the y-axis).",
          "type": "#/definitions/Float64"
        },
        "Width": {
          "description": "Width of the page.\nCorresponds to the highest possible value of the first measure (the measure on the x-axis).",
          "type": "#/definitions/Float64"
        }
      }
    },
    "NxDataPage": {
      "type": "struct",
      "entries": {
        "Area": {
          "description": "Size and offset of the data in the matrix.",
          "type": "#/definitions/Rect"
        },
        "IsReduced": {
          "description": "Is set to true, if the data have been reduced.\nThe default value is false.",
          "type": "bool"
        },
        "Matrix": {
          "description": "Array of data.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxCellRows"
          }
        },
        "Tails": {
          "description": "Array of tails.\nIs used for hypercube objects with multiple dimensions. It might happen that due to the window size some elements in a group cannot be displayed in the same page as the other elements of the group. Elements of a group of dimensions can be part of the previous or the next tail.\nIf there is no tail, the array is empty [ ] .",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxGroupTail"
          }
        }
      }
    },
    "NxDerivedField": {
      "type": "struct",
      "entries": {
        "Expr": {
          "description": "Expression of the derived field.\nExample:\nIf qName is OrderDate.MyDefinition.Year , the expression is as follows:\n_=${Mydefinition(OrderDate).Year}_",
          "type": "string"
        },
        "Id": {
          "description": "Identifier of the derived field.\nThe identifier is unique.",
          "type": "string"
        },
        "Method": {
          "description": "Method name associated to the derived field.",
          "type": "string"
        },
        "Name": {
          "description": "Combination of field name, definition and method.\nExample:\n_OrderDate.MyDefinition.Year_",
          "type": "string"
        },
        "Tags": {
          "description": "List of tags.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxDerivedFieldDescriptionList": {
      "type": "struct",
      "entries": {
        "DerivedFieldLists": {
          "description": "Information about the derived fields.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDerivedFieldsData"
          }
        }
      }
    },
    "NxDerivedFieldsData": {
      "type": "struct",
      "entries": {
        "DerivedDefinitionName": {
          "description": "Name of the derived definition.",
          "type": "string"
        },
        "FieldDefs": {
          "description": "List of the derived fields.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDerivedField"
          }
        },
        "GroupDefs": {
          "description": "List of the derived groups.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxDerivedGroup"
          }
        },
        "Tags": {
          "description": "List of tags on the derived fields.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxDerivedGroup": {
      "type": "struct",
      "entries": {
        "FieldDefs": {
          "description": "List of the derived fields in the group.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "Grouping type.\nThe grouping should be either H or C (Grouping is mandatory for derived definitions).\nThe parameter is mandatory.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "Id": {
          "description": "Identifier of the group.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the derived group.",
          "type": "string"
        }
      }
    },
    "NxDimension": {
      "description": "Either qDef or qLibraryId must be set, but not both.\nIf the dimension is set in the hypercube and not in the library, this dimension cannot be shared with other objects.\nA dimension that is set in the library can be used by many objects.",
      "type": "struct",
      "entries": {
        "AttributeDimensions": {
          "description": "List of attribute dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrDimDef"
          }
        },
        "AttributeExpressions": {
          "description": "List of attribute expressions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrExprDef"
          }
        },
        "CalcCond": {
          "description": "Specifies a calculation condition, which must be fulfilled for the dimension to be calculated.\nIf the calculation condition is not met, the dimension is excluded from the calculation.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/ValueExpr"
        },
        "CalcCondition": {
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/NxCalcCond"
        },
        "Def": {
          "description": "Refers to a dimension stored in the hypercube.",
          "type": "#/definitions/NxInlineDimensionDef"
        },
        "IncludeElemValue": {
          "type": "bool"
        },
        "LibraryId": {
          "description": "Refers to a dimension stored in the library.",
          "type": "string"
        },
        "NullSuppression": {
          "description": "If set to true, no null values are returned.",
          "type": "bool"
        },
        "OtherLabel": {
          "description": "This property is used when some dimension limits are set.\nLabel of the Others group. The default label is Others .\nExample:\n_\"qOtherLabel\":\"= \u003clabel\u003e\"_\nor\n_\"qOtherLabel\":{\"qExpr\":\"= \u003clabel\u003e\"}_\nWhere:\n\n• \u003c label \u003e is the label of the Others group.",
          "type": "#/definitions/StringExpr"
        },
        "OtherTotalSpec": {
          "description": "Sets the dimension limits. Each dimension of a hypercube is configured separately.\nDefines if some values (grouped as Others ) should be grouped together in the visualization.\nFor example in a pie chart all values lower than 200 could be grouped together.",
          "type": "#/definitions/OtherTotalSpecProp"
        },
        "ShowAll": {
          "description": "If set to true, all dimension values are shown.",
          "type": "bool"
        },
        "ShowTotal": {
          "type": "bool"
        },
        "TotalLabel": {
          "description": "If this property is set, the total of the calculated values is returned.\nThe default label is Total .\nExample:\n_\"qTotalLabel\":\"= \u003clabel\u003e\"_\nor\n_\"qTotalLabel\":{\"qExpr\":\"= \u003clabel\u003e\"}_\nWhere:\n\n• \u003c label \u003e is the label of the Total group.",
          "type": "#/definitions/StringExpr"
        }
      }
    },
    "NxDimensionInfo": {
      "type": "struct",
      "entries": {
        "ApprMaxGlyphCount": {
          "description": "Length of the longest value in the field.",
          "type": "int"
        },
        "AttrDimInfo": {
          "description": "Array of attribute dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrDimInfo"
          }
        },
        "AttrExprInfo": {
          "description": "Array of attribute expressions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrExprInfo"
          }
        },
        "CalcCondMsg": {
          "description": "The message displayed if calculation condition is not fulfilled.",
          "type": "string"
        },
        "Cardinal": {
          "description": "Number of distinct field values.",
          "deprecated": true,
          "x-qlik-deprecation-description": "This will be removed in a future version",
          "type": "int"
        },
        "Cardinalities": {
          "description": "Dimension Cardinalities",
          "type": "#/definitions/NxCardinalities"
        },
        "ContinuousAxes": {
          "description": "Is continuous axis used.",
          "type": "bool"
        },
        "DerivedField": {
          "description": "Is derived field is used as a dimension.",
          "type": "bool"
        },
        "DimensionType": {
          "description": "Binary format of the field.\n\nOne of:\n\n• D or NX_DIMENSION_TYPE_DISCRETE\n\n• N or NX_DIMENSION_TYPE_NUMERIC\n\n• T or NX_DIMENSION_TYPE_TIME",
          "type": "string"
        },
        "Error": {
          "description": "This parameter is optional.\nGives information on the error.",
          "type": "#/definitions/NxValidationError"
        },
        "FallbackTitle": {
          "description": "Corresponds to the label of the dimension that is selected.\nIf the label is not defined then the field name is used.",
          "type": "string"
        },
        "GroupFallbackTitles": {
          "description": "Array of dimension labels.\nContains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "GroupFieldDefs": {
          "description": "Array of field names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "GroupPos": {
          "description": "Index of the dimension that is currently in use.\n_qGroupPos_ is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.",
          "type": "int"
        },
        "Grouping": {
          "description": "Defines the grouping.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "IsAutoFormat": {
          "description": "This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition.",
          "type": "bool"
        },
        "IsCalculated": {
          "description": "True if this is a calculated dimension.",
          "type": "bool"
        },
        "IsCyclic": {
          "description": "Is a cyclic dimension used.",
          "type": "bool"
        },
        "IsOneAndOnlyOne": {
          "description": "If set to true, it means that the field always has one and only one selected value.",
          "type": "bool"
        },
        "IsSemantic": {
          "description": "If set to true, it means that the field is a semantic.",
          "type": "bool"
        },
        "LibraryId": {
          "description": "Refers to a dimension stored in the library.",
          "type": "string"
        },
        "Locked": {
          "description": "Is set to true if the field is locked.",
          "type": "bool"
        },
        "Max": {
          "description": "Maximum value.",
          "type": "#/definitions/Float64"
        },
        "Min": {
          "description": "Minimum value.",
          "type": "#/definitions/Float64"
        },
        "NumFormat": {
          "description": "Format of the field.\nThis parameter is optional.",
          "type": "#/definitions/FieldAttributes"
        },
        "ReverseSort": {
          "description": "If set to true, it inverts the sort criteria in the field.",
          "type": "bool"
        },
        "SortIndicator": {
          "description": "Sort indicator.\nThe default value is no sorting.\nThis parameter is optional.\n\nOne of:\n\n• N or NX_SORT_INDICATE_NONE\n\n• A or NX_SORT_INDICATE_ASC\n\n• D or NX_SORT_INDICATE_DESC",
          "type": "string"
        },
        "StateCounts": {
          "description": "Number of values in a particular state.",
          "type": "#/definitions/NxStateCounts"
        },
        "Tags": {
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxDownloadInfo": {
      "type": "struct",
      "entries": {
        "FileSize": {
          "description": "The filesize of the reduced app.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "Url": {
          "description": "URL to download the reduced app on.",
          "type": "string"
        }
      }
    },
    "NxDownloadOptions": {
      "type": "struct",
      "entries": {
        "BookmarkId": {
          "description": "Bookmark Id to apply before reducing the application.",
          "type": "string"
        },
        "Expires": {
          "description": "Time in seconds for how long the download link is valid.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        }
      }
    },
    "NxEngineVersion": {
      "type": "struct",
      "entries": {
        "ComponentVersion": {
          "description": "Version number of the Qlik engine component.",
          "type": "string"
        }
      }
    },
    "NxFieldDescription": {
      "description": "NxDerivedFieldsdata:\n\n  +------------------------+--------------------------------+----------------+\n  |          NAME          |          DESCRIPTION           |      TYPE      |\n  +------------------------+--------------------------------+----------------+\n  | qDerivedDefinitionName | Name of the derived            | String         |\n  |                        | definition.                    |                |\n  | qFieldDefs             | List of the derived fields.    | Array of       |\n  |                        |                                | NxDerivedField |\n  | qGroupDefs             | List of the derived groups.    | Array of       |\n  |                        |                                | NxDerivedGroup |\n  | qTags                  | List of tags on the derived    | Array of       |\n  |                        | fields.                        | String         |\n  +------------------------+--------------------------------+----------------+",
      "type": "struct",
      "entries": {
        "AndMode": {
          "description": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false.",
          "type": "bool"
        },
        "Cardinal": {
          "description": "Number of distinct field values",
          "type": "int"
        },
        "DerivedFieldData": {
          "description": "Lists the derived fields if any.",
          "type": "#/definitions/NxDerivedFieldDescriptionList"
        },
        "IsDefinitionOnly": {
          "description": "If set to true, it means that the field is a field on the fly.",
          "type": "bool"
        },
        "IsDetail": {
          "description": "Is used for Direct Discovery.\nIf set to true, it means that the type of the field is detail.",
          "type": "bool"
        },
        "IsHidden": {
          "description": "If set to true, it means that the field is hidden.",
          "type": "bool"
        },
        "IsImplicit": {
          "description": "Is used for Direct Discovery.\nIf set to true, it means that the type of the field is measure.",
          "type": "bool"
        },
        "IsSemantic": {
          "description": "If set to true, it means that the field is a semantic.",
          "type": "bool"
        },
        "IsSystem": {
          "description": "If set to true, it means that the field is a system field.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the field",
          "type": "string"
        },
        "ReadableName": {
          "type": "string"
        },
        "Tags": {
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxFieldProperties": {
      "type": "struct",
      "entries": {
        "OneAndOnlyOne": {
          "description": "This parameter is set to true, if the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe property OneAndOnlyOne can be set to true if one and only value has been selected in the field prior to setting the property.",
          "type": "bool"
        }
      }
    },
    "NxFieldSelectionInfo": {
      "type": "struct",
      "entries": {
        "FieldSelectionMode": {
          "description": "Selection mode.\n\nProperties:\n\nOne of:\n\n• NORMAL for a selection in normal mode.\n\n• AND for a selection in AND mode.\n\n• NOT for a selection NOT in AND mode.\nOne of:\n\n• NORMAL or SELECTION_MODE_NORMAL\n\n• AND or SELECTION_MODE_AND\n\n• NOT or SELECTION_MODE_NOT",
          "type": "string"
        },
        "Name": {
          "description": "Name of the field.",
          "type": "string"
        }
      }
    },
    "NxGetBookmarkOptions": {
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Set of data.",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Types": {
          "description": "List of object types.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxGetObjectOptions": {
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Set of data.",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "IncludeSessionObjects": {
          "description": "Set to true to include session objects.\nThe default value is false.",
          "type": "bool"
        },
        "Types": {
          "description": "List of object types.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxGroupTail": {
      "type": "struct",
      "entries": {
        "Down": {
          "description": "Number of elements that are part of the next tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight\nIs not shown if the value is 0.\nThis parameter is optional.",
          "type": "int"
        },
        "Up": {
          "description": "Number of elements that are part of the previous tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .\nIs not shown if the value is 0.\nThis parameter is optional.",
          "type": "int"
        }
      }
    },
    "NxHighlightRanges": {
      "type": "struct",
      "entries": {
        "Ranges": {
          "description": "Ranges of highlighted values.",
          "type": "slice",
          "items": {
            "type": "#/definitions/CharRange"
          }
        }
      }
    },
    "NxInfo": {
      "type": "struct",
      "entries": {
        "Id": {
          "description": "Identifier of the object.\nIf the chosen identifier is already in use, the engine automatically sets another one.\nIf an identifier is not set, the engine automatically sets one.\nThis parameter is optional.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the object.\nThis parameter is mandatory.",
          "type": "string"
        }
      }
    },
    "NxInlineDimensionDef": {
      "type": "struct",
      "entries": {
        "ActiveField": {
          "description": "Index of the active field in a cyclic dimension.\nThis parameter is optional. The default value is 0.\nThis parameter is used in case of cyclic dimensions ( qGrouping is C).",
          "type": "int"
        },
        "FieldDefs": {
          "description": "Array of field names.\nWhen creating a grouped dimension, more than one field name is defined.\nThis parameter is optional.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "FieldLabels": {
          "description": "Array of field labels.\nThis parameter is optional.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "Used to define a cyclic group or drill-down group.\nDefault value is no grouping.\nThis parameter is optional.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "LabelExpression": {
          "description": "Label expression.\nThis parameter is optional.",
          "type": "string"
        },
        "NumberPresentations": {
          "description": "Defines the format of the value.\nThis parameter is optional.",
          "type": "slice",
          "items": {
            "type": "#/definitions/FieldAttributes"
          }
        },
        "ReverseSort": {
          "description": "If set to true, it inverts the sort criteria in the field.",
          "type": "bool"
        },
        "SortCriterias": {
          "description": "Defines the sorting criteria in the field.\nDefault is to sort by alphabetical order, ascending.\nThis parameter is optional.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SortCriteria"
          }
        }
      }
    },
    "NxInlineMeasureDef": {
      "type": "struct",
      "entries": {
        "Accumulate": {
          "description": "* 0 means no accumulation\n\n• 1 means full accumulation (each y-value accumulates all previous y-values of the expression)\n\n• ≥ 2 means accumulate as many steps as the qAccumulate value\nDefault value is 0.\nThis parameter is optional.",
          "type": "int"
        },
        "ActiveExpression": {
          "description": "Index of the active expression in a cyclic measure. The indexing starts from 0.\nThe default value is 0.\nThis parameter is optional.",
          "type": "int"
        },
        "AggrFunc": {
          "description": "Aggregate function.\nFor more information on the aggregate function syntax, see the section Working with Qlik Sense on the online help portal.\nThe default value is 0 (Sum of rows)\nThis parameter is optional.",
          "type": "string"
        },
        "BrutalSum": {
          "description": "If set to true, the sum of rows total should be used rather than real expression total.\nThis parameter is optional and applies to straight tables.\nDefault value is false.\nIf using the Qlik Sense interface, it means that the total mode is set to Expression Total .",
          "type": "bool"
        },
        "Def": {
          "description": "Definition of the expression in the measure.\nExample: Sum (OrderTotal)\nThis parameter is mandatory.",
          "type": "string"
        },
        "Description": {
          "description": "Description of the measure.\nAn empty string is returned as a default value.\nThis parameter is optional.",
          "type": "string"
        },
        "Expressions": {
          "description": "Array of expressions. This parameter is used in case of cyclic measures ( qGrouping is C). List of the expressions in the cyclic group.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "Default value is no grouping.\nThis parameter is optional.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "Label": {
          "description": "Name of the measure.\nAn empty string is returned as a default value.\nThis parameter is optional.",
          "type": "string"
        },
        "LabelExpression": {
          "description": "Label expression.\nThis parameter is optional.",
          "type": "string"
        },
        "NumFormat": {
          "description": "Format of the field.\nThis parameter is optional.",
          "type": "#/definitions/FieldAttributes"
        },
        "Relative": {
          "description": "If set to true, percentage values are returned instead of absolute numbers.\nDefault value is false.\nThis parameter is optional.",
          "type": "bool"
        },
        "ReverseSort": {
          "description": "If set to true, it inverts the sort criteria in the field.",
          "type": "bool"
        },
        "Tags": {
          "description": "Name connected to the measure that is used for search purposes.\nA measure can have several tags.\nThis parameter is optional.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxLayoutErrors": {
      "type": "struct",
      "entries": {
        "ErrorCode": {
          "description": "Error code.",
          "type": "int"
        }
      }
    },
    "NxLibraryDimension": {
      "type": "struct",
      "entries": {
        "FieldDefs": {
          "description": "Array of dimension names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "FieldLabels": {
          "description": "Array of dimension labels.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "Information about the grouping.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "LabelExpression": {
          "type": "string"
        }
      }
    },
    "NxLibraryDimensionDef": {
      "type": "struct",
      "entries": {
        "FieldDefs": {
          "description": "Array of dimension names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "FieldLabels": {
          "description": "Array of dimension labels.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "Information about the grouping.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "LabelExpression": {
          "type": "string"
        }
      }
    },
    "NxLibraryMeasure": {
      "description": "Information about the library measure. Is the layout for NxLibraryMeasureDef.",
      "type": "struct",
      "entries": {
        "ActiveExpression": {
          "type": "int"
        },
        "Def": {
          "type": "string"
        },
        "Expressions": {
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "One of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "LabelExpression": {
          "type": "string"
        }
      }
    },
    "NxLibraryMeasureDef": {
      "type": "struct",
      "entries": {
        "ActiveExpression": {
          "description": "Index to the active expression in a measure.",
          "type": "int"
        },
        "Def": {
          "description": "Definition of the measure.",
          "type": "string"
        },
        "Expressions": {
          "description": "Array of expressions.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Grouping": {
          "description": "Used to define a cyclic group or drill-down group.\nDefault value is no grouping.\nThis parameter is optional.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "Label": {
          "description": "Label of the measure.",
          "type": "string"
        },
        "LabelExpression": {
          "description": "Optional expression used for dynamic label.",
          "type": "string"
        }
      }
    },
    "NxLinkedObjectInfo": {
      "type": "struct",
      "entries": {
        "Info": {
          "description": "Information about the linked object.",
          "type": "#/definitions/NxInfo"
        },
        "RootId": {
          "description": "Identifier of the root object.\nIf the linked object is a child, the root identifier is the identifier of the parent.\nIf the linked object is an app object, the root identifier is the same than the identifier of the linked object since the linked object is a root object.",
          "type": "string"
        }
      }
    },
    "NxListObjectExpression": {
      "type": "struct",
      "entries": {
        "Error": {
          "description": "Gives information on the error.\nThis parameter is optional.",
          "type": "#/definitions/NxLayoutErrors"
        },
        "Expr": {
          "description": "Value of the expression.",
          "type": "string"
        }
      }
    },
    "NxListObjectExpressionDef": {
      "type": "struct",
      "entries": {
        "Expr": {
          "description": "Value of the expression.",
          "type": "string"
        },
        "LibraryId": {
          "description": "Refers to an expression stored in the library.",
          "type": "string"
        }
      }
    },
    "NxMatchingFieldInfo": {
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name of the field.",
          "type": "string"
        },
        "Tags": {
          "description": "List of tags.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxMeasure": {
      "description": "Either qDef or qLibraryId must be set, but not both.\nIf the measure is set in the hypercube and not in the library, this measure cannot be shared with other objects.\nA measure that is set in the library can be used by many objects.\n\nexpressions are complementary expressions associated to a measure. For example, you can decide to change the background color of a visualization depending on the values of the measure.\nAttribute expressions do not affect the layout of an object. The sorting order is unchanged.",
      "type": "struct",
      "entries": {
        "AttributeDimensions": {
          "description": "List of attribute dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrDimDef"
          }
        },
        "AttributeExpressions": {
          "description": "List of attribute expressions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrExprDef"
          }
        },
        "CalcCond": {
          "description": "Specifies a calculation condition, which must be fulfilled for the measure to be calculated.\nIf the calculation condition is not met, the measure is excluded from the calculation.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/ValueExpr"
        },
        "CalcCondition": {
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the measure is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/NxCalcCond"
        },
        "Def": {
          "description": "Refers to a measure stored in the hypercube.",
          "type": "#/definitions/NxInlineMeasureDef"
        },
        "LibraryId": {
          "description": "Refers to a measure stored in the library.",
          "type": "string"
        },
        "SortBy": {
          "description": "Defines the sort criteria.\nThe default value is sort by ascending alphabetic order.\nThis property is optional.",
          "type": "#/definitions/SortCriteria"
        },
        "TrendLines": {
          "description": "Specifies trendlines for this measure.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTrendlineDef"
          }
        }
      }
    },
    "NxMeasureInfo": {
      "description": "Layout for NxInlineMeasureDef.",
      "type": "struct",
      "entries": {
        "ApprMaxGlyphCount": {
          "description": "Length of the longest value in the field.",
          "type": "int"
        },
        "AttrDimInfo": {
          "description": "List of attribute dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrDimInfo"
          }
        },
        "AttrExprInfo": {
          "description": "List of attribute expressions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrExprInfo"
          }
        },
        "CalcCondMsg": {
          "description": "The message displayed if calculation condition is not fulfilled.",
          "type": "string"
        },
        "Cardinal": {
          "description": "Number of distinct field values.",
          "type": "int"
        },
        "Error": {
          "description": "This parameter is optional.\nGives information on the error.",
          "type": "#/definitions/NxValidationError"
        },
        "FallbackTitle": {
          "description": "Corresponds to the label of the measure.\nIf the label is not defined then the measure name is used.",
          "type": "string"
        },
        "IsAutoFormat": {
          "description": "This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's expression.",
          "type": "bool"
        },
        "LibraryId": {
          "description": "Refers to a dimension stored in the library.",
          "type": "string"
        },
        "Max": {
          "description": "Highest value in the range.",
          "type": "#/definitions/Float64"
        },
        "Min": {
          "description": "Lowest value in the range.",
          "type": "#/definitions/Float64"
        },
        "NumFormat": {
          "description": "Format of the field.\nThis parameter is optional.",
          "type": "#/definitions/FieldAttributes"
        },
        "ReverseSort": {
          "description": "If set to true, it inverts the sort criteria in the field.",
          "type": "bool"
        },
        "SortIndicator": {
          "description": "Sort indicator.\nThe default value is no sorting.\nThis parameter is optional.\n\nOne of:\n\n• N or NX_SORT_INDICATE_NONE\n\n• A or NX_SORT_INDICATE_ASC\n\n• D or NX_SORT_INDICATE_DESC",
          "type": "string"
        },
        "TrendLines": {
          "description": "Calculated trendlines",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTrendline"
          }
        }
      }
    },
    "NxMeta": {
      "description": "Layout for NxMetaDef.",
      "type": "struct",
      "entries": {
        "Name": {
          "description": "Name.\nThis property is optional.",
          "type": "string"
        }
      }
    },
    "NxMetaDef": {
      "description": "Used to collect meta data.\n\nProperties:\n\nSemantic type with an empty structure.",
      "type": "struct"
    },
    "NxMultiRangeSelectInfo": {
      "type": "struct",
      "entries": {
        "ColumnsToSelect": {
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Ranges": {
          "type": "slice",
          "items": {
            "type": "#/definitions/NxRangeSelectInfo"
          }
        }
      }
    },
    "NxPage": {
      "type": "struct",
      "entries": {
        "Height": {
          "description": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).",
          "type": "int"
        },
        "Left": {
          "description": "Position from the left.\nCorresponds to the first column.",
          "type": "int"
        },
        "Top": {
          "description": "Position from the top.\nCorresponds to the first row.",
          "type": "int"
        },
        "Width": {
          "description": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).",
          "type": "int"
        }
      }
    },
    "NxPageTreeLevel": {
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "Depth": {
          "description": "Number of dimensions to include in the tree.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "Left": {
          "description": "The first dimension that is to be part of the tree, counted from the left. For example, if qLeft is equal to 1, omit nodes from the first dimension in the current sort order.",
          "type": "int"
        }
      }
    },
    "NxPageTreeNode": {
      "description": "Defines an area of the tree to be fetched.",
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "AllValues": {
          "description": "When set to true, generated nodes (based on current selection) will be inserted into the returned tree even when there is no actual value. For example, suppose you are looking for hybrid car sales at all car dealerships. Normally, only dealerships where hybrid cars are sold would be part of the returned tree but with qAllValues set to true, all available dealerships will be included regardless if they sold any hybrid cars or not.",
          "type": "bool"
        },
        "Area": {
          "description": "The area of the tree to be fetched. If no area is defined on a dimension, all existing nodes are included.",
          "type": "#/definitions/Rect"
        }
      }
    },
    "NxPatch": {
      "type": "struct",
      "entries": {
        "Op": {
          "description": "Operation to perform.\n\nOne of:\n\n• add or Add\n\n• remove or Remove\n\n• replace or Replace",
          "type": "string"
        },
        "Path": {
          "description": "Path to the property to add, remove or replace.",
          "type": "string"
        },
        "Value": {
          "description": "This parameter is not used in a remove operation.\nCorresponds to the value of the property to add or to the new value of the property to update.\nExamples:\n\"false\", \"2\", \"\\\"New title\\\"\"",
          "type": "string"
        }
      }
    },
    "NxPatches": {
      "type": "struct",
      "entries": {
        "Children": {
          "description": "Array with child objects and their patches.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPatches"
          }
        },
        "Info": {
          "description": "Identifier and type of the object.",
          "type": "#/definitions/NxInfo"
        },
        "Patches": {
          "description": "Array with patches.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPatch"
          }
        }
      }
    },
    "NxPivotDimensionCell": {
      "type": "struct",
      "entries": {
        "AttrDims": {
          "description": "Information about attribute dimensions.",
          "type": "#/definitions/NxAttributeDimValues"
        },
        "AttrExps": {
          "description": "Information about attribute expressions.\nThe array is empty [ ] when there is no attribute expressions.",
          "type": "#/definitions/NxAttributeExpressionValues"
        },
        "CanCollapse": {
          "description": "If set to true, it means that the cell can be collapsed.\nThis parameter is not returned if it is set to false.",
          "type": "bool"
        },
        "CanExpand": {
          "description": "If set to true, it means that the cell can be expanded.\nThis parameter is not returned if it is set to false.",
          "type": "bool"
        },
        "Down": {
          "description": "Number of elements that are part of the next tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .",
          "type": "int"
        },
        "ElemNo": {
          "description": "Rank number of the value.\nIf set to -1, it means that the value is not an element number.",
          "type": "int"
        },
        "SubNodes": {
          "description": "Information about sub nodes (or sub cells).\nThe array is empty [ ] when there is no sub nodes.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPivotDimensionCell"
          }
        },
        "Text": {
          "description": "Some text.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the cell.\n\nOne of:\n\n• V or NX_DIM_CELL_VALUE\n\n• E or NX_DIM_CELL_EMPTY\n\n• N or NX_DIM_CELL_NORMAL\n\n• T or NX_DIM_CELL_TOTAL\n\n• O or NX_DIM_CELL_OTHER\n\n• A or NX_DIM_CELL_AGGR\n\n• P or NX_DIM_CELL_PSEUDO\n\n• R or NX_DIM_CELL_ROOT\n\n• U or NX_DIM_CELL_NULL\n\n• G or NX_DIM_CELL_GENERATED",
          "type": "string"
        },
        "Up": {
          "description": "Number of elements that are part of the previous tail.\nThis number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .",
          "type": "int"
        },
        "Value": {
          "description": "Value of the cell.\nIs set to NaN , if the value is not a number.",
          "type": "#/definitions/Float64"
        }
      }
    },
    "NxPivotPage": {
      "type": "struct",
      "entries": {
        "Area": {
          "description": "Size and offset of the data in the matrix.",
          "type": "#/definitions/Rect"
        },
        "Data": {
          "description": "Array of data.",
          "type": "slice",
          "items": {
            "type": "#/definitions/ArrayOfNxValuePoint"
          }
        },
        "Left": {
          "description": "Information about the left dimension values of a pivot table.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPivotDimensionCell"
          }
        },
        "Top": {
          "description": "Information about the top dimension values of a pivot table. If there is no top dimension in the pivot table, information about the measures are given.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPivotDimensionCell"
          }
        }
      }
    },
    "NxPivotValuePoint": {
      "type": "struct",
      "entries": {
        "AttrDims": {
          "type": "#/definitions/NxAttributeDimValues"
        },
        "AttrExps": {
          "description": "Attribute expressions values.",
          "type": "#/definitions/NxAttributeExpressionValues"
        },
        "Label": {
          "description": "Label of the cell.\nThis parameter is optional.",
          "type": "string"
        },
        "Num": {
          "description": "Value of the cell.",
          "type": "#/definitions/Float64"
        },
        "Text": {
          "description": "Some text related to the cell.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the cell.\n\nOne of:\n\n• V or NX_DIM_CELL_VALUE\n\n• E or NX_DIM_CELL_EMPTY\n\n• N or NX_DIM_CELL_NORMAL\n\n• T or NX_DIM_CELL_TOTAL\n\n• O or NX_DIM_CELL_OTHER\n\n• A or NX_DIM_CELL_AGGR\n\n• P or NX_DIM_CELL_PSEUDO\n\n• R or NX_DIM_CELL_ROOT\n\n• U or NX_DIM_CELL_NULL\n\n• G or NX_DIM_CELL_GENERATED",
          "type": "string"
        }
      }
    },
    "NxRange": {
      "type": "struct",
      "entries": {
        "Count": {
          "description": "Number of characters in the field name.",
          "type": "int"
        },
        "From": {
          "description": "Position in the expression of the first character of the field name.",
          "type": "int"
        }
      }
    },
    "NxRangeSelectInfo": {
      "type": "struct",
      "entries": {
        "MeasureIx": {
          "description": "Number of the measure to select.\nNumbering starts from 0.",
          "type": "int"
        },
        "Range": {
          "description": "Range of values.",
          "type": "#/definitions/Range"
        }
      }
    },
    "NxSelectionCell": {
      "type": "struct",
      "entries": {
        "Col": {
          "description": "Column index to select.\nIndexing starts from 0.\nIf the cell's type is:\n\n• D, the index is based on the data matrix.\n\n• T, the index is based on the data matrix.\n\n• L, the index is based on the left dimensions indexes.",
          "type": "int"
        },
        "Row": {
          "description": "Row index to select.\nIndexing starts from 0.\nIf the cell's type is:\n\n• D, the index is based on the data matrix.\n\n• T, the index is based on the top dimensions indexes.\n\n• L, the index is based on the data matrix.",
          "type": "int"
        },
        "Type": {
          "description": "Type of cells to select.\n\nOne of:\n\n• D or NX_CELL_DATA\n\n• T or NX_CELL_TOP\n\n• L or NX_CELL_LEFT",
          "type": "string"
        }
      }
    },
    "NxSelectionInfo": {
      "type": "struct",
      "entries": {
        "InSelections": {
          "description": "Is set to true if the visualization is in selection mode.\nFor more information about the selection mode, see BeginSelections Method.",
          "type": "bool"
        },
        "MadeSelections": {
          "description": "Is set to true if the visualization is in selection mode and if some selections have been made while in selection mode.\nFor more information about the selection mode, see BeginSelections Method.",
          "type": "bool"
        }
      }
    },
    "NxSimpleDimValue": {
      "type": "struct",
      "entries": {
        "ElemNo": {
          "description": "Element number.",
          "type": "int"
        },
        "Text": {
          "description": "Text related to the attribute expression value.\nThis property is optional. No text is returned if the attribute expression value is a numeric.",
          "type": "string"
        }
      }
    },
    "NxSimpleValue": {
      "type": "struct",
      "entries": {
        "Num": {
          "description": "Numeric value of the attribute expression.\nSet to NaN (Not a Number) if the attribute expression value is not numeric.",
          "type": "#/definitions/Float64"
        },
        "Text": {
          "description": "Text related to the attribute expression value.",
          "type": "string"
        }
      }
    },
    "NxStackPage": {
      "type": "struct",
      "entries": {
        "Area": {
          "description": "Size and offset of the data in the matrix.",
          "type": "#/definitions/Rect"
        },
        "Data": {
          "description": "Array of data.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxStackedPivotCell"
          }
        }
      }
    },
    "NxStackedPivotCell": {
      "type": "struct",
      "entries": {
        "AttrDims": {
          "description": "Attribute dimensions values.",
          "type": "#/definitions/NxAttributeDimValues"
        },
        "AttrExps": {
          "description": "Attribute expressions values.",
          "type": "#/definitions/NxAttributeExpressionValues"
        },
        "CanCollapse": {
          "description": "If set to true, it means that the cell can be collapsed.\nThis parameter is not returned if it is set to false.",
          "type": "bool"
        },
        "CanExpand": {
          "description": "If set to true, it means that the cell can be expanded.\nThis parameter is not returned if it is set to false.",
          "type": "bool"
        },
        "Down": {
          "description": "Number of elements that are part of the next tail.",
          "type": "int"
        },
        "ElemNo": {
          "description": "Rank number of the value.\nIf set to -1, it means that the value is not an element number.",
          "type": "int"
        },
        "MaxPos": {
          "description": "Total of the positive values in the current group of cells.",
          "type": "#/definitions/Float64"
        },
        "MinNeg": {
          "description": "Total of the negative values in the current group of cells.",
          "type": "#/definitions/Float64"
        },
        "Row": {
          "description": "Row index in the data matrix.\nThe indexing starts from 0.",
          "type": "int"
        },
        "SubNodes": {
          "description": "Information about sub nodes (or sub cells).\nThe array is empty [ ] when there are no sub nodes.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxStackedPivotCell"
          }
        },
        "Text": {
          "description": "Some text.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the cell.\n\nOne of:\n\n• V or NX_DIM_CELL_VALUE\n\n• E or NX_DIM_CELL_EMPTY\n\n• N or NX_DIM_CELL_NORMAL\n\n• T or NX_DIM_CELL_TOTAL\n\n• O or NX_DIM_CELL_OTHER\n\n• A or NX_DIM_CELL_AGGR\n\n• P or NX_DIM_CELL_PSEUDO\n\n• R or NX_DIM_CELL_ROOT\n\n• U or NX_DIM_CELL_NULL\n\n• G or NX_DIM_CELL_GENERATED",
          "type": "string"
        },
        "Up": {
          "description": "Number of elements that are part of the previous tail.",
          "type": "int"
        },
        "Value": {
          "description": "Value of the cell.\nIs set to NaN , if the value is not a number.",
          "type": "#/definitions/Float64"
        }
      }
    },
    "NxStateCounts": {
      "type": "struct",
      "entries": {
        "Alternative": {
          "description": "Number of values in alternative state.",
          "type": "int"
        },
        "Deselected": {
          "description": "Number of values in deselected state.",
          "type": "int"
        },
        "Excluded": {
          "description": "Number of values in excluded state.",
          "type": "int"
        },
        "Locked": {
          "description": "Number of values in locked state.",
          "type": "int"
        },
        "LockedExcluded": {
          "description": "Number of values in locked excluded state.",
          "type": "int"
        },
        "Option": {
          "description": "Number of values in optional state.",
          "type": "int"
        },
        "Selected": {
          "description": "Number of values in selected state.",
          "type": "int"
        },
        "SelectedExcluded": {
          "description": "Number of values in selected excluded state.",
          "type": "int"
        }
      }
    },
    "NxStreamListEntry": {
      "description": "This struct is deprecated (not recommended to use).",
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "Id": {
          "description": "Identifier of the stream.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the stream.",
          "type": "string"
        }
      }
    },
    "NxTickCell": {
      "type": "struct",
      "entries": {
        "End": {
          "description": "End value.",
          "type": "#/definitions/Float64"
        },
        "Start": {
          "description": "Start value.",
          "type": "#/definitions/Float64"
        },
        "Text": {
          "description": "Tick's label.",
          "type": "string"
        }
      }
    },
    "NxTreeDataOption": {
      "description": "Specifies all the paging filters needed to define the tree to be fetched.",
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "MaxNbrOfNodes": {
          "description": "Maximum number of nodes in the tree. If this limit is exceeded, no nodes are returned. All nodes are counted.",
          "type": "int"
        },
        "TreeLevels": {
          "description": "Filters out complete dimensions from the fetched tree.",
          "type": "#/definitions/NxPageTreeLevel"
        },
        "TreeNodes": {
          "description": "Defines areas of the tree to be fetched. Areas must be defined left to right.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxPageTreeNode"
          }
        }
      }
    },
    "NxTreeDimensionDef": {
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "AttributeDimensions": {
          "description": "List of attribute dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrDimDef"
          }
        },
        "AttributeExpressions": {
          "description": "List of attribute expressions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrExprDef"
          }
        },
        "CalcCondition": {
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/NxCalcCond"
        },
        "Def": {
          "description": "Refers to a dimension.",
          "type": "#/definitions/NxInlineDimensionDef"
        },
        "LibraryId": {
          "description": "Refers to a dimension stored in the library.",
          "type": "string"
        },
        "NullSuppression": {
          "description": "If set to true, no null values are returned.",
          "type": "bool"
        },
        "OtherLabel": {
          "description": "This property is used when some dimension limits are set.\nLabel of the Others group. The default label is Others .\nExample:\n_\"qOtherLabel\":\"= \u003clabel\u003e\"_\nor\n_\"qOtherLabel\":{\"qExpr\":\"= \u003clabel\u003e\"}_\nWhere:\n\n• \u003c label \u003e is the label of the Others group.",
          "type": "#/definitions/StringExpr"
        },
        "OtherTotalSpec": {
          "description": "Sets the dimension limits. Each dimension of a hypercube is configured separately.\nDefines if some values (grouped as Others ) should be grouped together in the visualization.\nFor example in a pie chart all values lower than 200 could be grouped together.",
          "type": "#/definitions/OtherTotalSpecProp"
        },
        "ShowAll": {
          "description": "If set to true, all dimension values are shown.",
          "type": "bool"
        },
        "TotalLabel": {
          "description": "If this property is set, the total of the calculated values is returned.\nThe default label is Total .\nExample:\n_\"qTotalLabel\":\"= \u003clabel\u003e\"_\nor\n_\"qTotalLabel\":{\"qExpr\":\"= \u003clabel\u003e\"}_\nWhere:\n\n• \u003c label \u003e is the label of the Total group.",
          "type": "#/definitions/StringExpr"
        },
        "ValueExprs": {
          "description": "List of measures.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxMeasure"
          }
        }
      }
    },
    "NxTreeDimensionInfo": {
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "ApprMaxGlyphCount": {
          "description": "Length of the longest value in the field.",
          "type": "int"
        },
        "AttrDimInfo": {
          "description": "List of attribute dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrDimInfo"
          }
        },
        "AttrExprInfo": {
          "description": "List of attribute expressions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxAttrExprInfo"
          }
        },
        "CalcCondMsg": {
          "description": "The message displayed if calculation condition is not fulfilled.",
          "type": "string"
        },
        "Cardinal": {
          "description": "Number of distinct field values.",
          "deprecated": true,
          "x-qlik-deprecation-description": "This will be removed in a future version",
          "type": "int"
        },
        "Cardinalities": {
          "description": "Dimension Cardinalities",
          "type": "#/definitions/NxCardinalities"
        },
        "ContinuousAxes": {
          "description": "Is continuous axis used.",
          "type": "bool"
        },
        "DerivedField": {
          "description": "Is derived field is used as a dimension.",
          "type": "bool"
        },
        "DimensionType": {
          "description": "Binary format of the field.\n\nOne of:\n\n• D or NX_DIMENSION_TYPE_DISCRETE\n\n• N or NX_DIMENSION_TYPE_NUMERIC\n\n• T or NX_DIMENSION_TYPE_TIME",
          "type": "string"
        },
        "Error": {
          "description": "This parameter is optional.\nGives information on the error.",
          "type": "#/definitions/NxValidationError"
        },
        "FallbackTitle": {
          "description": "Corresponds to the label of the dimension that is selected.\nIf the label is not defined then the field name is used.",
          "type": "string"
        },
        "GroupFallbackTitles": {
          "description": "Array of dimension labels.\nContains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "GroupFieldDefs": {
          "description": "Array of field names.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "GroupPos": {
          "description": "Index of the dimension that is currently in use.\n_qGroupPos_ is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.",
          "type": "int"
        },
        "Grouping": {
          "description": "Defines the grouping.\n\nOne of:\n\n• N or GRP_NX_NONE\n\n• H or GRP_NX_HIEARCHY\n\n• C or GRP_NX_COLLECTION",
          "type": "string"
        },
        "IsAutoFormat": {
          "description": "This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition.",
          "type": "bool"
        },
        "IsCalculated": {
          "description": "True if this is a calculated dimension.",
          "type": "bool"
        },
        "IsCyclic": {
          "description": "Is a cyclic dimension used.",
          "type": "bool"
        },
        "IsOneAndOnlyOne": {
          "description": "If set to true, it means that the field always has one and only one selected value.",
          "type": "bool"
        },
        "IsSemantic": {
          "description": "If set to true, it means that the field is a semantic.",
          "type": "bool"
        },
        "LibraryId": {
          "description": "Refers to a dimension stored in the library.",
          "type": "string"
        },
        "Locked": {
          "description": "Is set to true if the field is locked.",
          "type": "bool"
        },
        "Max": {
          "description": "Maximum value.",
          "type": "#/definitions/Float64"
        },
        "MeasureInfo": {
          "description": "A List of measures to be calculated on this TreeDimension.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxMeasureInfo"
          }
        },
        "Min": {
          "description": "Minimum value.",
          "type": "#/definitions/Float64"
        },
        "NumFormat": {
          "description": "Format of the field.\nThis parameter is optional.",
          "type": "#/definitions/FieldAttributes"
        },
        "ReverseSort": {
          "description": "If set to true, it inverts the sort criteria in the field.",
          "type": "bool"
        },
        "SortIndicator": {
          "description": "Sort indicator.\nThe default value is no sorting.\nThis parameter is optional.\n\nOne of:\n\n• N or NX_SORT_INDICATE_NONE\n\n• A or NX_SORT_INDICATE_ASC\n\n• D or NX_SORT_INDICATE_DESC",
          "type": "string"
        },
        "StateCounts": {
          "description": "Number of values in a particular state.",
          "type": "#/definitions/NxStateCounts"
        },
        "Tags": {
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxTreeMultiRangeSelectInfo": {
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "Ranges": {
          "description": "An array of Ranges.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeRangeSelectInfo"
          }
        }
      }
    },
    "NxTreeNode": {
      "description": "Represents a dimension in the tree.",
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "AttrDims": {
          "description": "Attribute dimension values.",
          "type": "#/definitions/NxAttributeDimValues"
        },
        "AttrExps": {
          "description": "Attribute expression values.",
          "type": "#/definitions/NxAttributeExpressionValues"
        },
        "CanCollapse": {
          "description": "If set to true, it means that the cell can be collapsed.\nThis parameter is not returned if it is set to false.",
          "type": "bool"
        },
        "CanExpand": {
          "description": "If set to true, it means that the cell can be expanded.\nThis parameter is not returned if it is set to false.",
          "type": "bool"
        },
        "ElemNo": {
          "description": "Element number.",
          "type": "int"
        },
        "GroupPos": {
          "description": "The position of this node inside it's group in the complete tree, i.e. Not dependant om what part is fetched.",
          "type": "int"
        },
        "GroupSize": {
          "description": "Nbr of nodes connected to this node on the next level of the tree. Not dependant on what part is fetched.",
          "type": "int"
        },
        "MaxPos": {
          "description": "Total of the positive values in the current group of cells.",
          "type": "slice",
          "items": {
            "type": "#/definitions/Float64"
          }
        },
        "MinNeg": {
          "description": "Total of the negative values in the current group of cells.",
          "type": "slice",
          "items": {
            "type": "#/definitions/Float64"
          }
        },
        "Nodes": {
          "description": "The children of this node in the fetched tree structure.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeNode"
          }
        },
        "Row": {
          "description": "Row index in the data matrix.\nThe indexing starts from 0.",
          "type": "int"
        },
        "State": {
          "description": "Selection State of the value.\nThe default state for a measure is L(Locked).\n\nOne of:\n\n• L or LOCKED\n\n• S or SELECTED\n\n• O or OPTION\n\n• D or DESELECTED\n\n• A or ALTERNATIVE\n\n• X or EXCLUDED\n\n• XS or EXCL_SELECTED\n\n• XL or EXCL_LOCKED\n\n• NSTATES",
          "type": "string"
        },
        "Text": {
          "description": "The text version of the value, if available.",
          "type": "string"
        },
        "TreePath": {
          "description": "The GroupPos of all prior nodes connected to this one, one position for each level of the tree.\nIf this node is attached directly to the root, this array is empty.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Type": {
          "description": "Type of the cell.\n\nOne of:\n\n• V or NX_DIM_CELL_VALUE\n\n• E or NX_DIM_CELL_EMPTY\n\n• N or NX_DIM_CELL_NORMAL\n\n• T or NX_DIM_CELL_TOTAL\n\n• O or NX_DIM_CELL_OTHER\n\n• A or NX_DIM_CELL_AGGR\n\n• P or NX_DIM_CELL_PSEUDO\n\n• R or NX_DIM_CELL_ROOT\n\n• U or NX_DIM_CELL_NULL\n\n• G or NX_DIM_CELL_GENERATED",
          "type": "string"
        },
        "Value": {
          "description": "Value of the cell.\nIs set to NaN , if the value is not a number.",
          "type": "#/definitions/Float64"
        },
        "Values": {
          "description": "The measures for this node.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeValue"
          }
        }
      }
    },
    "NxTreeRangeSelectInfo": {
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "DimensionIx": {
          "description": "Number of the dimension to select\nmeasure from. Numbering starts from 0.",
          "type": "int"
        },
        "MeasureIx": {
          "description": "Number of the measure to select.\nNumbering starts from 0.",
          "type": "int"
        },
        "Range": {
          "description": "Range of values.",
          "type": "#/definitions/Range"
        }
      }
    },
    "NxTreeValue": {
      "description": "Represents a measure.",
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "AttrDims": {
          "description": "Attribute dimension values.",
          "type": "#/definitions/NxAttributeDimValues"
        },
        "AttrExps": {
          "description": "Attribute expression values.",
          "type": "#/definitions/NxAttributeExpressionValues"
        },
        "Text": {
          "description": "The text version of the value, if available.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the cell.\nIs set to NaN , if the value is not a number.",
          "type": "#/definitions/Float64"
        }
      }
    },
    "NxTrendline": {
      "description": "Information about the calculated trendline.",
      "x-qlik-stability": "experimental",
      "type": "struct",
      "entries": {
        "Coeff": {
          "description": "Coefficent c0..cN depending on the trendline type.",
          "type": "slice",
          "items": {
            "type": "#/definitions/Float64"
          }
        },
        "ElemNo": {
          "description": "Inner Dim elem no",
          "type": "int"
        },
        "Error": {
          "description": "This parameter is optional and is displayed in case of error.",
          "type": "#/definitions/NxValidationError"
        },
        "Expression": {
          "description": "Trendline expression",
          "type": "string"
        },
        "R2": {
          "description": "R2 score. Value between 0..1 that shows the correlation between the trendline and the data. Higher value means higher correlation.",
          "type": "#/definitions/Float64"
        },
        "Type": {
          "description": "Type of trendline\n\nOne of:\n\n• AVERAGE or Average\n\n• LINEAR or Linear\n\n• POLYNOMIAL2 or Polynomial2\n\n• POLYNOMIAL3 or Polynomial3\n\n• POLYNOMIAL4 or Polynomial4\n\n• EXPONENTIAL or Exponential\n\n• POWER or Power\n\n• LOG or Logarithmic",
          "type": "string"
        }
      }
    },
    "NxTrendlineDef": {
      "description": "Trendline input definition",
      "x-qlik-stability": "experimental",
      "type": "struct",
      "entries": {
        "CalcR2": {
          "description": "Set to true to calulatate the R2 score",
          "type": "bool"
        },
        "ContinuousXAxis": {
          "description": "Set if the numerical value of x axis dimension should be used\n\nOne of:\n\n• Never or CONTINUOUS_NEVER\n\n• Possible or CONTINUOUS_IF_POSSIBLE\n\n• Time or CONTINUOUS_IF_TIME",
          "type": "string"
        },
        "MultiDimMode": {
          "description": "If you have a hypercube with two dimensions and qXColIx refers to a dimension\nThis determines if you get one trendline of each value in the other dimension or\nOr trendline based on the sum of the value in the other dimension\nThe sum variant is only supported when qXColIx is 0 and qMode (on the hypercube) is K or T\n\nOne of:\n\n• Multi or TRENDLINE_MULTILINE\n\n• Sum or TRENDLINE_SUM",
          "type": "string"
        },
        "Type": {
          "description": "The type of trendline to calculate\n\nOne of:\n\n• AVERAGE or Average\n\n• LINEAR or Linear\n\n• POLYNOMIAL2 or Polynomial2\n\n• POLYNOMIAL3 or Polynomial3\n\n• POLYNOMIAL4 or Polynomial4\n\n• EXPONENTIAL or Exponential\n\n• POWER or Power\n\n• LOG or Logarithmic",
          "type": "string"
        },
        "XColIx": {
          "description": "The column in the hypercube to be used as x axis. Can point to either a dimension (numeric or text) or a measure\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        }
      }
    },
    "NxValidationError": {
      "type": "struct",
      "entries": {
        "Context": {
          "description": "Context related to the error, from the user app domain.\nIt can be the identifier of an object, a field name, a table name.\nThis parameter is optional.",
          "type": "string"
        },
        "ErrorCode": {
          "description": "Error code.\nThis parameter is always displayed in case of error.",
          "type": "int"
        },
        "ExtendedMessage": {
          "description": "Internal information from the server.\nThis parameter is optional.",
          "type": "string"
        }
      }
    },
    "NxVariableListItem": {
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data.",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Definition": {
          "description": "Definition of the variable. It can be a value or an expression.",
          "type": "string"
        },
        "Description": {
          "description": "Description of the variable.",
          "type": "string"
        },
        "Info": {
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "type": "#/definitions/NxInfo"
        },
        "IsConfig": {
          "description": "If set to true, it means that the variable is a system variable.\nA system variable provides information about the system and is set by the engine. The content cannot be changed by the user.\nThis parameter is optional.\nThe default value is false.",
          "type": "bool"
        },
        "IsReserved": {
          "description": "If set to true, it means that the variable is reserved.\nThe default value is false.\nThis parameter is optional.\nExamples:\n\n• ScriptError is a reserved variable, set by the engine.\n\n• DayNames is a reserved variable, set by the user.",
          "type": "bool"
        },
        "IsScriptCreated": {
          "description": "If set to true, it means that the variable was defined via script.",
          "type": "bool"
        },
        "Meta": {
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "type": "#/definitions/NxMeta"
        },
        "Name": {
          "description": "Name of the variable.",
          "type": "string"
        }
      }
    },
    "NxVariableProperties": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "IncludeInBookmark": {
          "description": "Set this property to true to update the variable when applying a bookmark.\nThe value of a variable can affect the state of the selections.\nThe default value is false.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the variable.",
          "type": "string"
        },
        "NumberPresentation": {
          "description": "Defines the format of the value of a variable.",
          "type": "#/definitions/FieldAttributes"
        },
        "PreDefinedList": {
          "description": "List of enumerations.\nThis property is used if qUsePredefListedValues is set to true.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "UsePredefListedValues": {
          "description": "The value of a variable can be an enumeration.\nSet this property to true to reflect the predefined values in an enumeration.",
          "type": "bool"
        }
      }
    },
    "NxViewPort": {
      "type": "struct",
      "entries": {
        "Height": {
          "description": "Height of the canvas in pixels.",
          "type": "int"
        },
        "Width": {
          "description": "Width of the canvas in pixels.",
          "type": "int"
        },
        "ZoomLevel": {
          "description": "Zoom level.",
          "type": "int"
        }
      }
    },
    "ObjectInterface": {
      "type": "struct",
      "entries": {
        "GenericId": {
          "description": "Object ID.",
          "type": "string"
        },
        "GenericType": {
          "description": "The type of the object.",
          "type": "string"
        },
        "Handle": {
          "description": "The handle used to connect to object.",
          "type": "int"
        },
        "Type": {
          "description": "The native type of the object.",
          "type": "string"
        }
      }
    },
    "OdbcDsn": {
      "type": "struct",
      "entries": {
        "Bit32": {
          "description": "Is set to true if the version of ODBC is 32-bit.\nThis parameter is optional. Default is false.",
          "type": "bool"
        },
        "Description": {
          "description": "Description of the ODBC connection.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the ODBC connection.",
          "type": "string"
        },
        "UserOnly": {
          "description": "Is set to true if the connection is User DSN. The connection works only for a specific user.\nDefault is false.\nThis parameter is optional.",
          "type": "bool"
        }
      }
    },
    "OleDbProvider": {
      "type": "struct",
      "entries": {
        "Bit32": {
          "description": "Is set to true if the version of the OLEDB provider is 32-bit.\nDefault is false.\nThis parameter is optional.",
          "type": "bool"
        },
        "Description": {
          "description": "Description of the OLEDB provider.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the OLEDB provider.",
          "type": "string"
        }
      }
    },
    "OtherTotalSpecProp": {
      "type": "struct",
      "entries": {
        "ApplyEvenWhenPossiblyWrongResult": {
          "description": "Set this parameter to true to allow the calculation of Others even if the engine detects some potential mistakes.\nFor example the country Russia is part of the continent Europe and Asia. If you have an hypercube with two dimensions Country and Continent and one measure Population, the engine can detect that the population of Russia is included in both the continent Asia and Europe.\nThe default value is true.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "bool",
          "ref-type": "pointer"
        },
        "ForceBadValueKeeping": {
          "description": "This parameter is used when qOtherMode is set to:\n\n• OTHER_ABS_LIMITED\n\n• OTHER_REL_LIMITED\n\n• OTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\nand when the dimension values include not numeric values.\nSet this parameter to true to include text values in the returned values.\nThe default value is true.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "bool",
          "ref-type": "pointer"
        },
        "GlobalOtherGrouping": {
          "description": "This parameter applies to inner dimensions.\nIf this parameter is set to true, the restrictions are calculated on the selected dimension only. All previous dimensions are ignored.\nThe default value is false.",
          "type": "bool"
        },
        "OtherCollapseInnerDimensions": {
          "description": "If set to true, it collapses the inner dimensions (if any) in the group Others .\nThe default value is false.",
          "type": "bool"
        },
        "OtherCounted": {
          "description": "Number of values to display. The number of values can be entered as a calculated formula.\nThis parameter is used when qOtherMode is set to OTHERCOUNTED_ .",
          "type": "#/definitions/ValueExpr"
        },
        "OtherLimit": {
          "description": "Value used to limit the dimension values. The limit can be entered as a calculated formula.\nThis parameter is used when qOtherMode is set to:\n\n• OTHER_ABS_LIMITED\n\n• OTHER_REL_LIMITED\n\n• OTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET",
          "type": "#/definitions/ValueExpr"
        },
        "OtherLimitMode": {
          "description": "Sets the limit for the Others mode.\nThis parameter is used when qOtherMode is set to:\n\n• OTHER_ABS_LIMITED\n\n• OTHER_REL_LIMITED\n\n• OTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\nOne of:\n\n• OTHER_GE_LIMIT\n\n• OTHER_LE_LIMIT\n\n• OTHER_GT_LIMIT\n\n• OTHER_LT_LIMIT",
          "type": "string"
        },
        "OtherMode": {
          "description": "Determines how many dimension values are displayed.\nThe default value is OTHEROFF_ .\n\nOne of:\n\n• OTHER_OFF\n\n• OTHER_COUNTED\n\n• OTHER_ABS_LIMITED\n\n• OTHER_ABS_ACC_TARGET\n\n• OTHER_REL_LIMITED\n\n• OTHER_REL_ACC_TARGET",
          "type": "string"
        },
        "OtherSortMode": {
          "description": "Defines the sort order of the dimension values.\nThe default value is OTHERSORT_DESCENDING_ .\n\nOne of:\n\n• OTHER_SORT_DEFAULT\n\n• OTHER_SORT_DESCENDING\n\n• OTHER_SORT_ASCENDING",
          "type": "string"
        },
        "ReferencedExpression": {
          "description": "This parameter applies when there are several measures.\nName of the measure to use for the calculation of Others for a specific dimension.",
          "type": "#/definitions/StringExpr"
        },
        "SuppressOther": {
          "description": "If set to true, the group Others is not displayed as a dimension value.\nThe default value is false.",
          "type": "bool"
        },
        "TotalMode": {
          "description": "If set to TOTALEXPR_ , the total of the dimension values is returned.\nThe default value is TOTALOFF_ .\n\nOne of:\n\n• TOTAL_OFF\n\n• TOTAL_EXPR",
          "type": "string"
        }
      }
    },
    "Point": {
      "type": "struct",
      "entries": {
        "X": {
          "description": "x-coordinate in pixels.\nThe origin is the top left of the screen.",
          "type": "int"
        },
        "Y": {
          "description": "y-coordinate in pixels.\nThe origin is the top left of the screen.",
          "type": "int"
        }
      }
    },
    "PositionMark": {
      "type": "struct",
      "entries": {
        "DimName": {
          "type": "string"
        },
        "ElemNo": {
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "ElemValues": {
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProgressData": {
      "type": "struct",
      "entries": {
        "Completed": {
          "description": "This property is not used.",
          "type": "int"
        },
        "ErrorData": {
          "description": "Information about the error messages that occur during the script execution.",
          "type": "slice",
          "items": {
            "type": "#/definitions/ErrorData"
          }
        },
        "Finished": {
          "description": "True if the request is finished.",
          "type": "bool"
        },
        "KB": {
          "description": "This property is not used.",
          "type": "int"
        },
        "Millisecs": {
          "description": "Request duration in milliseconds.",
          "type": "int"
        },
        "PersistentProgress": {
          "description": "A progress message is persistent when it informs about the start or end of a statement. For example, it can inform about the total number of lines fetched from a data source or tell that the app was saved. All persistent progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qPersistentProgressMessages*, the content of the localized message string is displayed (not its message code).",
          "type": "string"
        },
        "PersistentProgressMessages": {
          "description": "List of persistent progress messages.",
          "type": "slice",
          "items": {
            "type": "#/definitions/ProgressMessage"
          }
        },
        "Started": {
          "description": "True if the request is started.",
          "type": "bool"
        },
        "Total": {
          "description": "This property is not used.",
          "type": "int"
        },
        "TransientProgress": {
          "description": "A progress message is transient when it informs about the progress of an ongoing statement. For example, it can tell how many lines are currently fetched from a data source. All transient progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qTransientProgressMessage*, the content of the localized message string is displayed (not its message code).",
          "type": "string"
        },
        "TransientProgressMessage": {
          "description": "Transient progress message.",
          "type": "#/definitions/ProgressMessage"
        },
        "UserInteractionWanted": {
          "description": "True when the engine pauses the script execution and waits for a user interaction.",
          "type": "bool"
        }
      }
    },
    "ProgressMessage": {
      "type": "struct",
      "entries": {
        "MessageCode": {
          "description": "Code number to the corresponding localized message string.",
          "type": "int"
        },
        "MessageParameters": {
          "description": "Parameters to be inserted in the localized message string.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QIX_SCHEMA_VERSION": {
      "description": "Version of the schema used to generate the enigma.go QIX API",
      "constant": true,
      "type": "string"
    },
    "Range": {
      "type": "struct",
      "entries": {
        "Max": {
          "description": "Highest value in the range",
          "type": "#/definitions/Float64"
        },
        "MaxInclEq": {
          "description": "If set to true, the range includes the highest value in the range of selections (Equals to ). [bn(50500)]\nExample:\nThe range is [1,10]. If qMinInclEq is set to true it means that 10 is included in the range of selections.",
          "type": "bool"
        },
        "Min": {
          "description": "Lowest value in the range",
          "type": "#/definitions/Float64"
        },
        "MinInclEq": {
          "description": "If set to true, the range includes the lowest value in the range of selections (Equals to ). [bn(50500)]\nExample:\nThe range is [1,10]. If qMinInclEq is set to true it means that 1 is included in the range of selections.",
          "type": "bool"
        }
      }
    },
    "RangeSelectInfo": {
      "type": "struct",
      "entries": {
        "Measure": {
          "description": "Label of the measure.",
          "type": "string"
        },
        "RangeHi": {
          "description": "Highest value in the range.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "#/definitions/Float64",
          "ref-type": "pointer"
        },
        "RangeLo": {
          "description": "Lowest value in the range.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "#/definitions/Float64",
          "ref-type": "pointer"
        }
      }
    },
    "Rect": {
      "type": "struct",
      "entries": {
        "Height": {
          "description": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).",
          "type": "int"
        },
        "Left": {
          "description": "Position from the left.\nCorresponds to the first column.",
          "type": "int"
        },
        "Top": {
          "description": "Position from the top.\nCorresponds to the first row.",
          "type": "int"
        },
        "Width": {
          "description": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).",
          "type": "int"
        }
      }
    },
    "RemoteObject": {
      "description": "RemoteObject represents an object inside Qlik Associative Engine.",
      "type": "struct",
      "entries": {
        "ChangeListsChannel": {
          "description": "ChangeListsChannel returns a channel that receives change and close notifications from Qlik Associative Engine. if the pushedOnly argument is set to true\nonly pushed change lists are put into the channel - not changes that are returned as a response to an API call.",
          "type": "method",
          "params": [
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "chan",
              "items": {
                "type": "#/definitions/ChangeLists",
                "ref-type": "value"
              }
            }
          ]
        },
        "ChangedChannel": {
          "description": "ChangedChannel returns a channel that will receive changes when the underlying object is invalidated.",
          "type": "method",
          "returns": [
            {
              "type": "chan",
              "items": {
                "type": "struct",
                "ref-type": "value"
              }
            }
          ]
        },
        "CloseChangeListsChannel": {
          "description": "CloseChangeListsChannel closes and unregisters the supplied event channel from the session.",
          "type": "method",
          "params": [
            {
              "type": "chan",
              "items": {
                "type": "#/definitions/ChangeLists",
                "ref-type": "value"
              }
            }
          ]
        },
        "CloseSessionMessageChannel": {
          "description": "CloseSessionMessageChannel closes and unregisters the supplied event channel from the session.",
          "type": "method",
          "params": [
            {
              "type": "chan",
              "items": {
                "type": "#/definitions/SessionMessage",
                "ref-type": "value"
              }
            }
          ]
        },
        "Closed": {
          "description": "Closed returns a channel that is closed when the remote object in Qlik Associative Engine is closed",
          "type": "method",
          "returns": [
            {
              "type": "chan",
              "items": {
                "type": "struct",
                "ref-type": "value"
              }
            }
          ]
        },
        "DisconnectFromServer": {
          "description": "DisconnectFromServer shuts down the websocket connection to the Qlik Assocative Engine",
          "type": "method"
        },
        "Disconnected": {
          "description": "Disconnected returns a channel that will be closed once the underlying socket is closed.",
          "type": "method",
          "returns": [
            {
              "type": "chan",
              "items": {
                "type": "struct",
                "ref-type": "value"
              }
            }
          ]
        },
        "GetMockSocket": {
          "type": "method",
          "returns": [
            {
              "type": "#/definitions/MockSocket"
            }
          ]
        },
        "ObjectInterface": {
          "type": "#/definitions/ObjectInterface",
          "embedded": true
        },
        "RemoveChangeChannel": {
          "description": "RemoveChangeChannel unregisters a channel from further events.",
          "type": "method",
          "params": [
            {
              "type": "chan",
              "items": {
                "type": "struct",
                "ref-type": "value"
              }
            }
          ]
        },
        "SessionMessageChannel": {
          "description": "SessionMessageChannel returns a channel that receives notifications from Qlik Associative Engine. To only receive\ncertain events a list of topics can be supplied. If no topics are supplied all events are received.",
          "type": "method",
          "params": [
            {
              "type": "slice",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "type": "chan",
              "items": {
                "type": "#/definitions/SessionMessage",
                "ref-type": "value"
              }
            }
          ]
        },
        "SessionState": {
          "description": "SessionState returns either SESSION_CREATED or SESSION_ATTACHED to describe the status of the current websocket session",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "WithReservedRequestID": {
          "description": "Creates a new context that contains a reserved JSON RPC protocol level request id.\nIt can be for instance be useful when the request id used for upcoming call needs to be known.",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "int"
            }
          ]
        }
      }
    },
    "SampleResult": {
      "type": "struct",
      "entries": {
        "FieldOrColumn": {
          "description": "Name of field or column.",
          "type": "#/definitions/FieldOrColumn"
        },
        "Values": {
          "description": "Matched values part of the sample.",
          "type": "slice",
          "items": {
            "type": "#/definitions/FieldValue"
          }
        }
      }
    },
    "ScriptSyntaxError": {
      "type": "struct",
      "entries": {
        "ColInLine": {
          "description": "Position of the erroneous text from the beginning of the line.",
          "type": "int"
        },
        "ErrLen": {
          "description": "Length of the word where the error is located.",
          "type": "int"
        },
        "LineInTab": {
          "description": "Line number in the section where the error is located.",
          "type": "int"
        },
        "SecondaryFailure": {
          "description": "The default value is false.",
          "type": "bool"
        },
        "TabIx": {
          "description": "Number of the faulty section.",
          "type": "int"
        },
        "TextPos": {
          "description": "Position of the erroneous text from the beginning of the script.",
          "type": "int"
        }
      }
    },
    "SearchAssociationResult": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "FieldDictionaries": {
          "description": "Information about the fields containing search hits.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchFieldDictionary"
          }
        },
        "FieldNames": {
          "description": "List of the fields that contains search associations.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "SearchTerms": {
          "description": "List of the search terms.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "SearchTermsMatched": {
          "description": "List of search results.\nThe maximum number of search results in this list is set by qPage/qCount .",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchMatchCombinations"
          }
        },
        "TotalSearchResults": {
          "description": "Total number of search results.\nThis number is not limited by qPage/qCount .",
          "type": "int"
        }
      }
    },
    "SearchAttribute": {
      "type": "struct",
      "entries": {
        "Key": {
          "description": "String corresponding to SearchObjectOptions.qAttributes. It will be qProperty for SearchObjectOptions.",
          "type": "string"
        },
        "Value": {
          "description": "String corresponding to qKey for the current SearchGroupItemMatch. For example, if the match is Make by Price found in the title of a generic object, qValue will be qMetaDef/title.",
          "type": "string"
        }
      }
    },
    "SearchCharRange": {
      "type": "struct",
      "entries": {
        "CharCount": {
          "description": "Length of the match in the search result.",
          "type": "int"
        },
        "CharPos": {
          "description": "Starting position of the match in the search result, starting from 0.",
          "type": "int"
        },
        "Term": {
          "description": "Position of the term in the list of search terms, starting from 0.",
          "type": "int"
        }
      }
    },
    "SearchCombinationOptions": {
      "type": "struct",
      "entries": {
        "Attributes": {
          "description": "Optional.\n\n• For SearchSuggest method, this array is empty.\n\n• For SearchObjects method, this array is empty or contain qProperty .\n\n• For SearchResults method, this array is empty, or contains qNum and/or qElemNum . It allows the user to request details in the outputted SearchGroupItemMatch . For more information, see SearchGroupItemMatch.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "CharEncoding": {
          "description": "Encoding used to compute qRanges of type SearchCharRange.\nOnly affects the computation of the ranges. It does not impact the encoding of the text.\n\nOne of:\n\n• Utf8 or CHAR_ENCODING_UTF8\n\n• Utf16 or CHAR_ENCODING_UTF16",
          "type": "string"
        },
        "Context": {
          "description": "Search context.\nThe default value is LockedFieldsOnly .\n\nOne of:\n\n• Cleared or CONTEXT_CLEARED\n\n• LockedFieldsOnly or CONTEXT_LOCKED_FIELDS_ONLY\n\n• CurrentSelections or CONTEXT_CURRENT_SELECTIONS",
          "type": "string"
        },
        "SearchFields": {
          "description": "List of the search fields.\nIf empty, the search is performed in all fields of the app.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SearchFieldDictionary": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "Field": {
          "description": "Position of the field in the list of fields, starting from 0.\nThe list of fields is defined in qResults/qFieldNames and contains the search associations.",
          "type": "int"
        },
        "Result": {
          "description": "List of the matching values.\nThe maximum number of values in this list is set by qMaxNbrFieldMatches .",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchTermResult"
          }
        }
      }
    },
    "SearchFieldMatch": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "Field": {
          "description": "Position of the field in the list of fields, starting from 0.\nThe list of fields is defined in qResults/qFieldNames and contains the search associations.",
          "type": "int"
        },
        "NoOfMatches": {
          "description": "Number of search hits in the field.\nThe number of values in qValues and the value of qNoOfMatches are equal if qMaxNbrFieldMatches is -1.",
          "type": "int"
        },
        "Terms": {
          "description": "Positions of the search terms, starting from 0.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Values": {
          "description": "Positions of the matching values in the search results.\nThe maximum number of values in this list is defined by qMaxNbrFieldMatches .",
          "type": "slice",
          "items": {
            "type": "int"
          }
        }
      }
    },
    "SearchGroup": {
      "type": "struct",
      "entries": {
        "GroupType": {
          "description": "Type of the search group.\n\nOne of:\n\n• DatasetType or DATASET_GROUP\n\n• GenericObjectsType or GENERIC_OBJECTS_GROUP",
          "type": "string"
        },
        "Id": {
          "description": "Identifier of the search group.",
          "type": "int"
        },
        "Items": {
          "description": "List of items in the search group.\nThe group items are numbered from the value of SearchGroupOptions.qOffset to the value of SearchGroupOptions.qOffset \\+ SearchGroupOptions.qCount",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchGroupItem"
          }
        },
        "SearchTermsMatched": {
          "description": "Indexes of the search terms that are included in the group. These search terms are related to the list of terms defined in SearchResult.qSearchTerms .",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "TotalNumberOfItems": {
          "description": "Total number of distinct items in the search group.",
          "type": "int"
        }
      }
    },
    "SearchGroupItem": {
      "type": "struct",
      "entries": {
        "Identifier": {
          "description": "Identifier of the item.\nIt corresponds to:\n\n• The name of the field, if the type of the search group is data set.\n\n• The id of the generic object if the type of the search group is generic object.",
          "type": "string"
        },
        "ItemMatches": {
          "description": "List of matches in the search group item.\nThe group item matches are numbered from the value of SearchGroupItemOptions.qOffset to the value of SearchGroupItemOptions.qOffset \\+ SearchGroupItemOptions.qCount .",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchGroupItemMatch"
          }
        },
        "ItemType": {
          "description": "Type of the group item.\n\nOne of:\n\n• Field or FIELD\n\n• GenericObject or GENERIC_OBJECT",
          "type": "string"
        },
        "SearchTermsMatched": {
          "description": "Indexes of the search terms that are included in the group item. These search terms are related to the list of terms defined in SearchResult.qSearchTerms .",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "TotalNumberOfMatches": {
          "description": "Total number of distinct matches in the search group item.",
          "type": "int"
        }
      }
    },
    "SearchGroupItemMatch": {
      "type": "struct",
      "entries": {
        "Attributes": {
          "description": "Provides detail of the match as requested by the user in SearchObjectsOptions.qAttributes or SearchCombinationOptions.qAttributes\nIf the user requests SearchObjects or SearchResults with an empty qAttributes option, the outputted qAttributes is returned empty.\nFor SearchObjects requested with qProperty , the SearchGroupItemMatch.qAttributes return value contains [“qProperty”, \"qMetaDef/title”] if the match has been found in the title of the item. For dimension values, the returned qProperty will be “*” .\nFor SearchResults requested with qNum , the SearchGroupItemMatch.qAttributes return value contains [\"qNum\", N] where N is the numeric value of the element or NaN if the value is not numeric.\nFor SearchResults requested with qElemNum , the SearchGroupItemMatch.qAttributes return value contains [\"qElemNum\", N] where N is the value index of the element.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchAttribute"
          }
        },
        "FieldSelectionMode": {
          "description": "Selection mode of a field.\nSuppressed by default. One and always one field value is selected when set to OneAndOnlyOne.",
          "type": "string"
        },
        "Ranges": {
          "description": "List of ranges.\nFor example, if the search terms are Price and Make, and the search group item value is Make by Price vs Mileage, then there are two ranges: one for Price and one for Make.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchCharRange"
          }
        },
        "Text": {
          "description": "Search match value.\nValue of the search group item.\nIf the match is found in a field, it corresponds to the value of the field.\nIf the match is found in a generic object property, it corresponds to the property value.",
          "type": "string"
        }
      }
    },
    "SearchGroupItemOptions": {
      "type": "struct",
      "entries": {
        "Count": {
          "description": "Maximum number of matches per item (in qItemMatches[ ] ).\nThe default value is -1: all values are returned.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "GroupItemType": {
          "description": "Type of the group item. Can be:\n\n• GenericObject: the type of the search group item is a generic object. Group items have this type when you are calling SearchObjects .\n\n• Field: the type of the search group item is a field. Group items have this type when you are calling SearchResults .\n\nOne of:\n\n• Field or FIELD\n\n• GenericObject or GENERIC_OBJECT",
          "type": "string"
        },
        "Offset": {
          "description": "Position starting from 0.\nThe default value is 0.",
          "type": "int"
        }
      }
    },
    "SearchGroupOptions": {
      "type": "struct",
      "entries": {
        "Count": {
          "description": "Maximum number of items per group (in qItems[ ] ).\nThe default value is -1; all values are returned.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "GroupType": {
          "description": "Type of the group. Can be:\n\n• GenericObjectType: the type of the search group item is a generic object. Groups have this type when you are calling SearchObjects .\n\n• DatasetType: type of the search group item is a dataset association. Groups have this type when you are calling SearchResults .\n\nOne of:\n\n• DatasetType or DATASET_GROUP\n\n• GenericObjectsType or GENERIC_OBJECTS_GROUP",
          "type": "string"
        },
        "Offset": {
          "description": "Position starting from 0.\nThe default value is 0.",
          "type": "int"
        }
      }
    },
    "SearchMatchCombination": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "FieldMatches": {
          "description": "Information about the search matches.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchFieldMatch"
          }
        },
        "Id": {
          "description": "Index of the search result, starting from 0.",
          "type": "int"
        }
      }
    },
    "SearchMatchCombinations": {
      "type": "slice",
      "items": {
        "type": "#/definitions/SearchMatchCombination"
      }
    },
    "SearchObjectOptions": {
      "type": "struct",
      "entries": {
        "Attributes": {
          "description": "This array is either empty or contains qProperty .",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "CharEncoding": {
          "description": "Encoding used to compute qRanges of type SearchCharRange.\nOnly affects the computation of the ranges. It does not impact the encoding of the text.\n\nOne of:\n\n• Utf8 or CHAR_ENCODING_UTF8\n\n• Utf16 or CHAR_ENCODING_UTF16",
          "type": "string"
        }
      }
    },
    "SearchPage": {
      "type": "struct",
      "entries": {
        "Count": {
          "description": "Number of search groups to return (in qSearchGroupArray ).",
          "type": "int"
        },
        "GroupItemOptions": {
          "description": "Options of the search group items.\nIf this property is not set, all values are returned.\nThis property is to be used with the SearchResults method or the SearchObjects method.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchGroupItemOptions"
          }
        },
        "GroupOptions": {
          "description": "Options of the search groups.\nIf this property is not set, all values are returned.\nThis property is to be used with the SearchResults method or the SearchObjects method.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchGroupOptions"
          }
        },
        "MaxNbrFieldMatches": {
          "description": "Maximum number of matching values to return per search result.\nThe default value is -1; all values are returned.\nThis property is to be used with the SearchAssociations method.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "int",
          "ref-type": "pointer"
        },
        "Offset": {
          "description": "Position from the top, starting from 0.\nIf the offset is set to 0, the first search result to be returned is at position 0.",
          "type": "int"
        }
      }
    },
    "SearchResult": {
      "type": "struct",
      "entries": {
        "SearchGroupArray": {
          "description": "List of search groups.\nThe groups are numbered from the value of SearchPage.qOffset to the value of SearchPage.qOffset + SearchPage.qCount .",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchGroup"
          }
        },
        "SearchTerms": {
          "description": "List of the search terms.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "TotalNumberOfGroups": {
          "description": "Total number of groups.",
          "type": "int"
        }
      }
    },
    "SearchSuggestItem": {
      "type": "struct",
      "entries": {
        "Term": {
          "description": "Index of the suggestion value.\nThe indexing starts from 0 and from the left.",
          "type": "int"
        },
        "Value": {
          "description": "Value of the suggestion.",
          "type": "string"
        }
      }
    },
    "SearchSuggestionResult": {
      "type": "struct",
      "entries": {
        "FieldNames": {
          "description": "List of field names that contain search hits.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Suggestions": {
          "description": "List of suggestions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchSuggestItem"
          }
        }
      }
    },
    "SearchTermResult": {
      "deprecated": true,
      "x-qlik-deprecation-description": "This will be removed in a future version",
      "type": "struct",
      "entries": {
        "ElemNumber": {
          "description": "Element number of the associated value.",
          "type": "int"
        },
        "Ranges": {
          "description": "List of ranges.\nFor example, if the user searches the term read and the associative value is Reading , then the corresponding range would be Read in Reading .",
          "type": "slice",
          "items": {
            "type": "#/definitions/SearchCharRange"
          }
        },
        "Text": {
          "description": "Text of the associated value.",
          "type": "string"
        }
      }
    },
    "SelectInfo": {
      "type": "struct",
      "entries": {
        "ContinuousRangeInfo": {
          "description": "List of information about ranges for selections.",
          "type": "slice",
          "items": {
            "type": "#/definitions/Range"
          }
        },
        "NumberFormat": {
          "description": "Gives information about the formatting of the range.\nThis parameter is used when performing range selections or text searches in dimensions.",
          "type": "#/definitions/FieldAttributes"
        },
        "RangeHi": {
          "description": "Highest value of the search range.\nThis parameter is used when performing range selections or text searches in dimensions.\nDefault is Null.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "#/definitions/Float64",
          "ref-type": "pointer"
        },
        "RangeInfo": {
          "description": "This parameter is used when performing range selections or text searches in measures.\nGives information about the range of selections.",
          "type": "slice",
          "items": {
            "type": "#/definitions/RangeSelectInfo"
          }
        },
        "RangeLo": {
          "description": "Lower value of the search range.\nThis parameter is used when performing range selections or text searches in dimensions.\nDefault is Null.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "#/definitions/Float64",
          "ref-type": "pointer"
        },
        "SelectFieldSearch": {
          "description": "This parameter is true if the TextSearch is a result of a Select Field operation.",
          "type": "bool"
        },
        "SoftLock": {
          "description": "Set to true to ignore locks; in that case, locked fields can be selected.\nThe default value is false.",
          "type": "bool"
        },
        "TextSearch": {
          "description": "Text search string.\nEverything that matches the text is selected.\nThis parameter is optional.",
          "type": "string"
        }
      }
    },
    "SelectionObject": {
      "description": "Indicates which selections are currently applied. It gives the current selections. Is the layout for SelectionObjectDef.",
      "type": "struct",
      "entries": {
        "BackCount": {
          "description": "Number of steps back.",
          "type": "int"
        },
        "ForwardCount": {
          "description": "Number of steps forward.",
          "type": "int"
        },
        "Selections": {
          "description": "Lists the fields that are selected.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxCurrentSelectionItem"
          }
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        }
      }
    },
    "SelectionObjectDef": {
      "description": "To display the current selections.\nCan be added to any generic object but is particularly meaningful when using session objects to monitor an app.\n\nProperties:\n\n\"qSelectionObjectDef\": {}",
      "type": "struct",
      "entries": {
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        }
      }
    },
    "SessionMessage": {
      "description": "SessionMessage is a notification regarding the session coming from Qlik Associative Engine.\nThe content is stored as a raw json structure.",
      "type": "struct",
      "entries": {
        "Content": {
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "Topic": {
          "type": "string"
        }
      }
    },
    "Size": {
      "type": "struct",
      "entries": {
        "Cx": {
          "description": "Number of pixels on the x axis.",
          "type": "int"
        },
        "Cy": {
          "description": "Number of pixels on the y axis.",
          "type": "int"
        }
      }
    },
    "Socket": {
      "description": "Socket defines a set of functions that custom WebSocket implementations are expected to implement.",
      "type": "interface",
      "entries": {
        "Close": {
          "type": "method",
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "ReadMessage": {
          "type": "method",
          "returns": [
            {
              "type": "int"
            },
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            },
            {
              "type": "error"
            }
          ]
        },
        "WriteMessage": {
          "type": "method",
          "params": [
            {
              "type": "int"
            },
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "SortCriteria": {
      "type": "struct",
      "entries": {
        "Expression": {
          "description": "Sort by expression.",
          "type": "#/definitions/ValueExpr"
        },
        "SortByAscii": {
          "description": "Sorts the field by alphabetical order.",
          "type": "int"
        },
        "SortByExpression": {
          "description": "Sorts the field by expression.",
          "type": "int"
        },
        "SortByFrequency": {
          "description": "Sorts the field values by frequency (number of occurrences in the field).",
          "type": "int"
        },
        "SortByGreyness": {
          "type": "int"
        },
        "SortByLoadOrder": {
          "description": "Sorts the field values by the initial load order.",
          "type": "int"
        },
        "SortByNumeric": {
          "description": "Sorts the field values by numeric value.",
          "type": "int"
        },
        "SortByState": {
          "description": "Sorts the field values according to their logical state (selected, optional, alternative or excluded).",
          "type": "int"
        }
      }
    },
    "SourceKeyRecord": {
      "type": "struct",
      "entries": {
        "KeyFields": {
          "description": "Name of the key field.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Tables": {
          "description": "Table the key belongs to.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StaticContentList": {
      "type": "struct",
      "entries": {
        "Items": {
          "description": "Information about the list of content files.",
          "type": "slice",
          "items": {
            "type": "#/definitions/StaticContentListItem"
          }
        }
      }
    },
    "StaticContentListItem": {
      "description": "In addition, this structure can return dynamic properties.",
      "type": "struct",
      "entries": {
        "Url": {
          "description": "Relative path to the content file. The URL is static.\nIn Qlik Sense Enterprise, content files located:\n\n• In the /content/ \u003ccontent library name\u003e/ folder are part of a global content library.\n\n• In the /appcontent/ folder are part of the app specific library.\nThe content files are never embedded in the qvf file.\nIn Qlik Sense Desktop, content files located:\n\n• In the /content/default/ folder are outside the qvf file.\n\n• In the /media/ folder are embedded in the qvf file.",
          "type": "string"
        },
        "UrlDef": {
          "description": "Relative path to the content file. The URL is static.\nIn Qlik Sense Enterprise, content files located:\n\n• In the /content/ \u003ccontent library name\u003e/ folder are part of a global content library.\n\n• In the /appcontent/ folder are part of the app specific library.\nThe content files are never embedded in the qvf file.\nIn Qlik Sense Desktop, content files located:\n\n• In the /content/default/ folder are outside the qvf file.\n\n• In the /media/ folder are embedded in the qvf file.",
          "type": "string"
        }
      }
    },
    "StaticContentUrl": {
      "description": "In addition, this structure can return dynamic properties.",
      "type": "struct",
      "entries": {
        "Url": {
          "description": "Relative path of the thumbnail.",
          "type": "string"
        }
      }
    },
    "StaticContentUrlDef": {
      "description": "In addition, this structure can contain dynamic properties.",
      "type": "struct",
      "entries": {
        "Url": {
          "description": "Relative path of the thumbnail.",
          "type": "string"
        }
      }
    },
    "StringExpr": {
      "type": "struct",
      "entries": {
        "V": {
          "description": "Expression evaluated to string.",
          "type": "string"
        }
      }
    },
    "StringExpression": {
      "description": "Properties:\n\nAbbreviated syntax:\n\"qStringExpression\":\"=\u003cexpression\u003e\"\nExtended object syntax:\n\"qStringExpression\":{\"qExpr\":\"=\u003cexpression\u003e\"}\nWhere:\n\n• \u003c expression \u003e is a string\n\nThe \"=\" sign in the string expression is not mandatory. Even if the \"=\" sign is not given, the expression is evaluated.\nA string expression is not evaluated, if the expression is surrounded by simple quotes.\n\nThe result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string.",
      "type": "struct",
      "entries": {
        "Expr": {
          "type": "string"
        }
      }
    },
    "TableRecord": {
      "type": "struct",
      "entries": {
        "Comment": {
          "description": "Comment related to the table.",
          "type": "string"
        },
        "Fields": {
          "description": "Information about the fields in the table.",
          "type": "slice",
          "items": {
            "type": "#/definitions/FieldInTableData"
          }
        },
        "IsDirectDiscovery": {
          "description": "If set to true, Direct Discovery is used.\nDirect Discovery fields are not loaded into memory and remain in the external database.",
          "type": "bool"
        },
        "IsSynthetic": {
          "description": "This property is set to true if the table contains a synthetic key.",
          "type": "bool"
        },
        "Loose": {
          "description": "This property is set to true if the table is loose.",
          "type": "bool"
        },
        "Name": {
          "description": "Name of the table.",
          "type": "string"
        },
        "NoOfRows": {
          "description": "Number of rows in the table.",
          "type": "int"
        },
        "Pos": {
          "description": "Information about the position of the table.",
          "type": "#/definitions/Point"
        }
      }
    },
    "TableRow": {
      "type": "struct",
      "entries": {
        "Value": {
          "description": "Array of field values.",
          "type": "slice",
          "items": {
            "type": "#/definitions/FieldValue"
          }
        }
      }
    },
    "TableViewBroomPointSaveInfo": {
      "type": "struct",
      "entries": {
        "Fields": {
          "description": "List of fields in the table.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Pos": {
          "description": "Information about the position of the broom point.",
          "type": "#/definitions/Point"
        },
        "Table": {
          "description": "Name of the table.",
          "type": "string"
        }
      }
    },
    "TableViewConnectionPointSaveInfo": {
      "type": "struct",
      "entries": {
        "Fields": {
          "description": "List of the fields in the table.",
          "type": "slice",
          "items": {
            "type": "string"
          }
        },
        "Pos": {
          "description": "Information about the position of the connection point.",
          "type": "#/definitions/Point"
        }
      }
    },
    "TableViewCtlSaveInfo": {
      "type": "struct",
      "entries": {
        "InternalView": {
          "description": "Internal view mode.",
          "type": "#/definitions/TableViewSaveInfo"
        },
        "SourceView": {
          "description": "Source view mode.",
          "type": "#/definitions/TableViewSaveInfo"
        }
      }
    },
    "TableViewDlgSaveInfo": {
      "type": "struct",
      "entries": {
        "CtlInfo": {
          "description": "Set of data for internal and source view modes.",
          "type": "#/definitions/TableViewCtlSaveInfo"
        },
        "Mode": {
          "description": "View mode to display when opening Qlik Sense data model viewer.\nOne of:\n\n• 0 for internal view mode.\n\n• 1 for source view mode.",
          "type": "int"
        },
        "Pos": {
          "description": "Information about the position of the dialog window.\nNot used in Qlik Sense.",
          "type": "#/definitions/Rect"
        }
      }
    },
    "TableViewSaveInfo": {
      "type": "struct",
      "entries": {
        "BroomPoints": {
          "description": "List of the broom points in the database model viewer.\nNot used in Qlik Sense.",
          "type": "slice",
          "items": {
            "type": "#/definitions/TableViewBroomPointSaveInfo"
          }
        },
        "ConnectionPoints": {
          "description": "List of connection points in the database model viewer.\nNot used in Qlik Sense.",
          "type": "slice",
          "items": {
            "type": "#/definitions/TableViewConnectionPointSaveInfo"
          }
        },
        "Tables": {
          "description": "List of the tables in the database model viewer.",
          "type": "slice",
          "items": {
            "type": "#/definitions/TableViewTableWinSaveInfo"
          }
        },
        "ZoomFactor": {
          "description": "Zoom factor in the database model viewer.\nThe default value is 1.0.\nWhen set to nil the default value is used, when set to point at a value that value is used (including golang zero values)",
          "type": "#/definitions/Float64",
          "ref-type": "pointer"
        }
      }
    },
    "TableViewTableWinSaveInfo": {
      "type": "struct",
      "entries": {
        "Caption": {
          "description": "Table name.",
          "type": "string"
        },
        "Pos": {
          "description": "Information about the position of the table.",
          "type": "#/definitions/Rect"
        }
      }
    },
    "TextMacro": {
      "type": "struct",
      "entries": {
        "DisplayString": {
          "description": "Variable value.",
          "type": "string"
        },
        "IsReserved": {
          "description": "Is set to true if the variable is a reserved variable.",
          "type": "bool"
        },
        "IsSystem": {
          "description": "Is set to true if the variable is a system variable.",
          "type": "bool"
        },
        "RefSeqNo": {
          "description": "Order in which the variable was referenced during the script execution.\nThe same number sequence is used for both qRefSeqNo and qSetSeqNo .",
          "type": "int"
        },
        "SetSeqNo": {
          "description": "Order in which the variable was updated during the script execution.\nThe same number sequence is used for both qRefSeqNo and qSetSeqNo .",
          "type": "int"
        },
        "Tag": {
          "description": "Name of the variable.",
          "type": "string"
        }
      }
    },
    "TrafficLogger": {
      "description": "TrafficLogger defines callback functions that can be used to log all network traffic",
      "type": "interface",
      "entries": {
        "Closed": {
          "type": "method"
        },
        "Opened": {
          "type": "method"
        },
        "Received": {
          "type": "method",
          "params": [
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            }
          ]
        },
        "Sent": {
          "type": "method",
          "params": [
            {
              "type": "slice",
              "items": {
                "type": "byte"
              }
            }
          ]
        }
      }
    },
    "TreeData": {
      "description": "Renders the properties of a TreeData object. Is the layout for TreeDataDef.\nFor more information about the definition of TreeData, see Generic object.\nTo retrieve data from the TreeData object, use the method called GetHyperCubeTreeData.",
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "CalcCondMsg": {
          "description": "The message displayed if calculation condition is not fulfilled.",
          "type": "string"
        },
        "DimensionInfo": {
          "description": "Information on the dimension.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeDimensionInfo"
          }
        },
        "EffectiveInterColumnSortOrder": {
          "description": "Defines the order of the dimenion levels/columns in the TreeData object.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "Error": {
          "description": "This parameter is optional and is displayed in case of error.",
          "type": "#/definitions/NxValidationError"
        },
        "HasOtherValues": {
          "description": "True if other row exists.",
          "type": "bool"
        },
        "LastExpandedPos": {
          "description": "Position of the last expended cell.\nThis property is optional.",
          "type": "#/definitions/NxCellPosition"
        },
        "NodesOnDim": {
          "description": "The total number of nodes on each dimension.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        },
        "Title": {
          "description": "Title of the TreeData object, for example the title of a chart.",
          "type": "string"
        },
        "TreeDataPages": {
          "description": "Set of data.\nIs empty if nothing has been defined in qInitialDataFetch in TreeDataDef.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeNode"
          }
        }
      }
    },
    "TreeDataDef": {
      "description": "Defines the properties of a TreeData object.\nFor more information about the definition of a TreeData object, see Generic object.",
      "x-qlik-stability": "stable",
      "type": "struct",
      "entries": {
        "CalcCondition": {
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the TreeData is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "type": "#/definitions/NxCalcCond"
        },
        "Dimensions": {
          "description": "Array of dimensions.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeDimensionDef"
          }
        },
        "InitialDataFetch": {
          "description": "Initial data set.\nThis property is optional.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxTreeDataOption"
          }
        },
        "InterColumnSortOrder": {
          "description": "Defines the order of the dimension levels/columns in the TreeData object.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.\nThe default sort order is the order in which the dimensions and measures have been defined in the TreeDataDef.",
          "type": "slice",
          "items": {
            "type": "int"
          }
        },
        "OpenFullyExpanded": {
          "description": "If this property is set to true, the cells are opened expanded. The default value is false.",
          "type": "bool"
        },
        "PopulateMissing": {
          "description": "If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.\nThe default value is false.",
          "type": "bool"
        },
        "StateName": {
          "description": "Name of the alternate state.\nDefault is current selections $ .",
          "type": "string"
        },
        "SuppressMissing": {
          "description": "Removes missing values.",
          "type": "bool"
        },
        "SuppressZero": {
          "description": "Removes zero values.",
          "type": "bool"
        },
        "Title": {
          "description": "Title of the TreeData object, for example the title of a chart.",
          "type": "#/definitions/StringExpr"
        }
      }
    },
    "UndoInfo": {
      "description": "Displays information about the number of possible undos and redos. Is the layout for UndoInfoDef.",
      "type": "struct",
      "entries": {
        "RedoCount": {
          "description": "Number of possible redos.",
          "type": "int"
        },
        "UndoCount": {
          "description": "Number of possible undos.",
          "type": "int"
        }
      }
    },
    "UndoInfoDef": {
      "description": "Defines if an object should contain information on the number of possible undo and redo.\n\nProperties:\n\n\"qUndoInfoDef\": {}\nThe numbers of undos and redos are empty when an object is created. The number of possible undos is increased every time an action (for example, create a child, set some properties) on the object is performed. The number of possible redos is increased every time an undo action is performed.",
      "type": "struct"
    },
    "ValueExpr": {
      "type": "struct",
      "entries": {
        "V": {
          "description": "Expression evaluated to dual.",
          "type": "string"
        }
      }
    },
    "ValueExpression": {
      "description": "Properties:\n\nAbbreviated syntax:\n\"qValueExpression\":\"=\u003cexpression\u003e\"\nExtended object syntax:\n\"qValueExpression\":{\"qExpr\":\"=\u003cexpression\u003e\"}\nWhere:\n\n• \u003c expression \u003e is a string.\n\nThe \"=\" sign in the value expression is not mandatory. Even if the \"=\" sign is not given, the expression is evaluated.\n\nThe expression is evaluated as a numeric.",
      "type": "struct",
      "entries": {
        "Expr": {
          "type": "string"
        }
      }
    },
    "Variable": {
      "type": "struct",
      "entries": {
        "ForceContent": {
          "description": "Sets the value of a dual variable overriding any input constraints.\n\nParameters:\n\n◾ s   -   String representation of a dual value.\nSet this parameter to \"\", if the string representation is to be Null.\n\n◾ d   -   Numeric representation of a dual value.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GenericVariable::SetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "#/definitions/Float64"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "GetContent": {
          "description": "Returns the calculated value of a variable.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GenericVariable::GetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/AlfaNumString"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetContentRaw": {
          "description": "Returns the calculated value of a variable.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GenericVariable::GetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetNxProperties": {
          "description": "Gets the properties of a variable.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "#/definitions/NxVariableProperties"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetNxPropertiesRaw": {
          "description": "Gets the properties of a variable.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "https://golang.org/pkg/encoding/json/RawMessage"
            },
            {
              "type": "error"
            }
          ]
        },
        "GetRawContent": {
          "description": "Returns the raw value of a variable.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GenericVariable::GetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            }
          ],
          "returns": [
            {
              "type": "string"
            },
            {
              "type": "error"
            }
          ]
        },
        "RemoteObject": {
          "type": "#/definitions/RemoteObject",
          "embedded": true
        },
        "SetContent": {
          "description": "Sets a value to a variable.\n\nParameters:\n\n◾ content     -   Value of the variable.\n\n◾ updateMRU   -   If set to true, the value is added to the Most Recently Used (MRU) list.",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _GenericVariable::SetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ],
          "returns": [
            {
              "type": "bool"
            },
            {
              "type": "error"
            }
          ]
        },
        "SetNxProperties": {
          "description": "Sets some properties to a variable.\n\nParameters:\n\n◾ properties   -   Information about the properties of the variable",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _SetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "#/definitions/NxVariableProperties"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        },
        "SetNxPropertiesRaw": {
          "description": "Sets some properties to a variable.\n\nParameters:\n\n◾ properties   -   Information about the properties of the variable",
          "x-qlik-stability": "locked",
          "deprecated": true,
          "x-qlik-deprecation-description": "Use _SetProperties_ method instead",
          "type": "method",
          "params": [
            {
              "type": "https://golang.org/pkg/context/Context"
            },
            {
              "type": "interface"
            }
          ],
          "returns": [
            {
              "type": "error"
            }
          ]
        }
      }
    },
    "VariableList": {
      "description": "Lists the variables in an app. Is the layout for VariableListDef.",
      "type": "struct",
      "entries": {
        "Items": {
          "description": "List of the variables.",
          "type": "slice",
          "items": {
            "type": "#/definitions/NxVariableListItem"
          }
        }
      }
    },
    "VariableListDef": {
      "description": "Defines the list of variables in an app.",
      "type": "struct",
      "entries": {
        "Data": {
          "description": "Data",
          "type": "https://golang.org/pkg/encoding/json/RawMessage"
        },
        "ShowConfig": {
          "description": "Shows the system variables if set to true.",
          "type": "bool"
        },
        "ShowReserved": {
          "description": "Shows the reserved variables if set to true.",
          "type": "bool"
        },
        "ShowSession": {
          "description": "Shows the session variables if set to true.",
          "type": "bool"
        },
        "Type": {
          "description": "Type of variables to include in the list.",
          "type": "string"
        }
      }
    },
    "WithMetricsCollector": {
      "description": "WithMetricsCollector provides a new context with the a MetricsCollector that records performance metrics for invocations",
      "type": "function",
      "params": [
        {
          "type": "https://golang.org/pkg/context/Context"
        }
      ],
      "returns": [
        {
          "type": "https://golang.org/pkg/context/Context"
        },
        {
          "type": "#/definitions/MetricsCollector"
        }
      ]
    }
  }
}